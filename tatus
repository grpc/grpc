[1mdiff --git a/src/core/load_balancing/outlier_detection/outlier_detection.cc b/src/core/load_balancing/outlier_detection/outlier_detection.cc[m
[1mindex d98e151cfe..7909838aad 100644[m
[1m--- a/src/core/load_balancing/outlier_detection/outlier_detection.cc[m
[1m+++ b/src/core/load_balancing/outlier_detection/outlier_detection.cc[m
[36m@@ -914,8 +914,8 @@[m [mvoid OutlierDetectionLb::EjectionTimer::OnTimerLocked() {[m
               << " success rate candidates and "[m
               << failure_percentage_ejection_candidates.size()[m
               << " failure percentage candidates; ejected_host_count="[m
[31m-              << ejected_host_count << "; success_rate_sum=" << success_rate_sum[m
[31m-              << ".";[m
[32m+[m[32m              << ejected_host_count[m
[32m+[m[32m              << "; success_rate_sum=" << success_rate_sum;[m
   }[m
   // success rate algorithm[m
   if (!success_rate_ejection_candidates.empty() &&[m
[36m@@ -926,7 +926,7 @@[m [mvoid OutlierDetectionLb::EjectionTimer::OnTimerLocked() {[m
                 << "] running success rate algorithm: "[m
                 << "stdev_factor=" << config.success_rate_ejection->stdev_factor[m
                 << ", enforcement_percentage="[m
[31m-                << config.success_rate_ejection->enforcement_percentage << ".";[m
[32m+[m[32m                << config.success_rate_ejection->enforcement_percentage;[m
     }[m
     // calculate ejection threshold: (mean - stdev *[m
     // (success_rate_ejection.stdev_factor / 1000))[m
[36m@@ -943,13 +943,13 @@[m [mvoid OutlierDetectionLb::EjectionTimer::OnTimerLocked() {[m
     if (GRPC_TRACE_FLAG_ENABLED(outlier_detection_lb)) {[m
       LOG(INFO) << "[outlier_detection_lb " << parent_.get()[m
                 << "] stdev=" << stdev[m
[31m-                << ", ejection_threshold=" << ejection_threshold << ".";[m
[32m+[m[32m                << ", ejection_threshold=" << ejection_threshold;[m
     }[m
     for (auto& candidate : success_rate_ejection_candidates) {[m
       if (GRPC_TRACE_FLAG_ENABLED(outlier_detection_lb)) {[m
         LOG(INFO) << "[outlier_detection_lb " << parent_.get()[m
                   << "] checking candidate " << candidate.first[m
[31m-                  << ": success_rate=" << candidate.second << ".";[m
[32m+[m[32m                  << ": success_rate=" << candidate.second;[m
       }[m
       if (candidate.second < ejection_threshold) {[m
         uint32_t random_key = absl::Uniform(bit_gen_, 1, 100);[m
[36m@@ -959,7 +959,7 @@[m [mvoid OutlierDetectionLb::EjectionTimer::OnTimerLocked() {[m
           LOG(INFO) << "[outlier_detection_lb " << parent_.get()[m
                     << "] random_key=" << random_key[m
                     << " ejected_host_count=" << ejected_host_count[m
[31m-                    << " current_percent=" << current_percent << ".";[m
[32m+[m[32m                    << " current_percent=" << current_percent;[m
         }[m
         if (random_key < config.success_rate_ejection->enforcement_percentage &&[m
             (ejected_host_count == 0 ||[m
[36m@@ -968,7 +968,7 @@[m [mvoid OutlierDetectionLb::EjectionTimer::OnTimerLocked() {[m
           // this iteration.[m
           if (GRPC_TRACE_FLAG_ENABLED(outlier_detection_lb)) {[m
             LOG(INFO) << "[outlier_detection_lb " << parent_.get()[m
[31m-                      << "] ejecting candidate.";[m
[32m+[m[32m                      << "] ejecting candidate";[m
           }[m
           candidate.first->Eject(time_now);[m
           ++ejected_host_count;[m
[36m@@ -985,14 +985,13 @@[m [mvoid OutlierDetectionLb::EjectionTimer::OnTimerLocked() {[m
                 << "] running failure percentage algorithm: "[m
                 << "threshold=" << config.failure_percentage_ejection->threshold[m
                 << ", enforcement_percentage="[m
[31m-                << config.failure_percentage_ejection->enforcement_percentage[m
[31m-                << ".";[m
[32m+[m[32m                << config.failure_percentage_ejection->enforcement_percentage;[m
     }[m
     for (auto& candidate : failure_percentage_ejection_candidates) {[m
       if (GRPC_TRACE_FLAG_ENABLED(outlier_detection_lb)) {[m
         LOG(INFO) << "[outlier_detection_lb " << parent_.get()[m
                   << "] checking candidate " << candidate.first[m
[31m-                  << ": success_rate=" << candidate.second << ".";[m
[32m+[m[32m                  << ": success_rate=" << candidate.second;[m
       }[m
       // Extra check to make sure success rate algorithm didn't already[m
       // eject this backend.[m
[36m@@ -1006,7 +1005,7 @@[m [mvoid OutlierDetectionLb::EjectionTimer::OnTimerLocked() {[m
           LOG(INFO) << "[outlier_detection_lb " << parent_.get()[m
                     << "] random_key=" << random_key[m
                     << " ejected_host_count=" << ejected_host_count[m
[31m-                    << " current_percent=" << current_percent << ".";[m
[32m+[m[32m                    << " current_percent=" << current_percent;[m
         }[m
         if (random_key <[m
                 config.failure_percentage_ejection->enforcement_percentage &&[m
[36m@@ -1016,7 +1015,7 @@[m [mvoid OutlierDetectionLb::EjectionTimer::OnTimerLocked() {[m
           // this iteration.[m
           if (GRPC_TRACE_FLAG_ENABLED(outlier_detection_lb)) {[m
             LOG(INFO) << "[outlier_detection_lb " << parent_.get()[m
[31m-                      << "] ejecting candidate.";[m
[32m+[m[32m                      << "] ejecting candidate";[m
           }[m
           candidate.first->Eject(time_now);[m
           ++ejected_host_count;[m
[36m@@ -1037,7 +1036,7 @@[m [mvoid OutlierDetectionLb::EjectionTimer::OnTimerLocked() {[m
     if (unejected && GRPC_TRACE_FLAG_ENABLED(outlier_detection_lb)) {[m
       LOG(INFO) << "[outlier_detection_lb " << parent_.get()[m
                 << "] unejected endpoint " << state.first.ToString() << " ("[m
[31m-                << endpoint_state << ").";[m
[32m+[m[32m                << endpoint_state << ")";[m
     }[m
   }[m
   parent_->ejection_timer_ =[m
