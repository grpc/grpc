// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: reflection.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include <grpc++/impl/reflection.pb.h>

#include <algorithm>

#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace grpc {
namespace reflection {
namespace v1alpha {

namespace {

const ::google::protobuf::Descriptor* EmptyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    EmptyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileNameRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    FileNameRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SymbolRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SymbolRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExtensionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    ExtensionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TypeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    TypeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListServiceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    ListServiceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileDescriptorProtoResponse_descriptor_ =
    NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    FileDescriptorProtoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExtensionNumberResponse_descriptor_ =
    NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    ExtensionNumberResponse_reflection_ = NULL;

}  // namespace

void protobuf_AssignDesc_reflection_2eproto() {
  protobuf_AddDesc_reflection_2eproto();
  const ::google::protobuf::FileDescriptor* file =
      ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
          "reflection.proto");
  GOOGLE_CHECK(file != NULL);
  EmptyRequest_descriptor_ = file->message_type(0);
  static const int EmptyRequest_offsets_[1] = {};
  EmptyRequest_reflection_ = ::google::protobuf::internal::
      GeneratedMessageReflection::NewGeneratedMessageReflection(
          EmptyRequest_descriptor_, EmptyRequest::default_instance_,
          EmptyRequest_offsets_, -1, -1, -1, sizeof(EmptyRequest),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyRequest,
                                                         _internal_metadata_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              EmptyRequest, _is_default_instance_));
  FileNameRequest_descriptor_ = file->message_type(1);
  static const int FileNameRequest_offsets_[1] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileNameRequest,
                                                     filename_),
  };
  FileNameRequest_reflection_ = ::google::protobuf::internal::
      GeneratedMessageReflection::NewGeneratedMessageReflection(
          FileNameRequest_descriptor_, FileNameRequest::default_instance_,
          FileNameRequest_offsets_, -1, -1, -1, sizeof(FileNameRequest),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileNameRequest,
                                                         _internal_metadata_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              FileNameRequest, _is_default_instance_));
  SymbolRequest_descriptor_ = file->message_type(2);
  static const int SymbolRequest_offsets_[1] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolRequest, symbol_),
  };
  SymbolRequest_reflection_ = ::google::protobuf::internal::
      GeneratedMessageReflection::NewGeneratedMessageReflection(
          SymbolRequest_descriptor_, SymbolRequest::default_instance_,
          SymbolRequest_offsets_, -1, -1, -1, sizeof(SymbolRequest),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolRequest,
                                                         _internal_metadata_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              SymbolRequest, _is_default_instance_));
  ExtensionRequest_descriptor_ = file->message_type(3);
  static const int ExtensionRequest_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtensionRequest,
                                                     containing_type_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtensionRequest,
                                                     extension_number_),
  };
  ExtensionRequest_reflection_ = ::google::protobuf::internal::
      GeneratedMessageReflection::NewGeneratedMessageReflection(
          ExtensionRequest_descriptor_, ExtensionRequest::default_instance_,
          ExtensionRequest_offsets_, -1, -1, -1, sizeof(ExtensionRequest),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtensionRequest,
                                                         _internal_metadata_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              ExtensionRequest, _is_default_instance_));
  TypeRequest_descriptor_ = file->message_type(4);
  static const int TypeRequest_offsets_[1] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeRequest, type_),
  };
  TypeRequest_reflection_ = ::google::protobuf::internal::
      GeneratedMessageReflection::NewGeneratedMessageReflection(
          TypeRequest_descriptor_, TypeRequest::default_instance_,
          TypeRequest_offsets_, -1, -1, -1, sizeof(TypeRequest),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeRequest,
                                                         _internal_metadata_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              TypeRequest, _is_default_instance_));
  ListServiceResponse_descriptor_ = file->message_type(5);
  static const int ListServiceResponse_offsets_[1] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListServiceResponse,
                                                     services_),
  };
  ListServiceResponse_reflection_ = ::google::protobuf::internal::
      GeneratedMessageReflection::NewGeneratedMessageReflection(
          ListServiceResponse_descriptor_,
          ListServiceResponse::default_instance_, ListServiceResponse_offsets_,
          -1, -1, -1, sizeof(ListServiceResponse),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListServiceResponse,
                                                         _internal_metadata_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              ListServiceResponse, _is_default_instance_));
  FileDescriptorProtoResponse_descriptor_ = file->message_type(6);
  static const int FileDescriptorProtoResponse_offsets_[1] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
          FileDescriptorProtoResponse, file_descriptor_proto_),
  };
  FileDescriptorProtoResponse_reflection_ = ::google::protobuf::internal::
      GeneratedMessageReflection::NewGeneratedMessageReflection(
          FileDescriptorProtoResponse_descriptor_,
          FileDescriptorProtoResponse::default_instance_,
          FileDescriptorProtoResponse_offsets_, -1, -1, -1,
          sizeof(FileDescriptorProtoResponse),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              FileDescriptorProtoResponse, _internal_metadata_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              FileDescriptorProtoResponse, _is_default_instance_));
  ExtensionNumberResponse_descriptor_ = file->message_type(7);
  static const int ExtensionNumberResponse_offsets_[1] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtensionNumberResponse,
                                                     extension_number_),
  };
  ExtensionNumberResponse_reflection_ = ::google::protobuf::internal::
      GeneratedMessageReflection::NewGeneratedMessageReflection(
          ExtensionNumberResponse_descriptor_,
          ExtensionNumberResponse::default_instance_,
          ExtensionNumberResponse_offsets_, -1, -1, -1,
          sizeof(ExtensionNumberResponse),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              ExtensionNumberResponse, _internal_metadata_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              ExtensionNumberResponse, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                                     &protobuf_AssignDesc_reflection_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EmptyRequest_descriptor_, &EmptyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FileNameRequest_descriptor_, &FileNameRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SymbolRequest_descriptor_, &SymbolRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExtensionRequest_descriptor_, &ExtensionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TypeRequest_descriptor_, &TypeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListServiceResponse_descriptor_,
      &ListServiceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FileDescriptorProtoResponse_descriptor_,
      &FileDescriptorProtoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExtensionNumberResponse_descriptor_,
      &ExtensionNumberResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_reflection_2eproto() {
  delete EmptyRequest::default_instance_;
  delete EmptyRequest_reflection_;
  delete FileNameRequest::default_instance_;
  delete FileNameRequest_reflection_;
  delete SymbolRequest::default_instance_;
  delete SymbolRequest_reflection_;
  delete ExtensionRequest::default_instance_;
  delete ExtensionRequest_reflection_;
  delete TypeRequest::default_instance_;
  delete TypeRequest_reflection_;
  delete ListServiceResponse::default_instance_;
  delete ListServiceResponse_reflection_;
  delete FileDescriptorProtoResponse::default_instance_;
  delete FileDescriptorProtoResponse_reflection_;
  delete ExtensionNumberResponse::default_instance_;
  delete ExtensionNumberResponse_reflection_;
}

void protobuf_AddDesc_reflection_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      "\n\020reflection.proto\022\027grpc.reflection.v1al"
      "pha\"\016\n\014EmptyRequest\"#\n\017FileNameRequest\022\020"
      "\n\010filename\030\001 \001(\t\"\037\n\rSymbolRequest\022\016\n\006sym"
      "bol\030\001 \001(\t\"E\n\020ExtensionRequest\022\027\n\017contain"
      "ing_type\030\001 \001(\t\022\030\n\020extension_number\030\002 \001(\005"
      "\"\033\n\013TypeRequest\022\014\n\004type\030\001 "
      "\001(\t\"\'\n\023ListSer"
      "viceResponse\022\020\n\010services\030\001 \003(\t\"<\n\033FileDe"
      "scriptorProtoResponse\022\035\n\025file_descriptor"
      "_proto\030\001 \001(\014\"3\n\027ExtensionNumberResponse\022"
      "\030\n\020extension_number\030\001 \003(\0052\333\004\n\020ServerRefl"
      "ection\022d\n\013ListService\022%.grpc.reflection."
      "v1alpha.EmptyRequest\032,.grpc.reflection.v"
      "1alpha.ListServiceResponse\"\000\022q\n\rGetFileB"
      "yName\022(.grpc.reflection.v1alpha.FileName"
      "Request\0324.grpc.reflection.v1alpha.FileDe"
      "scriptorProtoResponse\"\000\022y\n\027GetFileContai"
      "ningSymbol\022&.grpc.reflection.v1alpha.Sym"
      "bolRequest\0324.grpc.reflection.v1alpha.Fil"
      "eDescriptorProtoResponse\"\000\022\177\n\032GetFileCon"
      "tainingExtension\022).grpc.reflection.v1alp"
      "ha.ExtensionRequest\0324.grpc.reflection.v1"
      "alpha.FileDescriptorProtoResponse\"\000\022r\n\026G"
      "etAllExtensionNumbers\022$.grpc.reflection."
      "v1alpha.TypeRequest\0320.grpc.reflection.v1"
      "alpha.ExtensionNumberResponse\"\000b\006proto3",
      999);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
      "reflection.proto", &protobuf_RegisterTypes);
  EmptyRequest::default_instance_ = new EmptyRequest();
  FileNameRequest::default_instance_ = new FileNameRequest();
  SymbolRequest::default_instance_ = new SymbolRequest();
  ExtensionRequest::default_instance_ = new ExtensionRequest();
  TypeRequest::default_instance_ = new TypeRequest();
  ListServiceResponse::default_instance_ = new ListServiceResponse();
  FileDescriptorProtoResponse::default_instance_ =
      new FileDescriptorProtoResponse();
  ExtensionNumberResponse::default_instance_ = new ExtensionNumberResponse();
  EmptyRequest::default_instance_->InitAsDefaultInstance();
  FileNameRequest::default_instance_->InitAsDefaultInstance();
  SymbolRequest::default_instance_->InitAsDefaultInstance();
  ExtensionRequest::default_instance_->InitAsDefaultInstance();
  TypeRequest::default_instance_->InitAsDefaultInstance();
  ListServiceResponse::default_instance_->InitAsDefaultInstance();
  FileDescriptorProtoResponse::default_instance_->InitAsDefaultInstance();
  ExtensionNumberResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(
      &protobuf_ShutdownFile_reflection_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_reflection_2eproto {
  StaticDescriptorInitializer_reflection_2eproto() {
    protobuf_AddDesc_reflection_2eproto();
  }
} static_descriptor_initializer_reflection_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmptyRequest::EmptyRequest()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.reflection.v1alpha.EmptyRequest)
}

void EmptyRequest::InitAsDefaultInstance() { _is_default_instance_ = true; }

EmptyRequest::EmptyRequest(const EmptyRequest& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:grpc.reflection.v1alpha.EmptyRequest)
}

void EmptyRequest::SharedCtor() {
  _is_default_instance_ = false;
  _cached_size_ = 0;
}

EmptyRequest::~EmptyRequest() {
  // @@protoc_insertion_point(destructor:grpc.reflection.v1alpha.EmptyRequest)
  SharedDtor();
}

void EmptyRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EmptyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmptyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmptyRequest_descriptor_;
}

const EmptyRequest& EmptyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_reflection_2eproto();
  return *default_instance_;
}

EmptyRequest* EmptyRequest::default_instance_ = NULL;

EmptyRequest* EmptyRequest::New(::google::protobuf::Arena* arena) const {
  EmptyRequest* n = new EmptyRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmptyRequest::Clear() {}

bool EmptyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.reflection.v1alpha.EmptyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.reflection.v1alpha.EmptyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.reflection.v1alpha.EmptyRequest)
  return false;
#undef DO_
}

void EmptyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.reflection.v1alpha.EmptyRequest)
  // @@protoc_insertion_point(serialize_end:grpc.reflection.v1alpha.EmptyRequest)
}

::google::protobuf::uint8* EmptyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.reflection.v1alpha.EmptyRequest)
  // @@protoc_insertion_point(serialize_to_array_end:grpc.reflection.v1alpha.EmptyRequest)
  return target;
}

int EmptyRequest::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmptyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EmptyRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmptyRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmptyRequest::MergeFrom(const EmptyRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void EmptyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmptyRequest::CopyFrom(const EmptyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyRequest::IsInitialized() const { return true; }

void EmptyRequest::Swap(EmptyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmptyRequest::InternalSwap(EmptyRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmptyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmptyRequest_descriptor_;
  metadata.reflection = EmptyRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmptyRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileNameRequest::kFilenameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileNameRequest::FileNameRequest()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.reflection.v1alpha.FileNameRequest)
}

void FileNameRequest::InitAsDefaultInstance() { _is_default_instance_ = true; }

FileNameRequest::FileNameRequest(const FileNameRequest& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:grpc.reflection.v1alpha.FileNameRequest)
}

void FileNameRequest::SharedCtor() {
  _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filename_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FileNameRequest::~FileNameRequest() {
  // @@protoc_insertion_point(destructor:grpc.reflection.v1alpha.FileNameRequest)
  SharedDtor();
}

void FileNameRequest::SharedDtor() {
  filename_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FileNameRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileNameRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileNameRequest_descriptor_;
}

const FileNameRequest& FileNameRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_reflection_2eproto();
  return *default_instance_;
}

FileNameRequest* FileNameRequest::default_instance_ = NULL;

FileNameRequest* FileNameRequest::New(::google::protobuf::Arena* arena) const {
  FileNameRequest* n = new FileNameRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileNameRequest::Clear() {
  filename_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool FileNameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.reflection.v1alpha.FileNameRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string filename = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->filename().data(), this->filename().length(),
              ::google::protobuf::internal::WireFormatLite::PARSE,
              "grpc.reflection.v1alpha.FileNameRequest.filename"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input,
                                                                    tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.reflection.v1alpha.FileNameRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.reflection.v1alpha.FileNameRequest)
  return false;
#undef DO_
}

void FileNameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.reflection.v1alpha.FileNameRequest)
  // optional string filename = 1;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->filename().data(), this->filename().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "grpc.reflection.v1alpha.FileNameRequest.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        1, this->filename(), output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.reflection.v1alpha.FileNameRequest)
}

::google::protobuf::uint8* FileNameRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.reflection.v1alpha.FileNameRequest)
  // optional string filename = 1;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->filename().data(), this->filename().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "grpc.reflection.v1alpha.FileNameRequest.filename");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.reflection.v1alpha.FileNameRequest)
  return target;
}

int FileNameRequest::ByteSize() const {
  int total_size = 0;

  // optional string filename = 1;
  if (this->filename().size() > 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                          this->filename());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileNameRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FileNameRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<
          const FileNameRequest>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileNameRequest::MergeFrom(const FileNameRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.filename().size() > 0) {
    filename_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.filename_);
  }
}

void FileNameRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileNameRequest::CopyFrom(const FileNameRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileNameRequest::IsInitialized() const { return true; }

void FileNameRequest::Swap(FileNameRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileNameRequest::InternalSwap(FileNameRequest* other) {
  filename_.Swap(&other->filename_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FileNameRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileNameRequest_descriptor_;
  metadata.reflection = FileNameRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FileNameRequest

// optional string filename = 1;
void FileNameRequest::clear_filename() {
  filename_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FileNameRequest::filename() const {
  // @@protoc_insertion_point(field_get:grpc.reflection.v1alpha.FileNameRequest.filename)
  return filename_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FileNameRequest::set_filename(const ::std::string& value) {
  filename_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.reflection.v1alpha.FileNameRequest.filename)
}
void FileNameRequest::set_filename(const char* value) {
  filename_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.reflection.v1alpha.FileNameRequest.filename)
}
void FileNameRequest::set_filename(const char* value, size_t size) {
  filename_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.reflection.v1alpha.FileNameRequest.filename)
}
::std::string* FileNameRequest::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:grpc.reflection.v1alpha.FileNameRequest.filename)
  return filename_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FileNameRequest::release_filename() {
  return filename_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FileNameRequest::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
  } else {
  }
  filename_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:grpc.reflection.v1alpha.FileNameRequest.filename)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SymbolRequest::kSymbolFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SymbolRequest::SymbolRequest()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.reflection.v1alpha.SymbolRequest)
}

void SymbolRequest::InitAsDefaultInstance() { _is_default_instance_ = true; }

SymbolRequest::SymbolRequest(const SymbolRequest& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:grpc.reflection.v1alpha.SymbolRequest)
}

void SymbolRequest::SharedCtor() {
  _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  symbol_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SymbolRequest::~SymbolRequest() {
  // @@protoc_insertion_point(destructor:grpc.reflection.v1alpha.SymbolRequest)
  SharedDtor();
}

void SymbolRequest::SharedDtor() {
  symbol_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SymbolRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SymbolRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SymbolRequest_descriptor_;
}

const SymbolRequest& SymbolRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_reflection_2eproto();
  return *default_instance_;
}

SymbolRequest* SymbolRequest::default_instance_ = NULL;

SymbolRequest* SymbolRequest::New(::google::protobuf::Arena* arena) const {
  SymbolRequest* n = new SymbolRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SymbolRequest::Clear() {
  symbol_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SymbolRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.reflection.v1alpha.SymbolRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string symbol = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->symbol().data(), this->symbol().length(),
              ::google::protobuf::internal::WireFormatLite::PARSE,
              "grpc.reflection.v1alpha.SymbolRequest.symbol"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input,
                                                                    tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.reflection.v1alpha.SymbolRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.reflection.v1alpha.SymbolRequest)
  return false;
#undef DO_
}

void SymbolRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.reflection.v1alpha.SymbolRequest)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->symbol().data(), this->symbol().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "grpc.reflection.v1alpha.SymbolRequest.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        1, this->symbol(), output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.reflection.v1alpha.SymbolRequest)
}

::google::protobuf::uint8* SymbolRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.reflection.v1alpha.SymbolRequest)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->symbol().data(), this->symbol().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "grpc.reflection.v1alpha.SymbolRequest.symbol");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.reflection.v1alpha.SymbolRequest)
  return target;
}

int SymbolRequest::ByteSize() const {
  int total_size = 0;

  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                          this->symbol());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SymbolRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SymbolRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SymbolRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SymbolRequest::MergeFrom(const SymbolRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.symbol().size() > 0) {
    symbol_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.symbol_);
  }
}

void SymbolRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymbolRequest::CopyFrom(const SymbolRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolRequest::IsInitialized() const { return true; }

void SymbolRequest::Swap(SymbolRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SymbolRequest::InternalSwap(SymbolRequest* other) {
  symbol_.Swap(&other->symbol_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SymbolRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SymbolRequest_descriptor_;
  metadata.reflection = SymbolRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SymbolRequest

// optional string symbol = 1;
void SymbolRequest::clear_symbol() {
  symbol_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SymbolRequest::symbol() const {
  // @@protoc_insertion_point(field_get:grpc.reflection.v1alpha.SymbolRequest.symbol)
  return symbol_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SymbolRequest::set_symbol(const ::std::string& value) {
  symbol_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.reflection.v1alpha.SymbolRequest.symbol)
}
void SymbolRequest::set_symbol(const char* value) {
  symbol_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.reflection.v1alpha.SymbolRequest.symbol)
}
void SymbolRequest::set_symbol(const char* value, size_t size) {
  symbol_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.reflection.v1alpha.SymbolRequest.symbol)
}
::std::string* SymbolRequest::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:grpc.reflection.v1alpha.SymbolRequest.symbol)
  return symbol_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SymbolRequest::release_symbol() {
  return symbol_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SymbolRequest::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
  } else {
  }
  symbol_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:grpc.reflection.v1alpha.SymbolRequest.symbol)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExtensionRequest::kContainingTypeFieldNumber;
const int ExtensionRequest::kExtensionNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExtensionRequest::ExtensionRequest()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.reflection.v1alpha.ExtensionRequest)
}

void ExtensionRequest::InitAsDefaultInstance() { _is_default_instance_ = true; }

ExtensionRequest::ExtensionRequest(const ExtensionRequest& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:grpc.reflection.v1alpha.ExtensionRequest)
}

void ExtensionRequest::SharedCtor() {
  _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  containing_type_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extension_number_ = 0;
}

ExtensionRequest::~ExtensionRequest() {
  // @@protoc_insertion_point(destructor:grpc.reflection.v1alpha.ExtensionRequest)
  SharedDtor();
}

void ExtensionRequest::SharedDtor() {
  containing_type_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ExtensionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExtensionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExtensionRequest_descriptor_;
}

const ExtensionRequest& ExtensionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_reflection_2eproto();
  return *default_instance_;
}

ExtensionRequest* ExtensionRequest::default_instance_ = NULL;

ExtensionRequest* ExtensionRequest::New(
    ::google::protobuf::Arena* arena) const {
  ExtensionRequest* n = new ExtensionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExtensionRequest::Clear() {
  containing_type_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extension_number_ = 0;
}

bool ExtensionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.reflection.v1alpha.ExtensionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string containing_type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_containing_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->containing_type().data(), this->containing_type().length(),
              ::google::protobuf::internal::WireFormatLite::PARSE,
              "grpc.reflection.v1alpha.ExtensionRequest.containing_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_extension_number;
        break;
      }

      // optional int32 extension_number = 2;
      case 2: {
        if (tag == 16) {
        parse_extension_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               ::google::protobuf::int32,
               ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &extension_number_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input,
                                                                    tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.reflection.v1alpha.ExtensionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.reflection.v1alpha.ExtensionRequest)
  return false;
#undef DO_
}

void ExtensionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.reflection.v1alpha.ExtensionRequest)
  // optional string containing_type = 1;
  if (this->containing_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->containing_type().data(), this->containing_type().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "grpc.reflection.v1alpha.ExtensionRequest.containing_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        1, this->containing_type(), output);
  }

  // optional int32 extension_number = 2;
  if (this->extension_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        2, this->extension_number(), output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.reflection.v1alpha.ExtensionRequest)
}

::google::protobuf::uint8* ExtensionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.reflection.v1alpha.ExtensionRequest)
  // optional string containing_type = 1;
  if (this->containing_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->containing_type().data(), this->containing_type().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "grpc.reflection.v1alpha.ExtensionRequest.containing_type");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->containing_type(), target);
  }

  // optional int32 extension_number = 2;
  if (this->extension_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        2, this->extension_number(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.reflection.v1alpha.ExtensionRequest)
  return target;
}

int ExtensionRequest::ByteSize() const {
  int total_size = 0;

  // optional string containing_type = 1;
  if (this->containing_type().size() > 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                          this->containing_type());
  }

  // optional int32 extension_number = 2;
  if (this->extension_number() != 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                          this->extension_number());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtensionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ExtensionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<
          const ExtensionRequest>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExtensionRequest::MergeFrom(const ExtensionRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.containing_type().size() > 0) {
    containing_type_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.containing_type_);
  }
  if (from.extension_number() != 0) {
    set_extension_number(from.extension_number());
  }
}

void ExtensionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtensionRequest::CopyFrom(const ExtensionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtensionRequest::IsInitialized() const { return true; }

void ExtensionRequest::Swap(ExtensionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExtensionRequest::InternalSwap(ExtensionRequest* other) {
  containing_type_.Swap(&other->containing_type_);
  std::swap(extension_number_, other->extension_number_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExtensionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExtensionRequest_descriptor_;
  metadata.reflection = ExtensionRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExtensionRequest

// optional string containing_type = 1;
void ExtensionRequest::clear_containing_type() {
  containing_type_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ExtensionRequest::containing_type() const {
  // @@protoc_insertion_point(field_get:grpc.reflection.v1alpha.ExtensionRequest.containing_type)
  return containing_type_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExtensionRequest::set_containing_type(const ::std::string& value) {
  containing_type_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.reflection.v1alpha.ExtensionRequest.containing_type)
}
void ExtensionRequest::set_containing_type(const char* value) {
  containing_type_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.reflection.v1alpha.ExtensionRequest.containing_type)
}
void ExtensionRequest::set_containing_type(const char* value, size_t size) {
  containing_type_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.reflection.v1alpha.ExtensionRequest.containing_type)
}
::std::string* ExtensionRequest::mutable_containing_type() {
  // @@protoc_insertion_point(field_mutable:grpc.reflection.v1alpha.ExtensionRequest.containing_type)
  return containing_type_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExtensionRequest::release_containing_type() {
  return containing_type_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExtensionRequest::set_allocated_containing_type(
    ::std::string* containing_type) {
  if (containing_type != NULL) {
  } else {
  }
  containing_type_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      containing_type);
  // @@protoc_insertion_point(field_set_allocated:grpc.reflection.v1alpha.ExtensionRequest.containing_type)
}

// optional int32 extension_number = 2;
void ExtensionRequest::clear_extension_number() { extension_number_ = 0; }
::google::protobuf::int32 ExtensionRequest::extension_number() const {
  // @@protoc_insertion_point(field_get:grpc.reflection.v1alpha.ExtensionRequest.extension_number)
  return extension_number_;
}
void ExtensionRequest::set_extension_number(::google::protobuf::int32 value) {
  extension_number_ = value;
  // @@protoc_insertion_point(field_set:grpc.reflection.v1alpha.ExtensionRequest.extension_number)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TypeRequest::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TypeRequest::TypeRequest()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.reflection.v1alpha.TypeRequest)
}

void TypeRequest::InitAsDefaultInstance() { _is_default_instance_ = true; }

TypeRequest::TypeRequest(const TypeRequest& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:grpc.reflection.v1alpha.TypeRequest)
}

void TypeRequest::SharedCtor() {
  _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TypeRequest::~TypeRequest() {
  // @@protoc_insertion_point(destructor:grpc.reflection.v1alpha.TypeRequest)
  SharedDtor();
}

void TypeRequest::SharedDtor() {
  type_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TypeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TypeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TypeRequest_descriptor_;
}

const TypeRequest& TypeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_reflection_2eproto();
  return *default_instance_;
}

TypeRequest* TypeRequest::default_instance_ = NULL;

TypeRequest* TypeRequest::New(::google::protobuf::Arena* arena) const {
  TypeRequest* n = new TypeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TypeRequest::Clear() {
  type_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TypeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.reflection.v1alpha.TypeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->type().data(), this->type().length(),
              ::google::protobuf::internal::WireFormatLite::PARSE,
              "grpc.reflection.v1alpha.TypeRequest.type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input,
                                                                    tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.reflection.v1alpha.TypeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.reflection.v1alpha.TypeRequest)
  return false;
#undef DO_
}

void TypeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.reflection.v1alpha.TypeRequest)
  // optional string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->type().data(), this->type().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "grpc.reflection.v1alpha.TypeRequest.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        1, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.reflection.v1alpha.TypeRequest)
}

::google::protobuf::uint8* TypeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.reflection.v1alpha.TypeRequest)
  // optional string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->type().data(), this->type().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "grpc.reflection.v1alpha.TypeRequest.type");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.reflection.v1alpha.TypeRequest)
  return target;
}

int TypeRequest::ByteSize() const {
  int total_size = 0;

  // optional string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                          this->type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TypeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TypeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TypeRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TypeRequest::MergeFrom(const TypeRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.type().size() > 0) {
    type_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.type_);
  }
}

void TypeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TypeRequest::CopyFrom(const TypeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypeRequest::IsInitialized() const { return true; }

void TypeRequest::Swap(TypeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TypeRequest::InternalSwap(TypeRequest* other) {
  type_.Swap(&other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TypeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TypeRequest_descriptor_;
  metadata.reflection = TypeRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TypeRequest

// optional string type = 1;
void TypeRequest::clear_type() {
  type_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TypeRequest::type() const {
  // @@protoc_insertion_point(field_get:grpc.reflection.v1alpha.TypeRequest.type)
  return type_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TypeRequest::set_type(const ::std::string& value) {
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                   value);
  // @@protoc_insertion_point(field_set:grpc.reflection.v1alpha.TypeRequest.type)
}
void TypeRequest::set_type(const char* value) {
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                   ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.reflection.v1alpha.TypeRequest.type)
}
void TypeRequest::set_type(const char* value, size_t size) {
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                   ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.reflection.v1alpha.TypeRequest.type)
}
::std::string* TypeRequest::mutable_type() {
  // @@protoc_insertion_point(field_mutable:grpc.reflection.v1alpha.TypeRequest.type)
  return type_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TypeRequest::release_type() {
  return type_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TypeRequest::set_allocated_type(::std::string* type) {
  if (type != NULL) {
  } else {
  }
  type_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:grpc.reflection.v1alpha.TypeRequest.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListServiceResponse::kServicesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListServiceResponse::ListServiceResponse()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.reflection.v1alpha.ListServiceResponse)
}

void ListServiceResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ListServiceResponse::ListServiceResponse(const ListServiceResponse& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:grpc.reflection.v1alpha.ListServiceResponse)
}

void ListServiceResponse::SharedCtor() {
  _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
}

ListServiceResponse::~ListServiceResponse() {
  // @@protoc_insertion_point(destructor:grpc.reflection.v1alpha.ListServiceResponse)
  SharedDtor();
}

void ListServiceResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListServiceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListServiceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListServiceResponse_descriptor_;
}

const ListServiceResponse& ListServiceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_reflection_2eproto();
  return *default_instance_;
}

ListServiceResponse* ListServiceResponse::default_instance_ = NULL;

ListServiceResponse* ListServiceResponse::New(
    ::google::protobuf::Arena* arena) const {
  ListServiceResponse* n = new ListServiceResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListServiceResponse::Clear() { services_.Clear(); }

bool ListServiceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.reflection.v1alpha.ListServiceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string services = 1;
      case 1: {
        if (tag == 10) {
        parse_services:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->add_services()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->services(this->services_size() - 1).data(),
              this->services(this->services_size() - 1).length(),
              ::google::protobuf::internal::WireFormatLite::PARSE,
              "grpc.reflection.v1alpha.ListServiceResponse.services"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_services;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input,
                                                                    tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.reflection.v1alpha.ListServiceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.reflection.v1alpha.ListServiceResponse)
  return false;
#undef DO_
}

void ListServiceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.reflection.v1alpha.ListServiceResponse)
  // repeated string services = 1;
  for (int i = 0; i < this->services_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->services(i).data(), this->services(i).length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "grpc.reflection.v1alpha.ListServiceResponse.services");
    ::google::protobuf::internal::WireFormatLite::WriteString(
        1, this->services(i), output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.reflection.v1alpha.ListServiceResponse)
}

::google::protobuf::uint8* ListServiceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.reflection.v1alpha.ListServiceResponse)
  // repeated string services = 1;
  for (int i = 0; i < this->services_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->services(i).data(), this->services(i).length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "grpc.reflection.v1alpha.ListServiceResponse.services");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->services(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.reflection.v1alpha.ListServiceResponse)
  return target;
}

int ListServiceResponse::ByteSize() const {
  int total_size = 0;

  // repeated string services = 1;
  total_size += 1 * this->services_size();
  for (int i = 0; i < this->services_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        this->services(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListServiceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListServiceResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<
          const ListServiceResponse>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListServiceResponse::MergeFrom(const ListServiceResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  services_.MergeFrom(from.services_);
}

void ListServiceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListServiceResponse::CopyFrom(const ListServiceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListServiceResponse::IsInitialized() const { return true; }

void ListServiceResponse::Swap(ListServiceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListServiceResponse::InternalSwap(ListServiceResponse* other) {
  services_.UnsafeArenaSwap(&other->services_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListServiceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListServiceResponse_descriptor_;
  metadata.reflection = ListServiceResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListServiceResponse

// repeated string services = 1;
int ListServiceResponse::services_size() const { return services_.size(); }
void ListServiceResponse::clear_services() { services_.Clear(); }
const ::std::string& ListServiceResponse::services(int index) const {
  // @@protoc_insertion_point(field_get:grpc.reflection.v1alpha.ListServiceResponse.services)
  return services_.Get(index);
}
::std::string* ListServiceResponse::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.reflection.v1alpha.ListServiceResponse.services)
  return services_.Mutable(index);
}
void ListServiceResponse::set_services(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:grpc.reflection.v1alpha.ListServiceResponse.services)
  services_.Mutable(index)->assign(value);
}
void ListServiceResponse::set_services(int index, const char* value) {
  services_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:grpc.reflection.v1alpha.ListServiceResponse.services)
}
void ListServiceResponse::set_services(int index, const char* value,
                                       size_t size) {
  services_.Mutable(index)->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:grpc.reflection.v1alpha.ListServiceResponse.services)
}
::std::string* ListServiceResponse::add_services() { return services_.Add(); }
void ListServiceResponse::add_services(const ::std::string& value) {
  services_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:grpc.reflection.v1alpha.ListServiceResponse.services)
}
void ListServiceResponse::add_services(const char* value) {
  services_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:grpc.reflection.v1alpha.ListServiceResponse.services)
}
void ListServiceResponse::add_services(const char* value, size_t size) {
  services_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:grpc.reflection.v1alpha.ListServiceResponse.services)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ListServiceResponse::services() const {
  // @@protoc_insertion_point(field_list:grpc.reflection.v1alpha.ListServiceResponse.services)
  return services_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ListServiceResponse::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:grpc.reflection.v1alpha.ListServiceResponse.services)
  return &services_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileDescriptorProtoResponse::kFileDescriptorProtoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileDescriptorProtoResponse::FileDescriptorProtoResponse()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.reflection.v1alpha.FileDescriptorProtoResponse)
}

void FileDescriptorProtoResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FileDescriptorProtoResponse::FileDescriptorProtoResponse(
    const FileDescriptorProtoResponse& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:grpc.reflection.v1alpha.FileDescriptorProtoResponse)
}

void FileDescriptorProtoResponse::SharedCtor() {
  _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  file_descriptor_proto_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FileDescriptorProtoResponse::~FileDescriptorProtoResponse() {
  // @@protoc_insertion_point(destructor:grpc.reflection.v1alpha.FileDescriptorProtoResponse)
  SharedDtor();
}

void FileDescriptorProtoResponse::SharedDtor() {
  file_descriptor_proto_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FileDescriptorProtoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor*
FileDescriptorProtoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileDescriptorProtoResponse_descriptor_;
}

const FileDescriptorProtoResponse&
FileDescriptorProtoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_reflection_2eproto();
  return *default_instance_;
}

FileDescriptorProtoResponse* FileDescriptorProtoResponse::default_instance_ =
    NULL;

FileDescriptorProtoResponse* FileDescriptorProtoResponse::New(
    ::google::protobuf::Arena* arena) const {
  FileDescriptorProtoResponse* n = new FileDescriptorProtoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileDescriptorProtoResponse::Clear() {
  file_descriptor_proto_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool FileDescriptorProtoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.reflection.v1alpha.FileDescriptorProtoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes file_descriptor_proto = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_file_descriptor_proto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input,
                                                                    tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.reflection.v1alpha.FileDescriptorProtoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.reflection.v1alpha.FileDescriptorProtoResponse)
  return false;
#undef DO_
}

void FileDescriptorProtoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.reflection.v1alpha.FileDescriptorProtoResponse)
  // optional bytes file_descriptor_proto = 1;
  if (this->file_descriptor_proto().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
        1, this->file_descriptor_proto(), output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.reflection.v1alpha.FileDescriptorProtoResponse)
}

::google::protobuf::uint8*
FileDescriptorProtoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.reflection.v1alpha.FileDescriptorProtoResponse)
  // optional bytes file_descriptor_proto = 1;
  if (this->file_descriptor_proto().size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->file_descriptor_proto(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.reflection.v1alpha.FileDescriptorProtoResponse)
  return target;
}

int FileDescriptorProtoResponse::ByteSize() const {
  int total_size = 0;

  // optional bytes file_descriptor_proto = 1;
  if (this->file_descriptor_proto().size() > 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                          this->file_descriptor_proto());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileDescriptorProtoResponse::MergeFrom(
    const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FileDescriptorProtoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<
          const FileDescriptorProtoResponse>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileDescriptorProtoResponse::MergeFrom(
    const FileDescriptorProtoResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.file_descriptor_proto().size() > 0) {
    file_descriptor_proto_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.file_descriptor_proto_);
  }
}

void FileDescriptorProtoResponse::CopyFrom(
    const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileDescriptorProtoResponse::CopyFrom(
    const FileDescriptorProtoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileDescriptorProtoResponse::IsInitialized() const { return true; }

void FileDescriptorProtoResponse::Swap(FileDescriptorProtoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileDescriptorProtoResponse::InternalSwap(
    FileDescriptorProtoResponse* other) {
  file_descriptor_proto_.Swap(&other->file_descriptor_proto_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FileDescriptorProtoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileDescriptorProtoResponse_descriptor_;
  metadata.reflection = FileDescriptorProtoResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FileDescriptorProtoResponse

// optional bytes file_descriptor_proto = 1;
void FileDescriptorProtoResponse::clear_file_descriptor_proto() {
  file_descriptor_proto_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FileDescriptorProtoResponse::file_descriptor_proto()
    const {
  // @@protoc_insertion_point(field_get:grpc.reflection.v1alpha.FileDescriptorProtoResponse.file_descriptor_proto)
  return file_descriptor_proto_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FileDescriptorProtoResponse::set_file_descriptor_proto(
    const ::std::string& value) {
  file_descriptor_proto_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.reflection.v1alpha.FileDescriptorProtoResponse.file_descriptor_proto)
}
void FileDescriptorProtoResponse::set_file_descriptor_proto(const char* value) {
  file_descriptor_proto_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.reflection.v1alpha.FileDescriptorProtoResponse.file_descriptor_proto)
}
void FileDescriptorProtoResponse::set_file_descriptor_proto(const void* value,
                                                            size_t size) {
  file_descriptor_proto_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.reflection.v1alpha.FileDescriptorProtoResponse.file_descriptor_proto)
}
::std::string* FileDescriptorProtoResponse::mutable_file_descriptor_proto() {
  // @@protoc_insertion_point(field_mutable:grpc.reflection.v1alpha.FileDescriptorProtoResponse.file_descriptor_proto)
  return file_descriptor_proto_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FileDescriptorProtoResponse::release_file_descriptor_proto() {
  return file_descriptor_proto_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FileDescriptorProtoResponse::set_allocated_file_descriptor_proto(
    ::std::string* file_descriptor_proto) {
  if (file_descriptor_proto != NULL) {
  } else {
  }
  file_descriptor_proto_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      file_descriptor_proto);
  // @@protoc_insertion_point(field_set_allocated:grpc.reflection.v1alpha.FileDescriptorProtoResponse.file_descriptor_proto)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExtensionNumberResponse::kExtensionNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExtensionNumberResponse::ExtensionNumberResponse()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.reflection.v1alpha.ExtensionNumberResponse)
}

void ExtensionNumberResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ExtensionNumberResponse::ExtensionNumberResponse(
    const ExtensionNumberResponse& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:grpc.reflection.v1alpha.ExtensionNumberResponse)
}

void ExtensionNumberResponse::SharedCtor() {
  _is_default_instance_ = false;
  _cached_size_ = 0;
}

ExtensionNumberResponse::~ExtensionNumberResponse() {
  // @@protoc_insertion_point(destructor:grpc.reflection.v1alpha.ExtensionNumberResponse)
  SharedDtor();
}

void ExtensionNumberResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExtensionNumberResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExtensionNumberResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExtensionNumberResponse_descriptor_;
}

const ExtensionNumberResponse& ExtensionNumberResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_reflection_2eproto();
  return *default_instance_;
}

ExtensionNumberResponse* ExtensionNumberResponse::default_instance_ = NULL;

ExtensionNumberResponse* ExtensionNumberResponse::New(
    ::google::protobuf::Arena* arena) const {
  ExtensionNumberResponse* n = new ExtensionNumberResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExtensionNumberResponse::Clear() { extension_number_.Clear(); }

bool ExtensionNumberResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.reflection.v1alpha.ExtensionNumberResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 extension_number = 1;
      case 1: {
        if (tag == 10) {
          DO_((
              ::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                  ::google::protobuf::int32,
                  ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                  input, this->mutable_extension_number())));
        } else if (tag == 8) {
          DO_((
              ::google::protobuf::internal::WireFormatLite::
                  ReadRepeatedPrimitiveNoInline<
                      ::google::protobuf::int32,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                      1, 10, input, this->mutable_extension_number())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input,
                                                                    tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.reflection.v1alpha.ExtensionNumberResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.reflection.v1alpha.ExtensionNumberResponse)
  return false;
#undef DO_
}

void ExtensionNumberResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.reflection.v1alpha.ExtensionNumberResponse)
  // repeated int32 extension_number = 1;
  if (this->extension_number_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
        1,
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
        output);
    output->WriteVarint32(_extension_number_cached_byte_size_);
  }
  for (int i = 0; i < this->extension_number_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
        this->extension_number(i), output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.reflection.v1alpha.ExtensionNumberResponse)
}

::google::protobuf::uint8*
ExtensionNumberResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.reflection.v1alpha.ExtensionNumberResponse)
  // repeated int32 extension_number = 1;
  if (this->extension_number_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
        1,
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
        target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _extension_number_cached_byte_size_, target);
  }
  for (int i = 0; i < this->extension_number_size(); i++) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32NoTagToArray(
            this->extension_number(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.reflection.v1alpha.ExtensionNumberResponse)
  return target;
}

int ExtensionNumberResponse::ByteSize() const {
  int total_size = 0;

  // repeated int32 extension_number = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->extension_number_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extension_number(i));
    }
    if (data_size > 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _extension_number_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtensionNumberResponse::MergeFrom(
    const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ExtensionNumberResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<
          const ExtensionNumberResponse>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExtensionNumberResponse::MergeFrom(const ExtensionNumberResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  extension_number_.MergeFrom(from.extension_number_);
}

void ExtensionNumberResponse::CopyFrom(
    const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtensionNumberResponse::CopyFrom(const ExtensionNumberResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtensionNumberResponse::IsInitialized() const { return true; }

void ExtensionNumberResponse::Swap(ExtensionNumberResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExtensionNumberResponse::InternalSwap(ExtensionNumberResponse* other) {
  extension_number_.UnsafeArenaSwap(&other->extension_number_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExtensionNumberResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExtensionNumberResponse_descriptor_;
  metadata.reflection = ExtensionNumberResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExtensionNumberResponse

// repeated int32 extension_number = 1;
int ExtensionNumberResponse::extension_number_size() const {
  return extension_number_.size();
}
void ExtensionNumberResponse::clear_extension_number() {
  extension_number_.Clear();
}
::google::protobuf::int32 ExtensionNumberResponse::extension_number(
    int index) const {
  // @@protoc_insertion_point(field_get:grpc.reflection.v1alpha.ExtensionNumberResponse.extension_number)
  return extension_number_.Get(index);
}
void ExtensionNumberResponse::set_extension_number(
    int index, ::google::protobuf::int32 value) {
  extension_number_.Set(index, value);
  // @@protoc_insertion_point(field_set:grpc.reflection.v1alpha.ExtensionNumberResponse.extension_number)
}
void ExtensionNumberResponse::add_extension_number(
    ::google::protobuf::int32 value) {
  extension_number_.Add(value);
  // @@protoc_insertion_point(field_add:grpc.reflection.v1alpha.ExtensionNumberResponse.extension_number)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32>&
ExtensionNumberResponse::extension_number() const {
  // @@protoc_insertion_point(field_list:grpc.reflection.v1alpha.ExtensionNumberResponse.extension_number)
  return extension_number_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32>*
ExtensionNumberResponse::mutable_extension_number() {
  // @@protoc_insertion_point(field_mutable_list:grpc.reflection.v1alpha.ExtensionNumberResponse.extension_number)
  return &extension_number_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha
}  // namespace reflection
}  // namespace grpc

// @@protoc_insertion_point(global_scope)
