// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: reflection.proto
#ifndef GRPC_reflection_2eproto__INCLUDED
#define GRPC_reflection_2eproto__INCLUDED

#include <grpc++/impl/reflection.pb.h>

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace grpc {
namespace reflection {
namespace v1alpha {

class ServerReflection GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ListService(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1alpha::EmptyRequest& request,
        ::grpc::reflection::v1alpha::ListServiceResponse* response) = 0;
    std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
        ::grpc::reflection::v1alpha::ListServiceResponse>>
    AsyncListService(::grpc::ClientContext* context,
                     const ::grpc::reflection::v1alpha::EmptyRequest& request,
                     ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
          ::grpc::reflection::v1alpha::ListServiceResponse>>(
          AsyncListServiceRaw(context, request, cq));
    }
    virtual ::grpc::Status GetFileByName(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1alpha::FileNameRequest& request,
        ::grpc::reflection::v1alpha::FileDescriptorProtoResponse* response) = 0;
    std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
        ::grpc::reflection::v1alpha::FileDescriptorProtoResponse>>
    AsyncGetFileByName(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1alpha::FileNameRequest& request,
        ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
          ::grpc::reflection::v1alpha::FileDescriptorProtoResponse>>(
          AsyncGetFileByNameRaw(context, request, cq));
    }
    virtual ::grpc::Status GetFileContainingSymbol(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1alpha::SymbolRequest& request,
        ::grpc::reflection::v1alpha::FileDescriptorProtoResponse* response) = 0;
    std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
        ::grpc::reflection::v1alpha::FileDescriptorProtoResponse>>
    AsyncGetFileContainingSymbol(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1alpha::SymbolRequest& request,
        ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
          ::grpc::reflection::v1alpha::FileDescriptorProtoResponse>>(
          AsyncGetFileContainingSymbolRaw(context, request, cq));
    }
    virtual ::grpc::Status GetFileContainingExtension(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1alpha::ExtensionRequest& request,
        ::grpc::reflection::v1alpha::FileDescriptorProtoResponse* response) = 0;
    std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
        ::grpc::reflection::v1alpha::FileDescriptorProtoResponse>>
    AsyncGetFileContainingExtension(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1alpha::ExtensionRequest& request,
        ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
          ::grpc::reflection::v1alpha::FileDescriptorProtoResponse>>(
          AsyncGetFileContainingExtensionRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAllExtensionNumbers(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1alpha::TypeRequest& request,
        ::grpc::reflection::v1alpha::ExtensionNumberResponse* response) = 0;
    std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
        ::grpc::reflection::v1alpha::ExtensionNumberResponse>>
    AsyncGetAllExtensionNumbers(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1alpha::TypeRequest& request,
        ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
          ::grpc::reflection::v1alpha::ExtensionNumberResponse>>(
          AsyncGetAllExtensionNumbersRaw(context, request, cq));
    }

   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface<
        ::grpc::reflection::v1alpha::ListServiceResponse>*
    AsyncListServiceRaw(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1alpha::EmptyRequest& request,
        ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface<
        ::grpc::reflection::v1alpha::FileDescriptorProtoResponse>*
    AsyncGetFileByNameRaw(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1alpha::FileNameRequest& request,
        ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface<
        ::grpc::reflection::v1alpha::FileDescriptorProtoResponse>*
    AsyncGetFileContainingSymbolRaw(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1alpha::SymbolRequest& request,
        ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface<
        ::grpc::reflection::v1alpha::FileDescriptorProtoResponse>*
    AsyncGetFileContainingExtensionRaw(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1alpha::ExtensionRequest& request,
        ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface<
        ::grpc::reflection::v1alpha::ExtensionNumberResponse>*
    AsyncGetAllExtensionNumbersRaw(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1alpha::TypeRequest& request,
        ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr<::grpc::ChannelInterface>& channel);
    ::grpc::Status ListService(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1alpha::EmptyRequest& request,
        ::grpc::reflection::v1alpha::ListServiceResponse* response)
        GRPC_OVERRIDE;
    std::unique_ptr<::grpc::ClientAsyncResponseReader<
        ::grpc::reflection::v1alpha::ListServiceResponse>>
    AsyncListService(::grpc::ClientContext* context,
                     const ::grpc::reflection::v1alpha::EmptyRequest& request,
                     ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<::grpc::ClientAsyncResponseReader<
          ::grpc::reflection::v1alpha::ListServiceResponse>>(
          AsyncListServiceRaw(context, request, cq));
    }
    ::grpc::Status GetFileByName(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1alpha::FileNameRequest& request,
        ::grpc::reflection::v1alpha::FileDescriptorProtoResponse* response)
        GRPC_OVERRIDE;
    std::unique_ptr<::grpc::ClientAsyncResponseReader<
        ::grpc::reflection::v1alpha::FileDescriptorProtoResponse>>
    AsyncGetFileByName(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1alpha::FileNameRequest& request,
        ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<::grpc::ClientAsyncResponseReader<
          ::grpc::reflection::v1alpha::FileDescriptorProtoResponse>>(
          AsyncGetFileByNameRaw(context, request, cq));
    }
    ::grpc::Status GetFileContainingSymbol(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1alpha::SymbolRequest& request,
        ::grpc::reflection::v1alpha::FileDescriptorProtoResponse* response)
        GRPC_OVERRIDE;
    std::unique_ptr<::grpc::ClientAsyncResponseReader<
        ::grpc::reflection::v1alpha::FileDescriptorProtoResponse>>
    AsyncGetFileContainingSymbol(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1alpha::SymbolRequest& request,
        ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<::grpc::ClientAsyncResponseReader<
          ::grpc::reflection::v1alpha::FileDescriptorProtoResponse>>(
          AsyncGetFileContainingSymbolRaw(context, request, cq));
    }
    ::grpc::Status GetFileContainingExtension(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1alpha::ExtensionRequest& request,
        ::grpc::reflection::v1alpha::FileDescriptorProtoResponse* response)
        GRPC_OVERRIDE;
    std::unique_ptr<::grpc::ClientAsyncResponseReader<
        ::grpc::reflection::v1alpha::FileDescriptorProtoResponse>>
    AsyncGetFileContainingExtension(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1alpha::ExtensionRequest& request,
        ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<::grpc::ClientAsyncResponseReader<
          ::grpc::reflection::v1alpha::FileDescriptorProtoResponse>>(
          AsyncGetFileContainingExtensionRaw(context, request, cq));
    }
    ::grpc::Status GetAllExtensionNumbers(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1alpha::TypeRequest& request,
        ::grpc::reflection::v1alpha::ExtensionNumberResponse* response)
        GRPC_OVERRIDE;
    std::unique_ptr<::grpc::ClientAsyncResponseReader<
        ::grpc::reflection::v1alpha::ExtensionNumberResponse>>
    AsyncGetAllExtensionNumbers(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1alpha::TypeRequest& request,
        ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<::grpc::ClientAsyncResponseReader<
          ::grpc::reflection::v1alpha::ExtensionNumberResponse>>(
          AsyncGetAllExtensionNumbersRaw(context, request, cq));
    }

   private:
    std::shared_ptr<::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader<
        ::grpc::reflection::v1alpha::ListServiceResponse>*
    AsyncListServiceRaw(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1alpha::EmptyRequest& request,
        ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader<
        ::grpc::reflection::v1alpha::FileDescriptorProtoResponse>*
    AsyncGetFileByNameRaw(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1alpha::FileNameRequest& request,
        ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader<
        ::grpc::reflection::v1alpha::FileDescriptorProtoResponse>*
    AsyncGetFileContainingSymbolRaw(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1alpha::SymbolRequest& request,
        ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader<
        ::grpc::reflection::v1alpha::FileDescriptorProtoResponse>*
    AsyncGetFileContainingExtensionRaw(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1alpha::ExtensionRequest& request,
        ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader<
        ::grpc::reflection::v1alpha::ExtensionNumberResponse>*
    AsyncGetAllExtensionNumbersRaw(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1alpha::TypeRequest& request,
        ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_ListService_;
    const ::grpc::RpcMethod rpcmethod_GetFileByName_;
    const ::grpc::RpcMethod rpcmethod_GetFileContainingSymbol_;
    const ::grpc::RpcMethod rpcmethod_GetFileContainingExtension_;
    const ::grpc::RpcMethod rpcmethod_GetAllExtensionNumbers_;
  };
  static std::unique_ptr<Stub> NewStub(
      const std::shared_ptr<::grpc::ChannelInterface>& channel,
      const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ListService(
        ::grpc::ServerContext* context,
        const ::grpc::reflection::v1alpha::EmptyRequest* request,
        ::grpc::reflection::v1alpha::ListServiceResponse* response);
    virtual ::grpc::Status GetFileByName(
        ::grpc::ServerContext* context,
        const ::grpc::reflection::v1alpha::FileNameRequest* request,
        ::grpc::reflection::v1alpha::FileDescriptorProtoResponse* response);
    virtual ::grpc::Status GetFileContainingSymbol(
        ::grpc::ServerContext* context,
        const ::grpc::reflection::v1alpha::SymbolRequest* request,
        ::grpc::reflection::v1alpha::FileDescriptorProtoResponse* response);
    virtual ::grpc::Status GetFileContainingExtension(
        ::grpc::ServerContext* context,
        const ::grpc::reflection::v1alpha::ExtensionRequest* request,
        ::grpc::reflection::v1alpha::FileDescriptorProtoResponse* response);
    virtual ::grpc::Status GetAllExtensionNumbers(
        ::grpc::ServerContext* context,
        const ::grpc::reflection::v1alpha::TypeRequest* request,
        ::grpc::reflection::v1alpha::ExtensionNumberResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(Service* service) {}

   public:
    WithAsyncMethod_ListService() { ::grpc::Service::MarkMethodAsync(0); }
    ~WithAsyncMethod_ListService() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListService(
        ::grpc::ServerContext* context,
        const ::grpc::reflection::v1alpha::EmptyRequest* request,
        ::grpc::reflection::v1alpha::ListServiceResponse* response)
        GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListService(
        ::grpc::ServerContext* context,
        ::grpc::reflection::v1alpha::EmptyRequest* request,
        ::grpc::ServerAsyncResponseWriter<
            ::grpc::reflection::v1alpha::ListServiceResponse>* response,
        ::grpc::CompletionQueue* new_call_cq,
        ::grpc::ServerCompletionQueue* notification_cq, void* tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response,
                                         new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFileByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(Service* service) {}

   public:
    WithAsyncMethod_GetFileByName() { ::grpc::Service::MarkMethodAsync(1); }
    ~WithAsyncMethod_GetFileByName() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileByName(
        ::grpc::ServerContext* context,
        const ::grpc::reflection::v1alpha::FileNameRequest* request,
        ::grpc::reflection::v1alpha::FileDescriptorProtoResponse* response)
        GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFileByName(
        ::grpc::ServerContext* context,
        ::grpc::reflection::v1alpha::FileNameRequest* request,
        ::grpc::ServerAsyncResponseWriter<
            ::grpc::reflection::v1alpha::FileDescriptorProtoResponse>* response,
        ::grpc::CompletionQueue* new_call_cq,
        ::grpc::ServerCompletionQueue* notification_cq, void* tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response,
                                         new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFileContainingSymbol : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(Service* service) {}

   public:
    WithAsyncMethod_GetFileContainingSymbol() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetFileContainingSymbol() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileContainingSymbol(
        ::grpc::ServerContext* context,
        const ::grpc::reflection::v1alpha::SymbolRequest* request,
        ::grpc::reflection::v1alpha::FileDescriptorProtoResponse* response)
        GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFileContainingSymbol(
        ::grpc::ServerContext* context,
        ::grpc::reflection::v1alpha::SymbolRequest* request,
        ::grpc::ServerAsyncResponseWriter<
            ::grpc::reflection::v1alpha::FileDescriptorProtoResponse>* response,
        ::grpc::CompletionQueue* new_call_cq,
        ::grpc::ServerCompletionQueue* notification_cq, void* tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response,
                                         new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFileContainingExtension : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(Service* service) {}

   public:
    WithAsyncMethod_GetFileContainingExtension() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetFileContainingExtension() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileContainingExtension(
        ::grpc::ServerContext* context,
        const ::grpc::reflection::v1alpha::ExtensionRequest* request,
        ::grpc::reflection::v1alpha::FileDescriptorProtoResponse* response)
        GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFileContainingExtension(
        ::grpc::ServerContext* context,
        ::grpc::reflection::v1alpha::ExtensionRequest* request,
        ::grpc::ServerAsyncResponseWriter<
            ::grpc::reflection::v1alpha::FileDescriptorProtoResponse>* response,
        ::grpc::CompletionQueue* new_call_cq,
        ::grpc::ServerCompletionQueue* notification_cq, void* tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response,
                                         new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllExtensionNumbers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(Service* service) {}

   public:
    WithAsyncMethod_GetAllExtensionNumbers() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetAllExtensionNumbers() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllExtensionNumbers(
        ::grpc::ServerContext* context,
        const ::grpc::reflection::v1alpha::TypeRequest* request,
        ::grpc::reflection::v1alpha::ExtensionNumberResponse* response)
        GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllExtensionNumbers(
        ::grpc::ServerContext* context,
        ::grpc::reflection::v1alpha::TypeRequest* request,
        ::grpc::ServerAsyncResponseWriter<
            ::grpc::reflection::v1alpha::ExtensionNumberResponse>* response,
        ::grpc::CompletionQueue* new_call_cq,
        ::grpc::ServerCompletionQueue* notification_cq, void* tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response,
                                         new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListService<
      WithAsyncMethod_GetFileByName<WithAsyncMethod_GetFileContainingSymbol<
          WithAsyncMethod_GetFileContainingExtension<
              WithAsyncMethod_GetAllExtensionNumbers<Service>>>>>
      AsyncService;
  template <class BaseClass>
  class WithGenericMethod_ListService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(Service* service) {}

   public:
    WithGenericMethod_ListService() { ::grpc::Service::MarkMethodGeneric(0); }
    ~WithGenericMethod_ListService() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListService(
        ::grpc::ServerContext* context,
        const ::grpc::reflection::v1alpha::EmptyRequest* request,
        ::grpc::reflection::v1alpha::ListServiceResponse* response)
        GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFileByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(Service* service) {}

   public:
    WithGenericMethod_GetFileByName() { ::grpc::Service::MarkMethodGeneric(1); }
    ~WithGenericMethod_GetFileByName() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileByName(
        ::grpc::ServerContext* context,
        const ::grpc::reflection::v1alpha::FileNameRequest* request,
        ::grpc::reflection::v1alpha::FileDescriptorProtoResponse* response)
        GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFileContainingSymbol : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(Service* service) {}

   public:
    WithGenericMethod_GetFileContainingSymbol() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetFileContainingSymbol() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileContainingSymbol(
        ::grpc::ServerContext* context,
        const ::grpc::reflection::v1alpha::SymbolRequest* request,
        ::grpc::reflection::v1alpha::FileDescriptorProtoResponse* response)
        GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFileContainingExtension : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(Service* service) {}

   public:
    WithGenericMethod_GetFileContainingExtension() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetFileContainingExtension() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileContainingExtension(
        ::grpc::ServerContext* context,
        const ::grpc::reflection::v1alpha::ExtensionRequest* request,
        ::grpc::reflection::v1alpha::FileDescriptorProtoResponse* response)
        GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllExtensionNumbers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(Service* service) {}

   public:
    WithGenericMethod_GetAllExtensionNumbers() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetAllExtensionNumbers() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllExtensionNumbers(
        ::grpc::ServerContext* context,
        const ::grpc::reflection::v1alpha::TypeRequest* request,
        ::grpc::reflection::v1alpha::ExtensionNumberResponse* response)
        GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
};

}  // namespace v1alpha
}  // namespace reflection
}  // namespace grpc

#endif  // GRPC_reflection_2eproto__INCLUDED
