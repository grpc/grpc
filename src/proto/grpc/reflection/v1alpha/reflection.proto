// Copyright 2016, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Service exported by server reflection

syntax = "proto3";

package grpc.reflection.v1alpha;

service ServerReflection {
  // List the full names of registered services.
  rpc ListService(EmptyRequest) returns (ListServiceResponse) {
  }

  // Find a proto file by file name.
  rpc GetFileByName(FileNameRequest) returns (FileDescriptorProtoResponse) {
  }

  // Find the proto file that declares the given fully-qualified symbol name.
  rpc GetFileContainingSymbol(SymbolRequest)
      returns (FileDescriptorProtoResponse) {
  }

  // Find the proto file which defines an extension extending the given message
  // type with the given field number.
  rpc GetFileContainingExtension(ExtensionRequest)
      returns (FileDescriptorProtoResponse) {
  }

  // Finds the tag numbers used by all known extensions of extendee_type, and
  // appends them to ExtensionNumberResponse in an undefined order.
  rpc GetAllExtensionNumbers(TypeRequest) returns (ExtensionNumberResponse) {
  }
}

message EmptyRequest {
}

message FileNameRequest {
  string filename = 1;
}

message SymbolRequest {
  string symbol = 1;
}

message ExtensionRequest {
  string containing_type = 1;
  int32 extension_number = 2;
}

message TypeRequest {
  string type = 1;
}

message ListServiceResponse {
  repeated string services = 1;
}

message FileDescriptorProtoResponse {
  bytes file_descriptor_proto = 1;
}

message ExtensionNumberResponse {
  repeated int32 extension_number = 1;
}
