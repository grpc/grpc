// Copyright 2015, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

package grpc.testing;

message ServerStats {
  // wall clock time change in seconds since last reset
  double time_elapsed = 1;

  // change in user time (in seconds) used by the server since last reset
  double time_user = 2;

  // change in server time (in seconds) used by the server process and all
  // threads since last reset
  double time_system = 3;
}

// Histogram params based on grpc/support/histogram.c
message HistogramParams {
  double resolution = 1;   // first bucket is [0, 1 + resolution)
  double max_possible = 2; // use enough buckets to allow this value
}

// Histogram data based on grpc/support/histogram.c
message HistogramData {
  repeated uint32 bucket = 1;
  double min_seen = 2;
  double max_seen = 3;
  double sum = 4;
  double sum_of_squares = 5;
  double count = 6;
}

message ClientStats {
  // Latency histogram. Data points are in nanoseconds.
  HistogramData latencies = 1;

  // See ServerStats for details.
  double time_elapsed = 2;
  double time_user = 3;
  double time_system = 4;
}
