// Copyright 2016, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// File detached comment 1

// File detached comment 2

// File leading comment 1
syntax = "proto3";

// Ignored detached comment

// Ignored package leading comment
package grpc.testing;

message Request {
}
message Response {
}

// ServiceA detached comment 1

// ServiceA detached comment 2

// ServiceA leading comment 1
service ServiceA {
  // MethodA1 leading comment 1
  rpc MethodA1(Request) returns (Response);  // MethodA1 trailing comment 1

  // MethodA2 detached leading comment 1

  // Method A2 leading comment 1
  // Method A2 leading comment 2
  rpc MethodA2(stream Request) returns (Response);
  // MethodA2 trailing comment 1
}
// Ignored ServiceA trailing comment 1

// ServiceB leading comment 1
service ServiceB {
  // ServiceB trailing comment 1

  // MethodB1 leading comment 1
  rpc MethodB1(Request) returns (Response);
  // MethodB1 trailing comment 1
}
// Ignored ServiceB trailing comment 2

// Ignored file trailing comment
