// Copyright 2015, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// An integration test service that covers all the method signature permutations
// of unary/streaming requests/responses.
syntax = "proto3";

import "src/proto/grpc/testing/messages.proto";
import "src/proto/grpc/testing/control.proto";
import "src/proto/grpc/testing/stats.proto";

package grpc.testing;

service BenchmarkService {
  // One request followed by one response.
  // The server returns the client payload as-is.
  rpc UnaryCall(SimpleRequest) returns (SimpleResponse);

  // One request followed by one response.
  // The server returns the client payload as-is.
  rpc StreamingCall(stream SimpleRequest) returns (stream SimpleResponse);
}

service WorkerService {
  // Start server with specified workload.
  // First request sent specifies the ServerConfig followed by ServerStatus
  // response. After that, a "Mark" can be sent anytime to request the latest
  // stats. Closing the stream will initiate shutdown of the test server
  // and once the shutdown has finished, the OK status is sent to terminate
  // this RPC.
  rpc RunServer(stream ServerArgs) returns (stream ServerStatus);

  // Start client with specified workload.
  // First request sent specifies the ClientConfig followed by ClientStatus
  // response. After that, a "Mark" can be sent anytime to request the latest
  // stats. Closing the stream will initiate shutdown of the test client
  // and once the shutdown has finished, the OK status is sent to terminate
  // this RPC.
  rpc RunClient(stream ClientArgs) returns (stream ClientStatus);

  // Just return the core count - unary call
  rpc CoreCount(CoreRequest) returns (CoreResponse);

  // Quit this worker
  rpc QuitWorker(Void) returns (Void);
}

service ReportQpsScenarioService {
  // Report results of a QPS test benchmark scenario.
  rpc ReportScenario(ScenarioResult) returns (Void);
}
