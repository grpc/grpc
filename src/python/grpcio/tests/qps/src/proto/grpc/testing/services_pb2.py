# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: src/proto/grpc/testing/services.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from src.proto.grpc.testing import messages_pb2 as src_dot_proto_dot_grpc_dot_testing_dot_messages__pb2
from src.proto.grpc.testing import control_pb2 as src_dot_proto_dot_grpc_dot_testing_dot_control__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='src/proto/grpc/testing/services.proto',
  package='grpc.testing',
  syntax='proto3',
  serialized_pb=_b('\n%src/proto/grpc/testing/services.proto\x12\x0cgrpc.testing\x1a%src/proto/grpc/testing/messages.proto\x1a$src/proto/grpc/testing/control.proto2\xaa\x01\n\x10\x42\x65nchmarkService\x12\x46\n\tUnaryCall\x12\x1b.grpc.testing.SimpleRequest\x1a\x1c.grpc.testing.SimpleResponse\x12N\n\rStreamingCall\x12\x1b.grpc.testing.SimpleRequest\x1a\x1c.grpc.testing.SimpleResponse(\x01\x30\x01\x32\x97\x02\n\rWorkerService\x12\x45\n\tRunServer\x12\x18.grpc.testing.ServerArgs\x1a\x1a.grpc.testing.ServerStatus(\x01\x30\x01\x12\x45\n\tRunClient\x12\x18.grpc.testing.ClientArgs\x1a\x1a.grpc.testing.ClientStatus(\x01\x30\x01\x12\x42\n\tCoreCount\x12\x19.grpc.testing.CoreRequest\x1a\x1a.grpc.testing.CoreResponse\x12\x34\n\nQuitWorker\x12\x12.grpc.testing.Void\x1a\x12.grpc.testing.Voidb\x06proto3')
  ,
  dependencies=[src_dot_proto_dot_grpc_dot_testing_dot_messages__pb2.DESCRIPTOR,src_dot_proto_dot_grpc_dot_testing_dot_control__pb2.DESCRIPTOR,])
_sym_db.RegisterFileDescriptor(DESCRIPTOR)





import abc
import six
from grpc.beta import implementations as beta_implementations
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities

class BetaBenchmarkServiceServicer(six.with_metaclass(abc.ABCMeta, object)):
  """<fill me in later!>"""
  @abc.abstractmethod
  def UnaryCall(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def StreamingCall(self, request_iterator, context):
    raise NotImplementedError()

class BetaBenchmarkServiceStub(six.with_metaclass(abc.ABCMeta, object)):
  """The interface to which stubs will conform."""
  @abc.abstractmethod
  def UnaryCall(self, request, timeout):
    raise NotImplementedError()
  UnaryCall.future = None
  @abc.abstractmethod
  def StreamingCall(self, request_iterator, timeout):
    raise NotImplementedError()

def beta_create_BenchmarkService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  import src.proto.grpc.testing.messages_pb2
  import src.proto.grpc.testing.messages_pb2
  import src.proto.grpc.testing.messages_pb2
  import src.proto.grpc.testing.messages_pb2
  request_deserializers = {
    ('grpc.testing.BenchmarkService', 'StreamingCall'): src.proto.grpc.testing.messages_pb2.SimpleRequest.FromString,
    ('grpc.testing.BenchmarkService', 'UnaryCall'): src.proto.grpc.testing.messages_pb2.SimpleRequest.FromString,
  }
  response_serializers = {
    ('grpc.testing.BenchmarkService', 'StreamingCall'): src.proto.grpc.testing.messages_pb2.SimpleResponse.SerializeToString,
    ('grpc.testing.BenchmarkService', 'UnaryCall'): src.proto.grpc.testing.messages_pb2.SimpleResponse.SerializeToString,
  }
  method_implementations = {
    ('grpc.testing.BenchmarkService', 'StreamingCall'): face_utilities.stream_stream_inline(servicer.StreamingCall),
    ('grpc.testing.BenchmarkService', 'UnaryCall'): face_utilities.unary_unary_inline(servicer.UnaryCall),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)

def beta_create_BenchmarkService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  import src.proto.grpc.testing.messages_pb2
  import src.proto.grpc.testing.messages_pb2
  import src.proto.grpc.testing.messages_pb2
  import src.proto.grpc.testing.messages_pb2
  request_serializers = {
    ('grpc.testing.BenchmarkService', 'StreamingCall'): src.proto.grpc.testing.messages_pb2.SimpleRequest.SerializeToString,
    ('grpc.testing.BenchmarkService', 'UnaryCall'): src.proto.grpc.testing.messages_pb2.SimpleRequest.SerializeToString,
  }
  response_deserializers = {
    ('grpc.testing.BenchmarkService', 'StreamingCall'): src.proto.grpc.testing.messages_pb2.SimpleResponse.FromString,
    ('grpc.testing.BenchmarkService', 'UnaryCall'): src.proto.grpc.testing.messages_pb2.SimpleResponse.FromString,
  }
  cardinalities = {
    'StreamingCall': cardinality.Cardinality.STREAM_STREAM,
    'UnaryCall': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'grpc.testing.BenchmarkService', cardinalities, options=stub_options)

class BetaWorkerServiceServicer(six.with_metaclass(abc.ABCMeta, object)):
  """<fill me in later!>"""
  @abc.abstractmethod
  def RunServer(self, request_iterator, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def RunClient(self, request_iterator, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def CoreCount(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def QuitWorker(self, request, context):
    raise NotImplementedError()

class BetaWorkerServiceStub(six.with_metaclass(abc.ABCMeta, object)):
  """The interface to which stubs will conform."""
  @abc.abstractmethod
  def RunServer(self, request_iterator, timeout):
    raise NotImplementedError()
  @abc.abstractmethod
  def RunClient(self, request_iterator, timeout):
    raise NotImplementedError()
  @abc.abstractmethod
  def CoreCount(self, request, timeout):
    raise NotImplementedError()
  CoreCount.future = None
  @abc.abstractmethod
  def QuitWorker(self, request, timeout):
    raise NotImplementedError()
  QuitWorker.future = None

def beta_create_WorkerService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  import src.proto.grpc.testing.control_pb2
  import src.proto.grpc.testing.control_pb2
  import src.proto.grpc.testing.control_pb2
  import src.proto.grpc.testing.control_pb2
  import src.proto.grpc.testing.control_pb2
  import src.proto.grpc.testing.control_pb2
  import src.proto.grpc.testing.control_pb2
  import src.proto.grpc.testing.control_pb2
  request_deserializers = {
    ('grpc.testing.WorkerService', 'CoreCount'): src.proto.grpc.testing.control_pb2.CoreRequest.FromString,
    ('grpc.testing.WorkerService', 'QuitWorker'): src.proto.grpc.testing.control_pb2.Void.FromString,
    ('grpc.testing.WorkerService', 'RunClient'): src.proto.grpc.testing.control_pb2.ClientArgs.FromString,
    ('grpc.testing.WorkerService', 'RunServer'): src.proto.grpc.testing.control_pb2.ServerArgs.FromString,
  }
  response_serializers = {
    ('grpc.testing.WorkerService', 'CoreCount'): src.proto.grpc.testing.control_pb2.CoreResponse.SerializeToString,
    ('grpc.testing.WorkerService', 'QuitWorker'): src.proto.grpc.testing.control_pb2.Void.SerializeToString,
    ('grpc.testing.WorkerService', 'RunClient'): src.proto.grpc.testing.control_pb2.ClientStatus.SerializeToString,
    ('grpc.testing.WorkerService', 'RunServer'): src.proto.grpc.testing.control_pb2.ServerStatus.SerializeToString,
  }
  method_implementations = {
    ('grpc.testing.WorkerService', 'CoreCount'): face_utilities.unary_unary_inline(servicer.CoreCount),
    ('grpc.testing.WorkerService', 'QuitWorker'): face_utilities.unary_unary_inline(servicer.QuitWorker),
    ('grpc.testing.WorkerService', 'RunClient'): face_utilities.stream_stream_inline(servicer.RunClient),
    ('grpc.testing.WorkerService', 'RunServer'): face_utilities.stream_stream_inline(servicer.RunServer),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)

def beta_create_WorkerService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  import src.proto.grpc.testing.control_pb2
  import src.proto.grpc.testing.control_pb2
  import src.proto.grpc.testing.control_pb2
  import src.proto.grpc.testing.control_pb2
  import src.proto.grpc.testing.control_pb2
  import src.proto.grpc.testing.control_pb2
  import src.proto.grpc.testing.control_pb2
  import src.proto.grpc.testing.control_pb2
  request_serializers = {
    ('grpc.testing.WorkerService', 'CoreCount'): src.proto.grpc.testing.control_pb2.CoreRequest.SerializeToString,
    ('grpc.testing.WorkerService', 'QuitWorker'): src.proto.grpc.testing.control_pb2.Void.SerializeToString,
    ('grpc.testing.WorkerService', 'RunClient'): src.proto.grpc.testing.control_pb2.ClientArgs.SerializeToString,
    ('grpc.testing.WorkerService', 'RunServer'): src.proto.grpc.testing.control_pb2.ServerArgs.SerializeToString,
  }
  response_deserializers = {
    ('grpc.testing.WorkerService', 'CoreCount'): src.proto.grpc.testing.control_pb2.CoreResponse.FromString,
    ('grpc.testing.WorkerService', 'QuitWorker'): src.proto.grpc.testing.control_pb2.Void.FromString,
    ('grpc.testing.WorkerService', 'RunClient'): src.proto.grpc.testing.control_pb2.ClientStatus.FromString,
    ('grpc.testing.WorkerService', 'RunServer'): src.proto.grpc.testing.control_pb2.ServerStatus.FromString,
  }
  cardinalities = {
    'CoreCount': cardinality.Cardinality.UNARY_UNARY,
    'QuitWorker': cardinality.Cardinality.UNARY_UNARY,
    'RunClient': cardinality.Cardinality.STREAM_STREAM,
    'RunServer': cardinality.Cardinality.STREAM_STREAM,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'grpc.testing.WorkerService', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
