// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: reflection.proto

#include "reflection.grpc.pb.h"
#include "reflection.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace grpc {
namespace reflection {
namespace v1 {

static const char* ServerReflection_method_names[] = {
    "/grpc.reflection.v1.ServerReflection/ListService",
    "/grpc.reflection.v1.ServerReflection/GetService",
    "/grpc.reflection.v1.ServerReflection/GetMethod",
    "/grpc.reflection.v1.ServerReflection/GetMessageType",
    "/grpc.reflection.v1.ServerReflection/GetEnumType",
    "/grpc.reflection.v1.ServerReflection/GetEnumValue",
    "/grpc.reflection.v1.ServerReflection/GetExtension",
};

std::unique_ptr<ServerReflection::Stub> ServerReflection::NewStub(
    const std::shared_ptr< ::grpc::ChannelInterface>& channel,
    const ::grpc::StubOptions& options) {
  std::unique_ptr<ServerReflection::Stub> stub(
      new ServerReflection::Stub(channel));
  return stub;
}

ServerReflection::Stub::Stub(
    const std::shared_ptr< ::grpc::ChannelInterface>& channel)
    : channel_(channel),
      rpcmethod_ListService_(ServerReflection_method_names[0],
                             ::grpc::RpcMethod::NORMAL_RPC, channel),
      rpcmethod_GetService_(ServerReflection_method_names[1],
                            ::grpc::RpcMethod::NORMAL_RPC, channel),
      rpcmethod_GetMethod_(ServerReflection_method_names[2],
                           ::grpc::RpcMethod::NORMAL_RPC, channel),
      rpcmethod_GetMessageType_(ServerReflection_method_names[3],
                                ::grpc::RpcMethod::NORMAL_RPC, channel),
      rpcmethod_GetEnumType_(ServerReflection_method_names[4],
                             ::grpc::RpcMethod::NORMAL_RPC, channel),
      rpcmethod_GetEnumValue_(ServerReflection_method_names[5],
                              ::grpc::RpcMethod::NORMAL_RPC, channel),
      rpcmethod_GetExtension_(ServerReflection_method_names[6],
                              ::grpc::RpcMethod::NORMAL_RPC, channel) {}

::grpc::Status ServerReflection::Stub::ListService(
    ::grpc::ClientContext* context,
    const ::grpc::reflection::v1::ListServiceRequest& request,
    ::grpc::reflection::v1::ListServiceResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ListService_,
                                   context, request, response);
}

::grpc::ClientAsyncResponseReader< ::grpc::reflection::v1::ListServiceResponse>*
ServerReflection::Stub::AsyncListServiceRaw(
    ::grpc::ClientContext* context,
    const ::grpc::reflection::v1::ListServiceRequest& request,
    ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader<
      ::grpc::reflection::v1::ListServiceResponse>(
      channel_.get(), cq, rpcmethod_ListService_, context, request);
}

::grpc::Status ServerReflection::Stub::GetService(
    ::grpc::ClientContext* context,
    const ::grpc::reflection::v1::GetDescriptorRequest& request,
    ::grpc::reflection::v1::GetServiceResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetService_,
                                   context, request, response);
}

::grpc::ClientAsyncResponseReader< ::grpc::reflection::v1::GetServiceResponse>*
ServerReflection::Stub::AsyncGetServiceRaw(
    ::grpc::ClientContext* context,
    const ::grpc::reflection::v1::GetDescriptorRequest& request,
    ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader<
      ::grpc::reflection::v1::GetServiceResponse>(
      channel_.get(), cq, rpcmethod_GetService_, context, request);
}

::grpc::Status ServerReflection::Stub::GetMethod(
    ::grpc::ClientContext* context,
    const ::grpc::reflection::v1::GetDescriptorRequest& request,
    ::grpc::reflection::v1::GetMethodResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetMethod_,
                                   context, request, response);
}

::grpc::ClientAsyncResponseReader< ::grpc::reflection::v1::GetMethodResponse>*
ServerReflection::Stub::AsyncGetMethodRaw(
    ::grpc::ClientContext* context,
    const ::grpc::reflection::v1::GetDescriptorRequest& request,
    ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader<
      ::grpc::reflection::v1::GetMethodResponse>(
      channel_.get(), cq, rpcmethod_GetMethod_, context, request);
}

::grpc::Status ServerReflection::Stub::GetMessageType(
    ::grpc::ClientContext* context,
    const ::grpc::reflection::v1::GetDescriptorRequest& request,
    ::grpc::reflection::v1::GetMessageTypeResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetMessageType_,
                                   context, request, response);
}

::grpc::ClientAsyncResponseReader<
    ::grpc::reflection::v1::GetMessageTypeResponse>*
ServerReflection::Stub::AsyncGetMessageTypeRaw(
    ::grpc::ClientContext* context,
    const ::grpc::reflection::v1::GetDescriptorRequest& request,
    ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader<
      ::grpc::reflection::v1::GetMessageTypeResponse>(
      channel_.get(), cq, rpcmethod_GetMessageType_, context, request);
}

::grpc::Status ServerReflection::Stub::GetEnumType(
    ::grpc::ClientContext* context,
    const ::grpc::reflection::v1::GetDescriptorRequest& request,
    ::grpc::reflection::v1::GetEnumTypeResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetEnumType_,
                                   context, request, response);
}

::grpc::ClientAsyncResponseReader< ::grpc::reflection::v1::GetEnumTypeResponse>*
ServerReflection::Stub::AsyncGetEnumTypeRaw(
    ::grpc::ClientContext* context,
    const ::grpc::reflection::v1::GetDescriptorRequest& request,
    ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader<
      ::grpc::reflection::v1::GetEnumTypeResponse>(
      channel_.get(), cq, rpcmethod_GetEnumType_, context, request);
}

::grpc::Status ServerReflection::Stub::GetEnumValue(
    ::grpc::ClientContext* context,
    const ::grpc::reflection::v1::GetDescriptorRequest& request,
    ::grpc::reflection::v1::GetEnumValueResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetEnumValue_,
                                   context, request, response);
}

::grpc::ClientAsyncResponseReader<
    ::grpc::reflection::v1::GetEnumValueResponse>*
ServerReflection::Stub::AsyncGetEnumValueRaw(
    ::grpc::ClientContext* context,
    const ::grpc::reflection::v1::GetDescriptorRequest& request,
    ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader<
      ::grpc::reflection::v1::GetEnumValueResponse>(
      channel_.get(), cq, rpcmethod_GetEnumValue_, context, request);
}

::grpc::Status ServerReflection::Stub::GetExtension(
    ::grpc::ClientContext* context,
    const ::grpc::reflection::v1::GetDescriptorRequest& request,
    ::grpc::reflection::v1::GetExtensionResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetExtension_,
                                   context, request, response);
}

::grpc::ClientAsyncResponseReader<
    ::grpc::reflection::v1::GetExtensionResponse>*
ServerReflection::Stub::AsyncGetExtensionRaw(
    ::grpc::ClientContext* context,
    const ::grpc::reflection::v1::GetDescriptorRequest& request,
    ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader<
      ::grpc::reflection::v1::GetExtensionResponse>(
      channel_.get(), cq, rpcmethod_GetExtension_, context, request);
}

ServerReflection::Service::Service() {
  (void)ServerReflection_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      ServerReflection_method_names[0], ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler<ServerReflection::Service,
                                   ::grpc::reflection::v1::ListServiceRequest,
                                   ::grpc::reflection::v1::ListServiceResponse>(
          std::mem_fn(&ServerReflection::Service::ListService), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ServerReflection_method_names[1], ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler<ServerReflection::Service,
                                   ::grpc::reflection::v1::GetDescriptorRequest,
                                   ::grpc::reflection::v1::GetServiceResponse>(
          std::mem_fn(&ServerReflection::Service::GetService), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ServerReflection_method_names[2], ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler<ServerReflection::Service,
                                   ::grpc::reflection::v1::GetDescriptorRequest,
                                   ::grpc::reflection::v1::GetMethodResponse>(
          std::mem_fn(&ServerReflection::Service::GetMethod), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ServerReflection_method_names[3], ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler<
          ServerReflection::Service,
          ::grpc::reflection::v1::GetDescriptorRequest,
          ::grpc::reflection::v1::GetMessageTypeResponse>(
          std::mem_fn(&ServerReflection::Service::GetMessageType), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ServerReflection_method_names[4], ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler<ServerReflection::Service,
                                   ::grpc::reflection::v1::GetDescriptorRequest,
                                   ::grpc::reflection::v1::GetEnumTypeResponse>(
          std::mem_fn(&ServerReflection::Service::GetEnumType), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ServerReflection_method_names[5], ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler<
          ServerReflection::Service,
          ::grpc::reflection::v1::GetDescriptorRequest,
          ::grpc::reflection::v1::GetEnumValueResponse>(
          std::mem_fn(&ServerReflection::Service::GetEnumValue), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ServerReflection_method_names[6], ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler<
          ServerReflection::Service,
          ::grpc::reflection::v1::GetDescriptorRequest,
          ::grpc::reflection::v1::GetExtensionResponse>(
          std::mem_fn(&ServerReflection::Service::GetExtension), this)));
}

ServerReflection::Service::~Service() {}

::grpc::Status ServerReflection::Service::ListService(
    ::grpc::ServerContext* context,
    const ::grpc::reflection::v1::ListServiceRequest* request,
    ::grpc::reflection::v1::ListServiceResponse* response) {
  (void)context;
  (void)request;
  (void)response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ServerReflection::Service::GetService(
    ::grpc::ServerContext* context,
    const ::grpc::reflection::v1::GetDescriptorRequest* request,
    ::grpc::reflection::v1::GetServiceResponse* response) {
  (void)context;
  (void)request;
  (void)response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ServerReflection::Service::GetMethod(
    ::grpc::ServerContext* context,
    const ::grpc::reflection::v1::GetDescriptorRequest* request,
    ::grpc::reflection::v1::GetMethodResponse* response) {
  (void)context;
  (void)request;
  (void)response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ServerReflection::Service::GetMessageType(
    ::grpc::ServerContext* context,
    const ::grpc::reflection::v1::GetDescriptorRequest* request,
    ::grpc::reflection::v1::GetMessageTypeResponse* response) {
  (void)context;
  (void)request;
  (void)response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ServerReflection::Service::GetEnumType(
    ::grpc::ServerContext* context,
    const ::grpc::reflection::v1::GetDescriptorRequest* request,
    ::grpc::reflection::v1::GetEnumTypeResponse* response) {
  (void)context;
  (void)request;
  (void)response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ServerReflection::Service::GetEnumValue(
    ::grpc::ServerContext* context,
    const ::grpc::reflection::v1::GetDescriptorRequest* request,
    ::grpc::reflection::v1::GetEnumValueResponse* response) {
  (void)context;
  (void)request;
  (void)response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ServerReflection::Service::GetExtension(
    ::grpc::ServerContext* context,
    const ::grpc::reflection::v1::GetDescriptorRequest* request,
    ::grpc::reflection::v1::GetExtensionResponse* response) {
  (void)context;
  (void)request;
  (void)response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

}  // namespace grpc
}  // namespace reflection
}  // namespace v1
