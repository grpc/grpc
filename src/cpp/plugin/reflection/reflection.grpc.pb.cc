// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: reflection.proto

#include "reflection.grpc.pb.h"
#include "reflection.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace grpc {
namespace reflection {
namespace v1 {

static const char* ServerReflection_method_names[] = {
    "/grpc.reflection.v1.ServerReflection/ListService",
    "/grpc.reflection.v1.ServerReflection/GetFileByName",
    "/grpc.reflection.v1.ServerReflection/GetFileContainingSymbol",
    "/grpc.reflection.v1.ServerReflection/GetFileContainingExtention",
    "/grpc.reflection.v1.ServerReflection/GetAllExtensionNumbers",
};

std::unique_ptr<ServerReflection::Stub> ServerReflection::NewStub(
    const std::shared_ptr< ::grpc::ChannelInterface>& channel,
    const ::grpc::StubOptions& options) {
  std::unique_ptr<ServerReflection::Stub> stub(
      new ServerReflection::Stub(channel));
  return stub;
}

ServerReflection::Stub::Stub(
    const std::shared_ptr< ::grpc::ChannelInterface>& channel)
    : channel_(channel),
      rpcmethod_ListService_(ServerReflection_method_names[0],
                             ::grpc::RpcMethod::NORMAL_RPC, channel),
      rpcmethod_GetFileByName_(ServerReflection_method_names[1],
                               ::grpc::RpcMethod::NORMAL_RPC, channel),
      rpcmethod_GetFileContainingSymbol_(ServerReflection_method_names[2],
                                         ::grpc::RpcMethod::NORMAL_RPC,
                                         channel),
      rpcmethod_GetFileContainingExtention_(ServerReflection_method_names[3],
                                            ::grpc::RpcMethod::NORMAL_RPC,
                                            channel),
      rpcmethod_GetAllExtensionNumbers_(ServerReflection_method_names[4],
                                        ::grpc::RpcMethod::NORMAL_RPC,
                                        channel) {}

::grpc::Status ServerReflection::Stub::ListService(
    ::grpc::ClientContext* context,
    const ::grpc::reflection::v1::EmptyRequest& request,
    ::grpc::reflection::v1::ListServiceResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ListService_,
                                   context, request, response);
}

::grpc::ClientAsyncResponseReader< ::grpc::reflection::v1::ListServiceResponse>*
ServerReflection::Stub::AsyncListServiceRaw(
    ::grpc::ClientContext* context,
    const ::grpc::reflection::v1::EmptyRequest& request,
    ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader<
      ::grpc::reflection::v1::ListServiceResponse>(
      channel_.get(), cq, rpcmethod_ListService_, context, request);
}

::grpc::Status ServerReflection::Stub::GetFileByName(
    ::grpc::ClientContext* context,
    const ::grpc::reflection::v1::FileNameRequest& request,
    ::grpc::reflection::v1::FileDescriptorProtoResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetFileByName_,
                                   context, request, response);
}

::grpc::ClientAsyncResponseReader<
    ::grpc::reflection::v1::FileDescriptorProtoResponse>*
ServerReflection::Stub::AsyncGetFileByNameRaw(
    ::grpc::ClientContext* context,
    const ::grpc::reflection::v1::FileNameRequest& request,
    ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader<
      ::grpc::reflection::v1::FileDescriptorProtoResponse>(
      channel_.get(), cq, rpcmethod_GetFileByName_, context, request);
}

::grpc::Status ServerReflection::Stub::GetFileContainingSymbol(
    ::grpc::ClientContext* context,
    const ::grpc::reflection::v1::SymbolRequest& request,
    ::grpc::reflection::v1::FileDescriptorProtoResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(),
                                   rpcmethod_GetFileContainingSymbol_, context,
                                   request, response);
}

::grpc::ClientAsyncResponseReader<
    ::grpc::reflection::v1::FileDescriptorProtoResponse>*
ServerReflection::Stub::AsyncGetFileContainingSymbolRaw(
    ::grpc::ClientContext* context,
    const ::grpc::reflection::v1::SymbolRequest& request,
    ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader<
      ::grpc::reflection::v1::FileDescriptorProtoResponse>(
      channel_.get(), cq, rpcmethod_GetFileContainingSymbol_, context, request);
}

::grpc::Status ServerReflection::Stub::GetFileContainingExtention(
    ::grpc::ClientContext* context,
    const ::grpc::reflection::v1::ExtensionRequest& request,
    ::grpc::reflection::v1::FileDescriptorProtoResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(),
                                   rpcmethod_GetFileContainingExtention_,
                                   context, request, response);
}

::grpc::ClientAsyncResponseReader<
    ::grpc::reflection::v1::FileDescriptorProtoResponse>*
ServerReflection::Stub::AsyncGetFileContainingExtentionRaw(
    ::grpc::ClientContext* context,
    const ::grpc::reflection::v1::ExtensionRequest& request,
    ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader<
      ::grpc::reflection::v1::FileDescriptorProtoResponse>(
      channel_.get(), cq, rpcmethod_GetFileContainingExtention_, context,
      request);
}

::grpc::Status ServerReflection::Stub::GetAllExtensionNumbers(
    ::grpc::ClientContext* context,
    const ::grpc::reflection::v1::TypeRequest& request,
    ::grpc::reflection::v1::ExtensionNumberResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(),
                                   rpcmethod_GetAllExtensionNumbers_, context,
                                   request, response);
}

::grpc::ClientAsyncResponseReader<
    ::grpc::reflection::v1::ExtensionNumberResponse>*
ServerReflection::Stub::AsyncGetAllExtensionNumbersRaw(
    ::grpc::ClientContext* context,
    const ::grpc::reflection::v1::TypeRequest& request,
    ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader<
      ::grpc::reflection::v1::ExtensionNumberResponse>(
      channel_.get(), cq, rpcmethod_GetAllExtensionNumbers_, context, request);
}

ServerReflection::Service::Service() {
  (void)ServerReflection_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      ServerReflection_method_names[0], ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler<ServerReflection::Service,
                                   ::grpc::reflection::v1::EmptyRequest,
                                   ::grpc::reflection::v1::ListServiceResponse>(
          std::mem_fn(&ServerReflection::Service::ListService), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ServerReflection_method_names[1], ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler<
          ServerReflection::Service, ::grpc::reflection::v1::FileNameRequest,
          ::grpc::reflection::v1::FileDescriptorProtoResponse>(
          std::mem_fn(&ServerReflection::Service::GetFileByName), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ServerReflection_method_names[2], ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler<
          ServerReflection::Service, ::grpc::reflection::v1::SymbolRequest,
          ::grpc::reflection::v1::FileDescriptorProtoResponse>(
          std::mem_fn(&ServerReflection::Service::GetFileContainingSymbol),
          this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ServerReflection_method_names[3], ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler<
          ServerReflection::Service, ::grpc::reflection::v1::ExtensionRequest,
          ::grpc::reflection::v1::FileDescriptorProtoResponse>(
          std::mem_fn(&ServerReflection::Service::GetFileContainingExtention),
          this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ServerReflection_method_names[4], ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler<
          ServerReflection::Service, ::grpc::reflection::v1::TypeRequest,
          ::grpc::reflection::v1::ExtensionNumberResponse>(
          std::mem_fn(&ServerReflection::Service::GetAllExtensionNumbers),
          this)));
}

ServerReflection::Service::~Service() {}

::grpc::Status ServerReflection::Service::ListService(
    ::grpc::ServerContext* context,
    const ::grpc::reflection::v1::EmptyRequest* request,
    ::grpc::reflection::v1::ListServiceResponse* response) {
  (void)context;
  (void)request;
  (void)response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ServerReflection::Service::GetFileByName(
    ::grpc::ServerContext* context,
    const ::grpc::reflection::v1::FileNameRequest* request,
    ::grpc::reflection::v1::FileDescriptorProtoResponse* response) {
  (void)context;
  (void)request;
  (void)response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ServerReflection::Service::GetFileContainingSymbol(
    ::grpc::ServerContext* context,
    const ::grpc::reflection::v1::SymbolRequest* request,
    ::grpc::reflection::v1::FileDescriptorProtoResponse* response) {
  (void)context;
  (void)request;
  (void)response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ServerReflection::Service::GetFileContainingExtention(
    ::grpc::ServerContext* context,
    const ::grpc::reflection::v1::ExtensionRequest* request,
    ::grpc::reflection::v1::FileDescriptorProtoResponse* response) {
  (void)context;
  (void)request;
  (void)response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ServerReflection::Service::GetAllExtensionNumbers(
    ::grpc::ServerContext* context,
    const ::grpc::reflection::v1::TypeRequest* request,
    ::grpc::reflection::v1::ExtensionNumberResponse* response) {
  (void)context;
  (void)request;
  (void)response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

}  // namespace grpc
}  // namespace reflection
}  // namespace v1
