// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: reflection.proto
#ifndef GRPC_reflection_2eproto__INCLUDED
#define GRPC_reflection_2eproto__INCLUDED

#include "reflection.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace grpc {
namespace reflection {
namespace v1 {

class ServerReflection GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ListService(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1::ListServiceRequest& request,
        ::grpc::reflection::v1::ListServiceResponse* response) = 0;
    std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
        ::grpc::reflection::v1::ListServiceResponse>>
    AsyncListService(::grpc::ClientContext* context,
                     const ::grpc::reflection::v1::ListServiceRequest& request,
                     ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
          ::grpc::reflection::v1::ListServiceResponse>>(
          AsyncListServiceRaw(context, request, cq));
    }
    virtual ::grpc::Status GetService(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest& request,
        ::grpc::reflection::v1::GetServiceResponse* response) = 0;
    std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
        ::grpc::reflection::v1::GetServiceResponse>>
    AsyncGetService(::grpc::ClientContext* context,
                    const ::grpc::reflection::v1::GetDescriptorRequest& request,
                    ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
          ::grpc::reflection::v1::GetServiceResponse>>(
          AsyncGetServiceRaw(context, request, cq));
    }
    virtual ::grpc::Status GetMethod(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest& request,
        ::grpc::reflection::v1::GetMethodResponse* response) = 0;
    std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
        ::grpc::reflection::v1::GetMethodResponse>>
    AsyncGetMethod(::grpc::ClientContext* context,
                   const ::grpc::reflection::v1::GetDescriptorRequest& request,
                   ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
          ::grpc::reflection::v1::GetMethodResponse>>(
          AsyncGetMethodRaw(context, request, cq));
    }
    virtual ::grpc::Status GetMessageType(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest& request,
        ::grpc::reflection::v1::GetMessageTypeResponse* response) = 0;
    std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
        ::grpc::reflection::v1::GetMessageTypeResponse>>
    AsyncGetMessageType(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest& request,
        ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
          ::grpc::reflection::v1::GetMessageTypeResponse>>(
          AsyncGetMessageTypeRaw(context, request, cq));
    }
    virtual ::grpc::Status GetEnumType(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest& request,
        ::grpc::reflection::v1::GetEnumTypeResponse* response) = 0;
    std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
        ::grpc::reflection::v1::GetEnumTypeResponse>>
    AsyncGetEnumType(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest& request,
        ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
          ::grpc::reflection::v1::GetEnumTypeResponse>>(
          AsyncGetEnumTypeRaw(context, request, cq));
    }
    virtual ::grpc::Status GetEnumValue(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest& request,
        ::grpc::reflection::v1::GetEnumValueResponse* response) = 0;
    std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
        ::grpc::reflection::v1::GetEnumValueResponse>>
    AsyncGetEnumValue(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest& request,
        ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
          ::grpc::reflection::v1::GetEnumValueResponse>>(
          AsyncGetEnumValueRaw(context, request, cq));
    }
    virtual ::grpc::Status GetExtension(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest& request,
        ::grpc::reflection::v1::GetExtensionResponse* response) = 0;
    std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
        ::grpc::reflection::v1::GetExtensionResponse>>
    AsyncGetExtension(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest& request,
        ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
          ::grpc::reflection::v1::GetExtensionResponse>>(
          AsyncGetExtensionRaw(context, request, cq));
    }

   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface<
        ::grpc::reflection::v1::ListServiceResponse>*
    AsyncListServiceRaw(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1::ListServiceRequest& request,
        ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface<
        ::grpc::reflection::v1::GetServiceResponse>*
    AsyncGetServiceRaw(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest& request,
        ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface<
        ::grpc::reflection::v1::GetMethodResponse>*
    AsyncGetMethodRaw(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest& request,
        ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface<
        ::grpc::reflection::v1::GetMessageTypeResponse>*
    AsyncGetMessageTypeRaw(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest& request,
        ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface<
        ::grpc::reflection::v1::GetEnumTypeResponse>*
    AsyncGetEnumTypeRaw(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest& request,
        ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface<
        ::grpc::reflection::v1::GetEnumValueResponse>*
    AsyncGetEnumValueRaw(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest& request,
        ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface<
        ::grpc::reflection::v1::GetExtensionResponse>*
    AsyncGetExtensionRaw(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest& request,
        ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr<::grpc::ChannelInterface>& channel);
    ::grpc::Status ListService(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1::ListServiceRequest& request,
        ::grpc::reflection::v1::ListServiceResponse* response) GRPC_OVERRIDE;
    std::unique_ptr<::grpc::ClientAsyncResponseReader<
        ::grpc::reflection::v1::ListServiceResponse>>
    AsyncListService(::grpc::ClientContext* context,
                     const ::grpc::reflection::v1::ListServiceRequest& request,
                     ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<::grpc::ClientAsyncResponseReader<
          ::grpc::reflection::v1::ListServiceResponse>>(
          AsyncListServiceRaw(context, request, cq));
    }
    ::grpc::Status GetService(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest& request,
        ::grpc::reflection::v1::GetServiceResponse* response) GRPC_OVERRIDE;
    std::unique_ptr<::grpc::ClientAsyncResponseReader<
        ::grpc::reflection::v1::GetServiceResponse>>
    AsyncGetService(::grpc::ClientContext* context,
                    const ::grpc::reflection::v1::GetDescriptorRequest& request,
                    ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<::grpc::ClientAsyncResponseReader<
          ::grpc::reflection::v1::GetServiceResponse>>(
          AsyncGetServiceRaw(context, request, cq));
    }
    ::grpc::Status GetMethod(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest& request,
        ::grpc::reflection::v1::GetMethodResponse* response) GRPC_OVERRIDE;
    std::unique_ptr<::grpc::ClientAsyncResponseReader<
        ::grpc::reflection::v1::GetMethodResponse>>
    AsyncGetMethod(::grpc::ClientContext* context,
                   const ::grpc::reflection::v1::GetDescriptorRequest& request,
                   ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<::grpc::ClientAsyncResponseReader<
          ::grpc::reflection::v1::GetMethodResponse>>(
          AsyncGetMethodRaw(context, request, cq));
    }
    ::grpc::Status GetMessageType(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest& request,
        ::grpc::reflection::v1::GetMessageTypeResponse* response) GRPC_OVERRIDE;
    std::unique_ptr<::grpc::ClientAsyncResponseReader<
        ::grpc::reflection::v1::GetMessageTypeResponse>>
    AsyncGetMessageType(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest& request,
        ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<::grpc::ClientAsyncResponseReader<
          ::grpc::reflection::v1::GetMessageTypeResponse>>(
          AsyncGetMessageTypeRaw(context, request, cq));
    }
    ::grpc::Status GetEnumType(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest& request,
        ::grpc::reflection::v1::GetEnumTypeResponse* response) GRPC_OVERRIDE;
    std::unique_ptr<::grpc::ClientAsyncResponseReader<
        ::grpc::reflection::v1::GetEnumTypeResponse>>
    AsyncGetEnumType(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest& request,
        ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<::grpc::ClientAsyncResponseReader<
          ::grpc::reflection::v1::GetEnumTypeResponse>>(
          AsyncGetEnumTypeRaw(context, request, cq));
    }
    ::grpc::Status GetEnumValue(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest& request,
        ::grpc::reflection::v1::GetEnumValueResponse* response) GRPC_OVERRIDE;
    std::unique_ptr<::grpc::ClientAsyncResponseReader<
        ::grpc::reflection::v1::GetEnumValueResponse>>
    AsyncGetEnumValue(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest& request,
        ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<::grpc::ClientAsyncResponseReader<
          ::grpc::reflection::v1::GetEnumValueResponse>>(
          AsyncGetEnumValueRaw(context, request, cq));
    }
    ::grpc::Status GetExtension(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest& request,
        ::grpc::reflection::v1::GetExtensionResponse* response) GRPC_OVERRIDE;
    std::unique_ptr<::grpc::ClientAsyncResponseReader<
        ::grpc::reflection::v1::GetExtensionResponse>>
    AsyncGetExtension(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest& request,
        ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<::grpc::ClientAsyncResponseReader<
          ::grpc::reflection::v1::GetExtensionResponse>>(
          AsyncGetExtensionRaw(context, request, cq));
    }

   private:
    std::shared_ptr<::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader<
        ::grpc::reflection::v1::ListServiceResponse>*
    AsyncListServiceRaw(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1::ListServiceRequest& request,
        ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader<
        ::grpc::reflection::v1::GetServiceResponse>*
    AsyncGetServiceRaw(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest& request,
        ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader<
        ::grpc::reflection::v1::GetMethodResponse>*
    AsyncGetMethodRaw(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest& request,
        ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader<
        ::grpc::reflection::v1::GetMessageTypeResponse>*
    AsyncGetMessageTypeRaw(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest& request,
        ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader<
        ::grpc::reflection::v1::GetEnumTypeResponse>*
    AsyncGetEnumTypeRaw(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest& request,
        ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader<
        ::grpc::reflection::v1::GetEnumValueResponse>*
    AsyncGetEnumValueRaw(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest& request,
        ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader<
        ::grpc::reflection::v1::GetExtensionResponse>*
    AsyncGetExtensionRaw(
        ::grpc::ClientContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest& request,
        ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_ListService_;
    const ::grpc::RpcMethod rpcmethod_GetService_;
    const ::grpc::RpcMethod rpcmethod_GetMethod_;
    const ::grpc::RpcMethod rpcmethod_GetMessageType_;
    const ::grpc::RpcMethod rpcmethod_GetEnumType_;
    const ::grpc::RpcMethod rpcmethod_GetEnumValue_;
    const ::grpc::RpcMethod rpcmethod_GetExtension_;
  };
  static std::unique_ptr<Stub> NewStub(
      const std::shared_ptr<::grpc::ChannelInterface>& channel,
      const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ListService(
        ::grpc::ServerContext* context,
        const ::grpc::reflection::v1::ListServiceRequest* request,
        ::grpc::reflection::v1::ListServiceResponse* response);
    virtual ::grpc::Status GetService(
        ::grpc::ServerContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest* request,
        ::grpc::reflection::v1::GetServiceResponse* response);
    virtual ::grpc::Status GetMethod(
        ::grpc::ServerContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest* request,
        ::grpc::reflection::v1::GetMethodResponse* response);
    virtual ::grpc::Status GetMessageType(
        ::grpc::ServerContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest* request,
        ::grpc::reflection::v1::GetMessageTypeResponse* response);
    virtual ::grpc::Status GetEnumType(
        ::grpc::ServerContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest* request,
        ::grpc::reflection::v1::GetEnumTypeResponse* response);
    virtual ::grpc::Status GetEnumValue(
        ::grpc::ServerContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest* request,
        ::grpc::reflection::v1::GetEnumValueResponse* response);
    virtual ::grpc::Status GetExtension(
        ::grpc::ServerContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest* request,
        ::grpc::reflection::v1::GetExtensionResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(Service* service) {}

   public:
    WithAsyncMethod_ListService() { ::grpc::Service::MarkMethodAsync(0); }
    ~WithAsyncMethod_ListService() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListService(
        ::grpc::ServerContext* context,
        const ::grpc::reflection::v1::ListServiceRequest* request,
        ::grpc::reflection::v1::ListServiceResponse* response)
        GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListService(
        ::grpc::ServerContext* context,
        ::grpc::reflection::v1::ListServiceRequest* request,
        ::grpc::ServerAsyncResponseWriter<
            ::grpc::reflection::v1::ListServiceResponse>* response,
        ::grpc::CompletionQueue* new_call_cq,
        ::grpc::ServerCompletionQueue* notification_cq, void* tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response,
                                         new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(Service* service) {}

   public:
    WithAsyncMethod_GetService() { ::grpc::Service::MarkMethodAsync(1); }
    ~WithAsyncMethod_GetService() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetService(
        ::grpc::ServerContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest* request,
        ::grpc::reflection::v1::GetServiceResponse* response)
        GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetService(
        ::grpc::ServerContext* context,
        ::grpc::reflection::v1::GetDescriptorRequest* request,
        ::grpc::ServerAsyncResponseWriter<
            ::grpc::reflection::v1::GetServiceResponse>* response,
        ::grpc::CompletionQueue* new_call_cq,
        ::grpc::ServerCompletionQueue* notification_cq, void* tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response,
                                         new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMethod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(Service* service) {}

   public:
    WithAsyncMethod_GetMethod() { ::grpc::Service::MarkMethodAsync(2); }
    ~WithAsyncMethod_GetMethod() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMethod(
        ::grpc::ServerContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest* request,
        ::grpc::reflection::v1::GetMethodResponse* response)
        GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMethod(
        ::grpc::ServerContext* context,
        ::grpc::reflection::v1::GetDescriptorRequest* request,
        ::grpc::ServerAsyncResponseWriter<
            ::grpc::reflection::v1::GetMethodResponse>* response,
        ::grpc::CompletionQueue* new_call_cq,
        ::grpc::ServerCompletionQueue* notification_cq, void* tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response,
                                         new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMessageType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(Service* service) {}

   public:
    WithAsyncMethod_GetMessageType() { ::grpc::Service::MarkMethodAsync(3); }
    ~WithAsyncMethod_GetMessageType() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMessageType(
        ::grpc::ServerContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest* request,
        ::grpc::reflection::v1::GetMessageTypeResponse* response)
        GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMessageType(
        ::grpc::ServerContext* context,
        ::grpc::reflection::v1::GetDescriptorRequest* request,
        ::grpc::ServerAsyncResponseWriter<
            ::grpc::reflection::v1::GetMessageTypeResponse>* response,
        ::grpc::CompletionQueue* new_call_cq,
        ::grpc::ServerCompletionQueue* notification_cq, void* tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response,
                                         new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetEnumType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(Service* service) {}

   public:
    WithAsyncMethod_GetEnumType() { ::grpc::Service::MarkMethodAsync(4); }
    ~WithAsyncMethod_GetEnumType() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEnumType(
        ::grpc::ServerContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest* request,
        ::grpc::reflection::v1::GetEnumTypeResponse* response)
        GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEnumType(
        ::grpc::ServerContext* context,
        ::grpc::reflection::v1::GetDescriptorRequest* request,
        ::grpc::ServerAsyncResponseWriter<
            ::grpc::reflection::v1::GetEnumTypeResponse>* response,
        ::grpc::CompletionQueue* new_call_cq,
        ::grpc::ServerCompletionQueue* notification_cq, void* tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response,
                                         new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetEnumValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(Service* service) {}

   public:
    WithAsyncMethod_GetEnumValue() { ::grpc::Service::MarkMethodAsync(5); }
    ~WithAsyncMethod_GetEnumValue() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEnumValue(
        ::grpc::ServerContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest* request,
        ::grpc::reflection::v1::GetEnumValueResponse* response)
        GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEnumValue(
        ::grpc::ServerContext* context,
        ::grpc::reflection::v1::GetDescriptorRequest* request,
        ::grpc::ServerAsyncResponseWriter<
            ::grpc::reflection::v1::GetEnumValueResponse>* response,
        ::grpc::CompletionQueue* new_call_cq,
        ::grpc::ServerCompletionQueue* notification_cq, void* tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response,
                                         new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetExtension : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(Service* service) {}

   public:
    WithAsyncMethod_GetExtension() { ::grpc::Service::MarkMethodAsync(6); }
    ~WithAsyncMethod_GetExtension() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExtension(
        ::grpc::ServerContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest* request,
        ::grpc::reflection::v1::GetExtensionResponse* response)
        GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetExtension(
        ::grpc::ServerContext* context,
        ::grpc::reflection::v1::GetDescriptorRequest* request,
        ::grpc::ServerAsyncResponseWriter<
            ::grpc::reflection::v1::GetExtensionResponse>* response,
        ::grpc::CompletionQueue* new_call_cq,
        ::grpc::ServerCompletionQueue* notification_cq, void* tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response,
                                         new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListService<WithAsyncMethod_GetService<
      WithAsyncMethod_GetMethod<WithAsyncMethod_GetMessageType<
          WithAsyncMethod_GetEnumType<WithAsyncMethod_GetEnumValue<
              WithAsyncMethod_GetExtension<Service>>>>>>>
      AsyncService;
  template <class BaseClass>
  class WithGenericMethod_ListService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(Service* service) {}

   public:
    WithGenericMethod_ListService() { ::grpc::Service::MarkMethodGeneric(0); }
    ~WithGenericMethod_ListService() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListService(
        ::grpc::ServerContext* context,
        const ::grpc::reflection::v1::ListServiceRequest* request,
        ::grpc::reflection::v1::ListServiceResponse* response)
        GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(Service* service) {}

   public:
    WithGenericMethod_GetService() { ::grpc::Service::MarkMethodGeneric(1); }
    ~WithGenericMethod_GetService() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetService(
        ::grpc::ServerContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest* request,
        ::grpc::reflection::v1::GetServiceResponse* response)
        GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMethod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(Service* service) {}

   public:
    WithGenericMethod_GetMethod() { ::grpc::Service::MarkMethodGeneric(2); }
    ~WithGenericMethod_GetMethod() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMethod(
        ::grpc::ServerContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest* request,
        ::grpc::reflection::v1::GetMethodResponse* response)
        GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMessageType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(Service* service) {}

   public:
    WithGenericMethod_GetMessageType() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetMessageType() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMessageType(
        ::grpc::ServerContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest* request,
        ::grpc::reflection::v1::GetMessageTypeResponse* response)
        GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetEnumType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(Service* service) {}

   public:
    WithGenericMethod_GetEnumType() { ::grpc::Service::MarkMethodGeneric(4); }
    ~WithGenericMethod_GetEnumType() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEnumType(
        ::grpc::ServerContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest* request,
        ::grpc::reflection::v1::GetEnumTypeResponse* response)
        GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetEnumValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(Service* service) {}

   public:
    WithGenericMethod_GetEnumValue() { ::grpc::Service::MarkMethodGeneric(5); }
    ~WithGenericMethod_GetEnumValue() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEnumValue(
        ::grpc::ServerContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest* request,
        ::grpc::reflection::v1::GetEnumValueResponse* response)
        GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetExtension : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(Service* service) {}

   public:
    WithGenericMethod_GetExtension() { ::grpc::Service::MarkMethodGeneric(6); }
    ~WithGenericMethod_GetExtension() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExtension(
        ::grpc::ServerContext* context,
        const ::grpc::reflection::v1::GetDescriptorRequest* request,
        ::grpc::reflection::v1::GetExtensionResponse* response)
        GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
};

}  // namespace v1
}  // namespace reflection
}  // namespace grpc

#endif  // GRPC_reflection_2eproto__INCLUDED
