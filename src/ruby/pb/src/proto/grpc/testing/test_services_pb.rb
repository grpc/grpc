# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: src/proto/grpc/testing/test.proto for package 'grpc.testing'
# Original file comments:
# Copyright 2015-2016, Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#     * Neither the name of Google Inc. nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# An integration test service that covers all the method signature permutations
# of unary/streaming requests/responses.
#

require 'grpc'
require 'src/proto/grpc/testing/test_pb'

module Grpc
  module Testing
    module TestService
      # A simple service to test the various types of RPCs and experiment with
      # performance with various types of payload.
      class Service

        include GRPC::GenericService

        self.marshal_class_method = :encode
        self.unmarshal_class_method = :decode
        self.service_name = 'grpc.testing.TestService'

        # One empty request followed by one empty response.
        rpc :EmptyCall, Empty, Empty
        # One request followed by one response.
        rpc :UnaryCall, SimpleRequest, SimpleResponse
        # One request followed by one response. Response has cache control
        # headers set such that a caching HTTP proxy (such as GFE) can
        # satisfy subsequent requests.
        rpc :CacheableUnaryCall, SimpleRequest, SimpleResponse
        # One request followed by a sequence of responses (streamed download).
        # The server returns the payload with client desired type and sizes.
        rpc :StreamingOutputCall, StreamingOutputCallRequest, stream(StreamingOutputCallResponse)
        # A sequence of requests followed by one response (streamed upload).
        # The server returns the aggregated size of client payload as the result.
        rpc :StreamingInputCall, stream(StreamingInputCallRequest), StreamingInputCallResponse
        # A sequence of requests with each request served by the server immediately.
        # As one request could lead to multiple responses, this interface
        # demonstrates the idea of full duplexing.
        rpc :FullDuplexCall, stream(StreamingOutputCallRequest), stream(StreamingOutputCallResponse)
        # A sequence of requests followed by a sequence of responses.
        # The server buffers all the client requests and then serves them in order. A
        # stream of responses are returned to the client when the server starts with
        # first request.
        rpc :HalfDuplexCall, stream(StreamingOutputCallRequest), stream(StreamingOutputCallResponse)
        # The test server will not implement this method. It will be used
        # to test the behavior when clients call unimplemented methods.
        rpc :UnimplementedCall, Empty, Empty
      end

      Stub = Service.rpc_stub_class
    end
    module UnimplementedService
      # A simple service NOT implemented at servers so clients can test for
      # that case.
      class Service

        include GRPC::GenericService

        self.marshal_class_method = :encode
        self.unmarshal_class_method = :decode
        self.service_name = 'grpc.testing.UnimplementedService'

        # A call that no server should implement
        rpc :UnimplementedCall, Empty, Empty
      end

      Stub = Service.rpc_stub_class
    end
    module ReconnectService
      # A service used to control reconnect server.
      class Service

        include GRPC::GenericService

        self.marshal_class_method = :encode
        self.unmarshal_class_method = :decode
        self.service_name = 'grpc.testing.ReconnectService'

        rpc :Start, ReconnectParams, Empty
        rpc :Stop, Empty, ReconnectInfo
      end

      Stub = Service.rpc_stub_class
    end
  end
end
