# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: src/proto/grpc/testing/control.proto

require 'google/protobuf'

require 'src/proto/grpc/testing/payloads_pb'
require 'src/proto/grpc/testing/stats_pb'
require 'google/protobuf/timestamp_pb'


descriptor_data = "\n$src/proto/grpc/testing/control.proto\x12\x0cgrpc.testing\x1a%src/proto/grpc/testing/payloads.proto\x1a\"src/proto/grpc/testing/stats.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"%\n\rPoissonParams\x12\x14\n\x0coffered_load\x18\x01 \x01(\x01\"\x12\n\x10\x43losedLoopParams\"{\n\nLoadParams\x12\x35\n\x0b\x63losed_loop\x18\x01 \x01(\x0b\x32\x1e.grpc.testing.ClosedLoopParamsH\x00\x12.\n\x07poisson\x18\x02 \x01(\x0b\x32\x1b.grpc.testing.PoissonParamsH\x00\x42\x06\n\x04load\"V\n\x0eSecurityParams\x12\x13\n\x0buse_test_ca\x18\x01 \x01(\x08\x12\x1c\n\x14server_host_override\x18\x02 \x01(\t\x12\x11\n\tcred_type\x18\x03 \x01(\t\"M\n\nChannelArg\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x13\n\tstr_value\x18\x02 \x01(\tH\x00\x12\x13\n\tint_value\x18\x03 \x01(\x05H\x00\x42\x07\n\x05value\"\xbc\x05\n\x0c\x43lientConfig\x12\x16\n\x0eserver_targets\x18\x01 \x03(\t\x12-\n\x0b\x63lient_type\x18\x02 \x01(\x0e\x32\x18.grpc.testing.ClientType\x12\x35\n\x0fsecurity_params\x18\x03 \x01(\x0b\x32\x1c.grpc.testing.SecurityParams\x12$\n\x1coutstanding_rpcs_per_channel\x18\x04 \x01(\x05\x12\x17\n\x0f\x63lient_channels\x18\x05 \x01(\x05\x12\x1c\n\x14\x61sync_client_threads\x18\x07 \x01(\x05\x12\'\n\x08rpc_type\x18\x08 \x01(\x0e\x32\x15.grpc.testing.RpcType\x12-\n\x0bload_params\x18\n \x01(\x0b\x32\x18.grpc.testing.LoadParams\x12\x33\n\x0epayload_config\x18\x0b \x01(\x0b\x32\x1b.grpc.testing.PayloadConfig\x12\x37\n\x10histogram_params\x18\x0c \x01(\x0b\x32\x1d.grpc.testing.HistogramParams\x12\x11\n\tcore_list\x18\r \x03(\x05\x12\x12\n\ncore_limit\x18\x0e \x01(\x05\x12\x18\n\x10other_client_api\x18\x0f \x01(\t\x12.\n\x0c\x63hannel_args\x18\x10 \x03(\x0b\x32\x18.grpc.testing.ChannelArg\x12\x16\n\x0ethreads_per_cq\x18\x11 \x01(\x05\x12\x1b\n\x13messages_per_stream\x18\x12 \x01(\x05\x12\x18\n\x10use_coalesce_api\x18\x13 \x01(\x08\x12\x31\n)median_latency_collection_interval_millis\x18\x14 \x01(\x05\x12\x18\n\x10\x63lient_processes\x18\x15 \x01(\x05\"8\n\x0c\x43lientStatus\x12(\n\x05stats\x18\x01 \x01(\x0b\x32\x19.grpc.testing.ClientStats\"\x15\n\x04Mark\x12\r\n\x05reset\x18\x01 \x01(\x08\"h\n\nClientArgs\x12+\n\x05setup\x18\x01 \x01(\x0b\x32\x1a.grpc.testing.ClientConfigH\x00\x12\"\n\x04mark\x18\x02 \x01(\x0b\x32\x12.grpc.testing.MarkH\x00\x42\t\n\x07\x61rgtype\"\x97\x03\n\x0cServerConfig\x12-\n\x0bserver_type\x18\x01 \x01(\x0e\x32\x18.grpc.testing.ServerType\x12\x35\n\x0fsecurity_params\x18\x02 \x01(\x0b\x32\x1c.grpc.testing.SecurityParams\x12\x0c\n\x04port\x18\x04 \x01(\x05\x12\x1c\n\x14\x61sync_server_threads\x18\x07 \x01(\x05\x12\x12\n\ncore_limit\x18\x08 \x01(\x05\x12\x33\n\x0epayload_config\x18\t \x01(\x0b\x32\x1b.grpc.testing.PayloadConfig\x12\x11\n\tcore_list\x18\n \x03(\x05\x12\x18\n\x10other_server_api\x18\x0b \x01(\t\x12\x16\n\x0ethreads_per_cq\x18\x0c \x01(\x05\x12\x1c\n\x13resource_quota_size\x18\xe9\x07 \x01(\x05\x12/\n\x0c\x63hannel_args\x18\xea\x07 \x03(\x0b\x32\x18.grpc.testing.ChannelArg\x12\x18\n\x10server_processes\x18\x15 \x01(\x05\"h\n\nServerArgs\x12+\n\x05setup\x18\x01 \x01(\x0b\x32\x1a.grpc.testing.ServerConfigH\x00\x12\"\n\x04mark\x18\x02 \x01(\x0b\x32\x12.grpc.testing.MarkH\x00\x42\t\n\x07\x61rgtype\"U\n\x0cServerStatus\x12(\n\x05stats\x18\x01 \x01(\x0b\x32\x19.grpc.testing.ServerStats\x12\x0c\n\x04port\x18\x02 \x01(\x05\x12\r\n\x05\x63ores\x18\x03 \x01(\x05\"\r\n\x0b\x43oreRequest\"\x1d\n\x0c\x43oreResponse\x12\r\n\x05\x63ores\x18\x01 \x01(\x05\"\x06\n\x04Void\"\xfd\x01\n\x08Scenario\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x31\n\rclient_config\x18\x02 \x01(\x0b\x32\x1a.grpc.testing.ClientConfig\x12\x13\n\x0bnum_clients\x18\x03 \x01(\x05\x12\x31\n\rserver_config\x18\x04 \x01(\x0b\x32\x1a.grpc.testing.ServerConfig\x12\x13\n\x0bnum_servers\x18\x05 \x01(\x05\x12\x16\n\x0ewarmup_seconds\x18\x06 \x01(\x05\x12\x19\n\x11\x62\x65nchmark_seconds\x18\x07 \x01(\x05\x12 \n\x18spawn_local_worker_count\x18\x08 \x01(\x05\"6\n\tScenarios\x12)\n\tscenarios\x18\x01 \x03(\x0b\x32\x16.grpc.testing.Scenario\"\xe2\x04\n\x15ScenarioResultSummary\x12\x0b\n\x03qps\x18\x01 \x01(\x01\x12\x1b\n\x13qps_per_server_core\x18\x02 \x01(\x01\x12\x1a\n\x12server_system_time\x18\x03 \x01(\x01\x12\x18\n\x10server_user_time\x18\x04 \x01(\x01\x12\x1a\n\x12\x63lient_system_time\x18\x05 \x01(\x01\x12\x18\n\x10\x63lient_user_time\x18\x06 \x01(\x01\x12\x12\n\nlatency_50\x18\x07 \x01(\x01\x12\x12\n\nlatency_90\x18\x08 \x01(\x01\x12\x12\n\nlatency_95\x18\t \x01(\x01\x12\x12\n\nlatency_99\x18\n \x01(\x01\x12\x13\n\x0blatency_999\x18\x0b \x01(\x01\x12\x18\n\x10server_cpu_usage\x18\x0c \x01(\x01\x12&\n\x1esuccessful_requests_per_second\x18\r \x01(\x01\x12\"\n\x1a\x66\x61iled_requests_per_second\x18\x0e \x01(\x01\x12 \n\x18\x63lient_polls_per_request\x18\x0f \x01(\x01\x12 \n\x18server_polls_per_request\x18\x10 \x01(\x01\x12\"\n\x1aserver_queries_per_cpu_sec\x18\x11 \x01(\x01\x12\"\n\x1a\x63lient_queries_per_cpu_sec\x18\x12 \x01(\x01\x12.\n\nstart_time\x18\x13 \x01(\x0b\x32\x1a.google.protobuf.Timestamp\x12,\n\x08\x65nd_time\x18\x14 \x01(\x0b\x32\x1a.google.protobuf.Timestamp\"\x83\x03\n\x0eScenarioResult\x12(\n\x08scenario\x18\x01 \x01(\x0b\x32\x16.grpc.testing.Scenario\x12.\n\tlatencies\x18\x02 \x01(\x0b\x32\x1b.grpc.testing.HistogramData\x12/\n\x0c\x63lient_stats\x18\x03 \x03(\x0b\x32\x19.grpc.testing.ClientStats\x12/\n\x0cserver_stats\x18\x04 \x03(\x0b\x32\x19.grpc.testing.ServerStats\x12\x14\n\x0cserver_cores\x18\x05 \x03(\x05\x12\x34\n\x07summary\x18\x06 \x01(\x0b\x32#.grpc.testing.ScenarioResultSummary\x12\x16\n\x0e\x63lient_success\x18\x07 \x03(\x08\x12\x16\n\x0eserver_success\x18\x08 \x03(\x08\x12\x39\n\x0frequest_results\x18\t \x03(\x0b\x32 .grpc.testing.RequestResultCount*V\n\nClientType\x12\x0f\n\x0bSYNC_CLIENT\x10\x00\x12\x10\n\x0c\x41SYNC_CLIENT\x10\x01\x12\x10\n\x0cOTHER_CLIENT\x10\x02\x12\x13\n\x0f\x43\x41LLBACK_CLIENT\x10\x03*p\n\nServerType\x12\x0f\n\x0bSYNC_SERVER\x10\x00\x12\x10\n\x0c\x41SYNC_SERVER\x10\x01\x12\x18\n\x14\x41SYNC_GENERIC_SERVER\x10\x02\x12\x10\n\x0cOTHER_SERVER\x10\x03\x12\x13\n\x0f\x43\x41LLBACK_SERVER\x10\x04*r\n\x07RpcType\x12\t\n\x05UNARY\x10\x00\x12\r\n\tSTREAMING\x10\x01\x12\x19\n\x15STREAMING_FROM_CLIENT\x10\x02\x12\x19\n\x15STREAMING_FROM_SERVER\x10\x03\x12\x17\n\x13STREAMING_BOTH_WAYS\x10\x04\x62\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError => e
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
    ["grpc.testing.PayloadConfig", "src/proto/grpc/testing/payloads.proto"],
    ["grpc.testing.HistogramParams", "src/proto/grpc/testing/stats.proto"],
    ["google.protobuf.Timestamp", "google/protobuf/timestamp.proto"],
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

module Grpc
  module Testing
    PoissonParams = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("grpc.testing.PoissonParams").msgclass
    ClosedLoopParams = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("grpc.testing.ClosedLoopParams").msgclass
    LoadParams = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("grpc.testing.LoadParams").msgclass
    SecurityParams = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("grpc.testing.SecurityParams").msgclass
    ChannelArg = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("grpc.testing.ChannelArg").msgclass
    ClientConfig = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("grpc.testing.ClientConfig").msgclass
    ClientStatus = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("grpc.testing.ClientStatus").msgclass
    Mark = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("grpc.testing.Mark").msgclass
    ClientArgs = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("grpc.testing.ClientArgs").msgclass
    ServerConfig = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("grpc.testing.ServerConfig").msgclass
    ServerArgs = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("grpc.testing.ServerArgs").msgclass
    ServerStatus = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("grpc.testing.ServerStatus").msgclass
    CoreRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("grpc.testing.CoreRequest").msgclass
    CoreResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("grpc.testing.CoreResponse").msgclass
    Void = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("grpc.testing.Void").msgclass
    Scenario = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("grpc.testing.Scenario").msgclass
    Scenarios = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("grpc.testing.Scenarios").msgclass
    ScenarioResultSummary = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("grpc.testing.ScenarioResultSummary").msgclass
    ScenarioResult = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("grpc.testing.ScenarioResult").msgclass
    ClientType = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("grpc.testing.ClientType").enummodule
    ServerType = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("grpc.testing.ServerType").enummodule
    RpcType = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("grpc.testing.RpcType").enummodule
  end
end
