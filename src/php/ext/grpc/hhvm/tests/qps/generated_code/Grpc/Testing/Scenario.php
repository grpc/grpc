<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: src/proto/grpc/testing/control.proto

namespace Grpc\Testing;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * A single performance scenario: input to qps_json_driver
 * </pre>
 *
 * Protobuf type <code>grpc.testing.Scenario</code>
 */
class Scenario extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * Human readable name for this scenario
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    private $name = '';
    /**
     * <pre>
     * Client configuration
     * </pre>
     *
     * <code>.grpc.testing.ClientConfig client_config = 2;</code>
     */
    private $client_config = null;
    /**
     * <pre>
     * Number of clients to start for the test
     * </pre>
     *
     * <code>int32 num_clients = 3;</code>
     */
    private $num_clients = 0;
    /**
     * <pre>
     * Server configuration
     * </pre>
     *
     * <code>.grpc.testing.ServerConfig server_config = 4;</code>
     */
    private $server_config = null;
    /**
     * <pre>
     * Number of servers to start for the test
     * </pre>
     *
     * <code>int32 num_servers = 5;</code>
     */
    private $num_servers = 0;
    /**
     * <pre>
     * Warmup period, in seconds
     * </pre>
     *
     * <code>int32 warmup_seconds = 6;</code>
     */
    private $warmup_seconds = 0;
    /**
     * <pre>
     * Benchmark time, in seconds
     * </pre>
     *
     * <code>int32 benchmark_seconds = 7;</code>
     */
    private $benchmark_seconds = 0;
    /**
     * <pre>
     * Number of workers to spawn locally (usually zero)
     * </pre>
     *
     * <code>int32 spawn_local_worker_count = 8;</code>
     */
    private $spawn_local_worker_count = 0;

    public function __construct() {
        \GPBMetadata\Src\Proto\Grpc\Testing\Control::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * Human readable name for this scenario
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * <pre>
     * Human readable name for this scenario
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;
    }

    /**
     * <pre>
     * Client configuration
     * </pre>
     *
     * <code>.grpc.testing.ClientConfig client_config = 2;</code>
     */
    public function getClientConfig()
    {
        return $this->client_config;
    }

    /**
     * <pre>
     * Client configuration
     * </pre>
     *
     * <code>.grpc.testing.ClientConfig client_config = 2;</code>
     */
    public function setClientConfig(&$var)
    {
        GPBUtil::checkMessage($var, \Grpc\Testing\ClientConfig::class);
        $this->client_config = $var;
    }

    /**
     * <pre>
     * Number of clients to start for the test
     * </pre>
     *
     * <code>int32 num_clients = 3;</code>
     */
    public function getNumClients()
    {
        return $this->num_clients;
    }

    /**
     * <pre>
     * Number of clients to start for the test
     * </pre>
     *
     * <code>int32 num_clients = 3;</code>
     */
    public function setNumClients($var)
    {
        GPBUtil::checkInt32($var);
        $this->num_clients = $var;
    }

    /**
     * <pre>
     * Server configuration
     * </pre>
     *
     * <code>.grpc.testing.ServerConfig server_config = 4;</code>
     */
    public function getServerConfig()
    {
        return $this->server_config;
    }

    /**
     * <pre>
     * Server configuration
     * </pre>
     *
     * <code>.grpc.testing.ServerConfig server_config = 4;</code>
     */
    public function setServerConfig(&$var)
    {
        GPBUtil::checkMessage($var, \Grpc\Testing\ServerConfig::class);
        $this->server_config = $var;
    }

    /**
     * <pre>
     * Number of servers to start for the test
     * </pre>
     *
     * <code>int32 num_servers = 5;</code>
     */
    public function getNumServers()
    {
        return $this->num_servers;
    }

    /**
     * <pre>
     * Number of servers to start for the test
     * </pre>
     *
     * <code>int32 num_servers = 5;</code>
     */
    public function setNumServers($var)
    {
        GPBUtil::checkInt32($var);
        $this->num_servers = $var;
    }

    /**
     * <pre>
     * Warmup period, in seconds
     * </pre>
     *
     * <code>int32 warmup_seconds = 6;</code>
     */
    public function getWarmupSeconds()
    {
        return $this->warmup_seconds;
    }

    /**
     * <pre>
     * Warmup period, in seconds
     * </pre>
     *
     * <code>int32 warmup_seconds = 6;</code>
     */
    public function setWarmupSeconds($var)
    {
        GPBUtil::checkInt32($var);
        $this->warmup_seconds = $var;
    }

    /**
     * <pre>
     * Benchmark time, in seconds
     * </pre>
     *
     * <code>int32 benchmark_seconds = 7;</code>
     */
    public function getBenchmarkSeconds()
    {
        return $this->benchmark_seconds;
    }

    /**
     * <pre>
     * Benchmark time, in seconds
     * </pre>
     *
     * <code>int32 benchmark_seconds = 7;</code>
     */
    public function setBenchmarkSeconds($var)
    {
        GPBUtil::checkInt32($var);
        $this->benchmark_seconds = $var;
    }

    /**
     * <pre>
     * Number of workers to spawn locally (usually zero)
     * </pre>
     *
     * <code>int32 spawn_local_worker_count = 8;</code>
     */
    public function getSpawnLocalWorkerCount()
    {
        return $this->spawn_local_worker_count;
    }

    /**
     * <pre>
     * Number of workers to spawn locally (usually zero)
     * </pre>
     *
     * <code>int32 spawn_local_worker_count = 8;</code>
     */
    public function setSpawnLocalWorkerCount($var)
    {
        GPBUtil::checkInt32($var);
        $this->spawn_local_worker_count = $var;
    }

}

