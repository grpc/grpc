<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: src/proto/grpc/testing/messages.proto

namespace Grpc\Testing;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * Client-streaming request.
 * </pre>
 *
 * Protobuf type <code>grpc.testing.StreamingInputCallRequest</code>
 */
class StreamingInputCallRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * Optional input payload sent along with the request.
     * </pre>
     *
     * <code>.grpc.testing.Payload payload = 1;</code>
     */
    private $payload = null;
    /**
     * <pre>
     * Whether the server should expect this request to be compressed. This field
     * is "nullable" in order to interoperate seamlessly with servers not able to
     * implement the full compression tests by introspecting the call to verify
     * the request's compression status.
     * </pre>
     *
     * <code>.grpc.testing.BoolValue expect_compressed = 2;</code>
     */
    private $expect_compressed = null;

    public function __construct() {
        \GPBMetadata\Src\Proto\Grpc\Testing\Messages::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * Optional input payload sent along with the request.
     * </pre>
     *
     * <code>.grpc.testing.Payload payload = 1;</code>
     */
    public function getPayload()
    {
        return $this->payload;
    }

    /**
     * <pre>
     * Optional input payload sent along with the request.
     * </pre>
     *
     * <code>.grpc.testing.Payload payload = 1;</code>
     */
    public function setPayload(&$var)
    {
        GPBUtil::checkMessage($var, \Grpc\Testing\Payload::class);
        $this->payload = $var;
    }

    /**
     * <pre>
     * Whether the server should expect this request to be compressed. This field
     * is "nullable" in order to interoperate seamlessly with servers not able to
     * implement the full compression tests by introspecting the call to verify
     * the request's compression status.
     * </pre>
     *
     * <code>.grpc.testing.BoolValue expect_compressed = 2;</code>
     */
    public function getExpectCompressed()
    {
        return $this->expect_compressed;
    }

    /**
     * <pre>
     * Whether the server should expect this request to be compressed. This field
     * is "nullable" in order to interoperate seamlessly with servers not able to
     * implement the full compression tests by introspecting the call to verify
     * the request's compression status.
     * </pre>
     *
     * <code>.grpc.testing.BoolValue expect_compressed = 2;</code>
     */
    public function setExpectCompressed(&$var)
    {
        GPBUtil::checkMessage($var, \Grpc\Testing\BoolValue::class);
        $this->expect_compressed = $var;
    }

}

