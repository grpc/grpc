<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: src/proto/grpc/testing/control.proto

namespace Grpc\Testing;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>grpc.testing.ClientConfig</code>
 */
class ClientConfig extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * List of targets to connect to. At least one target needs to be specified.
     * </pre>
     *
     * <code>repeated string server_targets = 1;</code>
     */
    private $server_targets;
    /**
     * <code>.grpc.testing.ClientType client_type = 2;</code>
     */
    private $client_type = 0;
    /**
     * <code>.grpc.testing.SecurityParams security_params = 3;</code>
     */
    private $security_params = null;
    /**
     * <pre>
     * How many concurrent RPCs to start for each channel.
     * For synchronous client, use a separate thread for each outstanding RPC.
     * </pre>
     *
     * <code>int32 outstanding_rpcs_per_channel = 4;</code>
     */
    private $outstanding_rpcs_per_channel = 0;
    /**
     * <pre>
     * Number of independent client channels to create.
     * i-th channel will connect to server_target[i % server_targets.size()]
     * </pre>
     *
     * <code>int32 client_channels = 5;</code>
     */
    private $client_channels = 0;
    /**
     * <pre>
     * Only for async client. Number of threads to use to start/manage RPCs.
     * </pre>
     *
     * <code>int32 async_client_threads = 7;</code>
     */
    private $async_client_threads = 0;
    /**
     * <code>.grpc.testing.RpcType rpc_type = 8;</code>
     */
    private $rpc_type = 0;
    /**
     * <pre>
     * The requested load for the entire client (aggregated over all the threads).
     * </pre>
     *
     * <code>.grpc.testing.LoadParams load_params = 10;</code>
     */
    private $load_params = null;
    /**
     * <code>.grpc.testing.PayloadConfig payload_config = 11;</code>
     */
    private $payload_config = null;
    /**
     * <code>.grpc.testing.HistogramParams histogram_params = 12;</code>
     */
    private $histogram_params = null;
    /**
     * <pre>
     * Specify the cores we should run the client on, if desired
     * </pre>
     *
     * <code>repeated int32 core_list = 13;</code>
     */
    private $core_list;
    /**
     * <code>int32 core_limit = 14;</code>
     */
    private $core_limit = 0;
    /**
     * <pre>
     * If we use an OTHER_CLIENT client_type, this string gives more detail
     * </pre>
     *
     * <code>string other_client_api = 15;</code>
     */
    private $other_client_api = '';
    /**
     * <code>repeated .grpc.testing.ChannelArg channel_args = 16;</code>
     */
    private $channel_args;

    public function __construct() {
        \GPBMetadata\Src\Proto\Grpc\Testing\Control::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * List of targets to connect to. At least one target needs to be specified.
     * </pre>
     *
     * <code>repeated string server_targets = 1;</code>
     */
    public function getServerTargets()
    {
        return $this->server_targets;
    }

    /**
     * <pre>
     * List of targets to connect to. At least one target needs to be specified.
     * </pre>
     *
     * <code>repeated string server_targets = 1;</code>
     */
    public function setServerTargets(&$var)
    {
        GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::STRING);
        $this->server_targets = $var;
    }

    /**
     * <code>.grpc.testing.ClientType client_type = 2;</code>
     */
    public function getClientType()
    {
        return $this->client_type;
    }

    /**
     * <code>.grpc.testing.ClientType client_type = 2;</code>
     */
    public function setClientType($var)
    {
        GPBUtil::checkEnum($var, \Grpc\Testing\ClientType::class);
        $this->client_type = $var;
    }

    /**
     * <code>.grpc.testing.SecurityParams security_params = 3;</code>
     */
    public function getSecurityParams()
    {
        return $this->security_params;
    }

    /**
     * <code>.grpc.testing.SecurityParams security_params = 3;</code>
     */
    public function setSecurityParams(&$var)
    {
        GPBUtil::checkMessage($var, \Grpc\Testing\SecurityParams::class);
        $this->security_params = $var;
    }

    /**
     * <pre>
     * How many concurrent RPCs to start for each channel.
     * For synchronous client, use a separate thread for each outstanding RPC.
     * </pre>
     *
     * <code>int32 outstanding_rpcs_per_channel = 4;</code>
     */
    public function getOutstandingRpcsPerChannel()
    {
        return $this->outstanding_rpcs_per_channel;
    }

    /**
     * <pre>
     * How many concurrent RPCs to start for each channel.
     * For synchronous client, use a separate thread for each outstanding RPC.
     * </pre>
     *
     * <code>int32 outstanding_rpcs_per_channel = 4;</code>
     */
    public function setOutstandingRpcsPerChannel($var)
    {
        GPBUtil::checkInt32($var);
        $this->outstanding_rpcs_per_channel = $var;
    }

    /**
     * <pre>
     * Number of independent client channels to create.
     * i-th channel will connect to server_target[i % server_targets.size()]
     * </pre>
     *
     * <code>int32 client_channels = 5;</code>
     */
    public function getClientChannels()
    {
        return $this->client_channels;
    }

    /**
     * <pre>
     * Number of independent client channels to create.
     * i-th channel will connect to server_target[i % server_targets.size()]
     * </pre>
     *
     * <code>int32 client_channels = 5;</code>
     */
    public function setClientChannels($var)
    {
        GPBUtil::checkInt32($var);
        $this->client_channels = $var;
    }

    /**
     * <pre>
     * Only for async client. Number of threads to use to start/manage RPCs.
     * </pre>
     *
     * <code>int32 async_client_threads = 7;</code>
     */
    public function getAsyncClientThreads()
    {
        return $this->async_client_threads;
    }

    /**
     * <pre>
     * Only for async client. Number of threads to use to start/manage RPCs.
     * </pre>
     *
     * <code>int32 async_client_threads = 7;</code>
     */
    public function setAsyncClientThreads($var)
    {
        GPBUtil::checkInt32($var);
        $this->async_client_threads = $var;
    }

    /**
     * <code>.grpc.testing.RpcType rpc_type = 8;</code>
     */
    public function getRpcType()
    {
        return $this->rpc_type;
    }

    /**
     * <code>.grpc.testing.RpcType rpc_type = 8;</code>
     */
    public function setRpcType($var)
    {
        GPBUtil::checkEnum($var, \Grpc\Testing\RpcType::class);
        $this->rpc_type = $var;
    }

    /**
     * <pre>
     * The requested load for the entire client (aggregated over all the threads).
     * </pre>
     *
     * <code>.grpc.testing.LoadParams load_params = 10;</code>
     */
    public function getLoadParams()
    {
        return $this->load_params;
    }

    /**
     * <pre>
     * The requested load for the entire client (aggregated over all the threads).
     * </pre>
     *
     * <code>.grpc.testing.LoadParams load_params = 10;</code>
     */
    public function setLoadParams(&$var)
    {
        GPBUtil::checkMessage($var, \Grpc\Testing\LoadParams::class);
        $this->load_params = $var;
    }

    /**
     * <code>.grpc.testing.PayloadConfig payload_config = 11;</code>
     */
    public function getPayloadConfig()
    {
        return $this->payload_config;
    }

    /**
     * <code>.grpc.testing.PayloadConfig payload_config = 11;</code>
     */
    public function setPayloadConfig(&$var)
    {
        GPBUtil::checkMessage($var, \Grpc\Testing\PayloadConfig::class);
        $this->payload_config = $var;
    }

    /**
     * <code>.grpc.testing.HistogramParams histogram_params = 12;</code>
     */
    public function getHistogramParams()
    {
        return $this->histogram_params;
    }

    /**
     * <code>.grpc.testing.HistogramParams histogram_params = 12;</code>
     */
    public function setHistogramParams(&$var)
    {
        GPBUtil::checkMessage($var, \Grpc\Testing\HistogramParams::class);
        $this->histogram_params = $var;
    }

    /**
     * <pre>
     * Specify the cores we should run the client on, if desired
     * </pre>
     *
     * <code>repeated int32 core_list = 13;</code>
     */
    public function getCoreList()
    {
        return $this->core_list;
    }

    /**
     * <pre>
     * Specify the cores we should run the client on, if desired
     * </pre>
     *
     * <code>repeated int32 core_list = 13;</code>
     */
    public function setCoreList(&$var)
    {
        GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::INT32);
        $this->core_list = $var;
    }

    /**
     * <code>int32 core_limit = 14;</code>
     */
    public function getCoreLimit()
    {
        return $this->core_limit;
    }

    /**
     * <code>int32 core_limit = 14;</code>
     */
    public function setCoreLimit($var)
    {
        GPBUtil::checkInt32($var);
        $this->core_limit = $var;
    }

    /**
     * <pre>
     * If we use an OTHER_CLIENT client_type, this string gives more detail
     * </pre>
     *
     * <code>string other_client_api = 15;</code>
     */
    public function getOtherClientApi()
    {
        return $this->other_client_api;
    }

    /**
     * <pre>
     * If we use an OTHER_CLIENT client_type, this string gives more detail
     * </pre>
     *
     * <code>string other_client_api = 15;</code>
     */
    public function setOtherClientApi($var)
    {
        GPBUtil::checkString($var, True);
        $this->other_client_api = $var;
    }

    /**
     * <code>repeated .grpc.testing.ChannelArg channel_args = 16;</code>
     */
    public function getChannelArgs()
    {
        return $this->channel_args;
    }

    /**
     * <code>repeated .grpc.testing.ChannelArg channel_args = 16;</code>
     */
    public function setChannelArgs(&$var)
    {
        GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Grpc\Testing\ChannelArg::class);
        $this->channel_args = $var;
    }

}

