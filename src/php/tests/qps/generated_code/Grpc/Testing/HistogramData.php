<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: src/proto/grpc/testing/stats.proto

namespace Grpc\Testing;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * Histogram data based on grpc/support/histogram.c
 * </pre>
 *
 * Protobuf type <code>grpc.testing.HistogramData</code>
 */
class HistogramData extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>repeated uint32 bucket = 1;</code>
     */
    private $bucket;
    /**
     * <code>double min_seen = 2;</code>
     */
    private $min_seen = 0.0;
    /**
     * <code>double max_seen = 3;</code>
     */
    private $max_seen = 0.0;
    /**
     * <code>double sum = 4;</code>
     */
    private $sum = 0.0;
    /**
     * <code>double sum_of_squares = 5;</code>
     */
    private $sum_of_squares = 0.0;
    /**
     * <code>double count = 6;</code>
     */
    private $count = 0.0;

    public function __construct() {
        \GPBMetadata\Src\Proto\Grpc\Testing\Stats::initOnce();
        parent::__construct();
    }

    /**
     * <code>repeated uint32 bucket = 1;</code>
     */
    public function getBucket()
    {
        return $this->bucket;
    }

    /**
     * <code>repeated uint32 bucket = 1;</code>
     */
    public function setBucket(&$var)
    {
        GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::UINT32);
        $this->bucket = $var;
    }

    /**
     * <code>double min_seen = 2;</code>
     */
    public function getMinSeen()
    {
        return $this->min_seen;
    }

    /**
     * <code>double min_seen = 2;</code>
     */
    public function setMinSeen($var)
    {
        GPBUtil::checkDouble($var);
        $this->min_seen = $var;
    }

    /**
     * <code>double max_seen = 3;</code>
     */
    public function getMaxSeen()
    {
        return $this->max_seen;
    }

    /**
     * <code>double max_seen = 3;</code>
     */
    public function setMaxSeen($var)
    {
        GPBUtil::checkDouble($var);
        $this->max_seen = $var;
    }

    /**
     * <code>double sum = 4;</code>
     */
    public function getSum()
    {
        return $this->sum;
    }

    /**
     * <code>double sum = 4;</code>
     */
    public function setSum($var)
    {
        GPBUtil::checkDouble($var);
        $this->sum = $var;
    }

    /**
     * <code>double sum_of_squares = 5;</code>
     */
    public function getSumOfSquares()
    {
        return $this->sum_of_squares;
    }

    /**
     * <code>double sum_of_squares = 5;</code>
     */
    public function setSumOfSquares($var)
    {
        GPBUtil::checkDouble($var);
        $this->sum_of_squares = $var;
    }

    /**
     * <code>double count = 6;</code>
     */
    public function getCount()
    {
        return $this->count;
    }

    /**
     * <code>double count = 6;</code>
     */
    public function setCount($var)
    {
        GPBUtil::checkDouble($var);
        $this->count = $var;
    }

}

