// Copyright 2022 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Automatically generated by tools/codegen/core/gen_experiments.py

#ifndef GRPC_CORE_LIB_EXPERIMENTS_EXPERIMENTS_H
#define GRPC_CORE_LIB_EXPERIMENTS_EXPERIMENTS_H

#include <grpc/support/port_platform.h>

#include <stddef.h>

#include "src/core/lib/experiments/config.h"

namespace grpc_core {

enum ExperimentNames {
  TcpFrameSizeTuning = 0,
  TcpReadChunks = 1,
  TcpRcvLowat = 2,
  PeerStateBasedFraming = 3,
  FlowControlFixes = 4,
  MemoryPressureController = 5,
  UnconstrainedMaxQuotaBufferSize = 6,
  NewHpackHuffmanDecoder = 7,
  EventEngineClient = 8,
  MonitoringExperiment = 9,
  PromiseBasedClientCall = 10,
  PosixEventEngineEnablePolling = 11,
  FreeLargeAllocator = 12,
};

inline bool IsTcpFrameSizeTuningEnabled() {
  return IsExperimentEnabled(ExperimentNames::TcpFrameSizeTuning);
}
inline bool IsTcpReadChunksEnabled() {
  return IsExperimentEnabled(ExperimentNames::TcpReadChunks);
}
inline bool IsTcpRcvLowatEnabled() {
  return IsExperimentEnabled(ExperimentNames::TcpRcvLowat);
}
inline bool IsPeerStateBasedFramingEnabled() {
  return IsExperimentEnabled(ExperimentNames::PeerStateBasedFraming);
}
inline bool IsFlowControlFixesEnabled() {
  return IsExperimentEnabled(ExperimentNames::FlowControlFixes);
}
inline bool IsMemoryPressureControllerEnabled() {
  return IsExperimentEnabled(ExperimentNames::MemoryPressureController);
}
inline bool IsUnconstrainedMaxQuotaBufferSizeEnabled() {
  return IsExperimentEnabled(ExperimentNames::UnconstrainedMaxQuotaBufferSize);
}
inline bool IsNewHpackHuffmanDecoderEnabled() {
  return IsExperimentEnabled(ExperimentNames::NewHpackHuffmanDecoder);
}
inline bool IsEventEngineClientEnabled() {
  return IsExperimentEnabled(ExperimentNames::EventEngineClient);
}
inline bool IsMonitoringExperimentEnabled() {
  return IsExperimentEnabled(ExperimentNames::MonitoringExperiment);
}
inline bool IsPromiseBasedClientCallEnabled() {
  return IsExperimentEnabled(ExperimentNames::PromiseBasedClientCall);
}
inline bool IsPosixEventEngineEnablePollingEnabled() {
  return IsExperimentEnabled(ExperimentNames::PosixEventEngineEnablePolling);
}
inline bool IsFreeLargeAllocatorEnabled() {
  return IsExperimentEnabled(ExperimentNames::FreeLargeAllocator);
}

struct ExperimentMetadata {
  const char* name;
  const char* description;
  bool default_value;
};

constexpr const size_t kNumExperiments = 13;
extern const ExperimentMetadata g_experiment_metadata[kNumExperiments];

}  // namespace grpc_core

#endif  // GRPC_CORE_LIB_EXPERIMENTS_EXPERIMENTS_H
