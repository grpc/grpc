# Copyright 2017 gRPC authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Stats data declaration
# use tools/codegen/core/gen_stats_data.py to turn this into stats_data.h

# Format:
#
# Supported metric-types: counter, histogram
#
# First field for each metric should be `metric-type: name-of-metric`
#
# Also required is a `doc` field to document the state, and a `scope` field
# to list the scope at which this metric should be collected.
# `global` metrics can be manipulated via a global singleton `global_stats`.
#
# Updating a global metric is threadsafe.
#
# Other metrics create bespoke `Collector` classes that can be instantiated
# at appropriate places and manipulated directly.
#
# Updating a non-global metric is not threadsafe (external locking is required).
#
# Additionally, all scoped metrics are also included in the global scope, so
# a summary view is always available.
#
# Histogram specific fields:
#   max           (required) max value that can be inserted in the histogram
#   buckets       (required) how many buckets to use for the histogram
#                 bucket ranges exponentially grow in size from 0 -- max across
#                 these buckets
#   scope_buckets (optional) if placed on a non-global scoped histogram,
#                 specifies the number of buckets to track on the scoped
#                 histogram (the global version will then use `buckets`)
#   scope_counter_bits (optional) if placed on a non-global scoped histogram,
#                 specifies the number of bits to track for each bucket count.
#                 If one bucket overflows, we halve all buckets and continue
#                 counting.

# overall
- counter: client_calls_created
  doc: Number of client side calls created by this process
  scope: global
- counter: server_calls_created
  doc: Number of server side calls created by this process
  scope: global
- histogram: call_initial_size
  max: 65536
  buckets: 26
  doc: Initial size of the grpc_call arena created at call start
  scope: global
- counter: client_channels_created
  doc: Number of client channels created
  scope: global
- counter: client_subchannels_created
  doc: Number of client subchannels created
  scope: global
- counter: server_channels_created
  doc: Number of server channels created
  scope: global
- counter: insecure_connections_created
  doc: Number of insecure connections created
  scope: global
# resource quota
- counter: rq_connections_dropped
  doc: Number of connections dropped due to resource quota exceeded
  scope: global
- counter: rq_calls_dropped
  doc: Number of calls dropped due to resource quota exceeded
  scope: global
- counter: rq_calls_rejected
  doc: Number of calls rejected (never started) due to resource quota exceeded
  scope: global
# tcp
- counter: syscall_write
  doc: Number of write syscalls (or equivalent - eg sendmsg) made by this process
  scope: global
- counter: syscall_read
  doc: Number of read syscalls (or equivalent - eg recvmsg) made by this process
  scope: global
- histogram: tcp_write_size
  max: 16777216 # 16 meg max write tracked
  buckets: 20
  doc: Number of bytes offered to each syscall_write
  scope: global
- histogram: tcp_write_iov_size
  max: 80
  buckets: 10
  doc: Number of byte segments offered to each syscall_write
  scope: global
- counter: tcp_read_alloc_8k
  doc: Number of 8k allocations by the TCP subsystem for reading
  scope: global
- counter: tcp_read_alloc_64k
  doc: Number of 64k allocations by the TCP subsystem for reading
  scope: global
- histogram: tcp_read_size
  max: 16777216
  buckets: 20
  doc: Number of bytes received by each syscall_read
  scope: global
- histogram: tcp_read_offer
  max: 16777216
  buckets: 20
  doc: Number of bytes offered to each syscall_read
  scope: global
- histogram: tcp_read_offer_iov_size
  max: 80
  buckets: 10
  doc: Number of byte segments offered to each syscall_read
  scope: global
# chttp2
- histogram: http2_send_message_size
  max: 16777216
  buckets: 20
  doc: Size of messages received by HTTP2 transport
  scope: global
- counter: http2_settings_writes
  doc: Number of settings frames sent
  scope: global
- counter: http2_pings_sent
  doc: Number of HTTP2 pings sent by process
  scope: global
- counter: http2_writes_begun
  doc: Number of HTTP2 writes initiated
  scope: http2
- counter: http2_transport_stalls
  doc: Number of times sending was completely stalled by the transport flow control window
  scope: global
- counter: http2_stream_stalls
  doc: Number of times sending was completely stalled by the stream flow control window
  scope: global
- histogram: http2_metadata_size
  max: 65536
  buckets: 26
  doc: Number of bytes consumed by metadata, according to HPACK accounting rules
  scope: global
- counter: http2_hpack_hits
  doc: Number of HPACK cache hits
  scope: global
- counter: http2_hpack_misses
  doc: Number of HPACK cache misses (entries added but never used)
  scope: global
- histogram: http2_hpack_entry_lifetime
  doc: Lifetime of HPACK entries in the cache (in milliseconds)
  max: 1800000
  buckets: 40
  scope: global
- histogram: http2_header_table_size
  doc: Http2 header table size received through SETTINGS frame
  max: 16777216
  buckets: 20
  scope: global
- histogram: http2_initial_window_size
  doc: Http2 initial window size received through SETTINGS frame
  max: 16777216
  buckets: 50
  scope: global
- histogram: http2_max_concurrent_streams
  doc: Http2 max concurrent streams received through SETTINGS frame
  max: 16777216
  buckets: 20
  scope: global
- histogram: http2_max_frame_size
  doc: Http2 max frame size received through SETTINGS frame
  max: 16777216
  buckets: 50
  scope: global
- histogram: http2_max_header_list_size
  doc: Http2 max header list size received through SETTINGS frame
  max: 16777216
  buckets: 20
  scope: global
- histogram: http2_preferred_receive_crypto_message_size
  doc: Http2 preferred receive crypto message size received through SETTINGS frame
  max: 16777216
  buckets: 20
  scope: global
- histogram: http2_stream_remote_window_update
  doc: Stream window update sent by peer
  max: 16777216
  buckets: 20
  scope: global
- histogram: http2_transport_remote_window_update
  doc: Transport window update sent by peer
  max: 16777216
  buckets: 20
  scope: global
- histogram: http2_transport_window_update_period
  doc: Period in milliseconds at which peer sends transport window update
  max: 100000
  buckets: 20
  scope: global
- histogram: http2_stream_window_update_period
  doc: Period in milliseconds at which peer sends stream window update
  max: 100000
  buckets: 20
  scope: global
- histogram: http2_write_target_size
  doc: Number of bytes targetted for http2 writes
  max: 16777216
  buckets: 50
  scope: http2
  scope_counter_bits: 8
  scope_buckets: 8
- histogram: http2_write_data_frame_size
  doc: Number of bytes for each data frame written
  max: 16777216
  buckets: 50
  scope: global
- histogram: http2_read_data_frame_size
  doc: Number of bytes for each data frame read
  max: 16777216
  buckets: 50
  scope: global
# completion queues
- counter: cq_pluck_creates
  doc: Number of completion queues created for cq_pluck (indicates sync api usage)
  scope: global
- counter: cq_next_creates
  doc: Number of completion queues created for cq_next (indicates cq async api usage)
  scope: global
- counter: cq_callback_creates
  doc: Number of completion queues created for cq_callback (indicates callback api usage)
  scope: global
# wrr
- histogram: wrr_subchannel_list_size
  doc: Number of subchannels in a subchannel list at picker creation time
  max: 10000
  buckets: 20
  scope: global
- histogram: wrr_subchannel_ready_size
  doc: Number of READY subchannels in a subchannel list at picker creation time
  max: 10000
  buckets: 20
  scope: global
- counter: wrr_updates
  doc: Number of wrr updates that have been received
  scope: global
# work serializer
- histogram: work_serializer_run_time_ms
  doc: Number of milliseconds work serializers run for
  max: 100000
  buckets: 20
  scope: global
- histogram: work_serializer_work_time_ms
  doc: When running, how many milliseconds are work serializers actually doing work
  max: 100000
  buckets: 20
  scope: global
- histogram: work_serializer_work_time_per_item_ms
  doc: How long do individual items take to process in work serializers
  max: 100000
  buckets: 20
  scope: global
- histogram: work_serializer_items_per_run
  doc: How many callbacks are executed when a work serializer runs
  max: 10000
  buckets: 20
  scope: global
- counter: work_serializer_items_enqueued
  doc: Number of items enqueued onto work serializers
  scope: global
- counter: work_serializer_items_dequeued
  doc: Number of items dequeued from work serializers
  scope: global
- counter: econnaborted_count
  doc: Number of ECONNABORTED errors
  scope: global
- counter: econnreset_count
  doc: Number of ECONNRESET errors
  scope: global
- counter: epipe_count
  doc: Number of EPIPE errors
  scope: global
- counter: etimedout_count
  doc: Number of ETIMEDOUT errors
  scope: global
- counter: econnrefused_count
  doc: Number of ECONNREFUSED errors
  scope: global
- counter: enetunreach_count
  doc: Number of ENETUNREACH errors
  scope: global
- counter: enomsg_count
  doc: Number of ENOMSG errors
  scope: global
- counter: enotconn_count
  doc: Number of ENOTCONN errors
  scope: global
- counter: enobufs_count
  doc: Number of ENOBUFS errors
  scope: global
- counter: uncommon_io_error_count
  doc: Number of uncommon io errors
  scope: global
- counter: msg_errqueue_error_count
  doc: Number of uncommon errors returned by MSG_ERRQUEUE
  scope: global
- histogram: chaotic_good_sendmsgs_per_write_control
  doc: Number of sendmsgs per control channel endpoint write
  max: 100
  buckets: 20
  scope: global
- histogram: chaotic_good_recvmsgs_per_read_control
  doc: Number of recvmsgs per control channel endpoint read
  max: 100
  buckets: 20
  scope: global
- histogram: chaotic_good_sendmsgs_per_write_data
  doc: Number of sendmsgs per data channel endpoint write
  max: 100
  buckets: 20
  scope: global
- histogram: chaotic_good_recvmsgs_per_read_data
  doc: Number of recvmsgs per data channel endpoint read
  max: 100
  buckets: 20
  scope: global
- histogram: chaotic_good_thread_hops_per_write_control
  doc: Number of thread hops per control channel endpoint write
  max: 100
  buckets: 20
  scope: global
- histogram: chaotic_good_thread_hops_per_read_control
  doc: Number of thread hops per control channel endpoint read
  max: 100
  buckets: 20
  scope: global
- histogram: chaotic_good_thread_hops_per_write_data
  doc: Number of thread hops per data channel endpoint write
  max: 100
  buckets: 20
  scope: global
- histogram: chaotic_good_thread_hops_per_read_data
  doc: Number of thread hops per data channel endpoint read
  max: 100
  buckets: 20
  scope: global
- histogram: chaotic_good_tcp_read_size_data
  max: 16777216
  buckets: 20
  doc: Number of bytes received by each syscall_read in the data channel
  scope: global
- histogram: chaotic_good_tcp_read_size_control
  max: 16777216
  buckets: 20
  doc: Number of bytes received by each syscall_read in the control channel
  scope: global
- histogram: chaotic_good_tcp_read_offer_data
  max: 16777216
  buckets: 20
  doc: Number of bytes offered to each syscall_read in the data channel
  scope: global
- histogram: chaotic_good_tcp_read_offer_control
  max: 16777216
  buckets: 20
  doc: Number of bytes offered to each syscall_read in the control channel
  scope: global
- histogram: chaotic_good_tcp_write_size_data
  max: 16777216
  buckets: 20
  doc: Number of bytes offered to each syscall_write in the data channel
  scope: global
- histogram: chaotic_good_tcp_write_size_control
  max: 16777216
  buckets: 20
  doc: Number of bytes offered to each syscall_write in the control channel
  scope: global

