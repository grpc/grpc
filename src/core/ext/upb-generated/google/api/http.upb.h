/* This file was generated by upbc (the upb compiler) from the input
 * file:
 *
 *     google/api/http.proto
 *
 * Do not edit -- your changes will be discarded when the file is
 * regenerated. */

#ifndef GOOGLE_API_HTTP_PROTO_UPB_H_
#define GOOGLE_API_HTTP_PROTO_UPB_H_

#include "upb/msg.h"

#include "upb/decode.h"
#include "upb/encode.h"
#include "upb/port_def.inc"
UPB_BEGIN_EXTERN_C

struct google_api_Http;
struct google_api_HttpRule;
struct google_api_CustomHttpPattern;
typedef struct google_api_Http google_api_Http;
typedef struct google_api_HttpRule google_api_HttpRule;
typedef struct google_api_CustomHttpPattern google_api_CustomHttpPattern;

/* Enums */

/* google.api.Http */

extern const upb_msglayout google_api_Http_msginit;
UPB_INLINE google_api_Http *google_api_Http_new(upb_arena *arena) {
  return upb_msg_new(&google_api_Http_msginit, arena);
}
UPB_INLINE google_api_Http *google_api_Http_parsenew(upb_stringview buf, upb_arena *arena) {
  google_api_Http *ret = google_api_Http_new(arena);
  return (ret && upb_decode(buf, ret, &google_api_Http_msginit)) ? ret : NULL;
}
UPB_INLINE char *google_api_Http_serialize(const google_api_Http *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &google_api_Http_msginit, arena, len);
}

UPB_INLINE const upb_array* google_api_Http_rules(const google_api_Http *msg) { return UPB_FIELD_AT(msg, const upb_array*, UPB_SIZE(4, 8)); }
UPB_INLINE bool google_api_Http_fully_decode_reserved_expansion(const google_api_Http *msg) { return UPB_FIELD_AT(msg, bool, UPB_SIZE(0, 0)); }

UPB_INLINE void google_api_Http_set_rules(google_api_Http *msg, upb_array* value) { UPB_FIELD_AT(msg, upb_array*, UPB_SIZE(4, 8)) = value; }
UPB_INLINE void google_api_Http_set_fully_decode_reserved_expansion(google_api_Http *msg, bool value) { UPB_FIELD_AT(msg, bool, UPB_SIZE(0, 0)) = value; }


/* google.api.HttpRule */

extern const upb_msglayout google_api_HttpRule_msginit;
UPB_INLINE google_api_HttpRule *google_api_HttpRule_new(upb_arena *arena) {
  return upb_msg_new(&google_api_HttpRule_msginit, arena);
}
UPB_INLINE google_api_HttpRule *google_api_HttpRule_parsenew(upb_stringview buf, upb_arena *arena) {
  google_api_HttpRule *ret = google_api_HttpRule_new(arena);
  return (ret && upb_decode(buf, ret, &google_api_HttpRule_msginit)) ? ret : NULL;
}
UPB_INLINE char *google_api_HttpRule_serialize(const google_api_HttpRule *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &google_api_HttpRule_msginit, arena, len);
}

typedef enum {
  google_api_HttpRule_pattern_get = 2,
  google_api_HttpRule_pattern_put = 3,
  google_api_HttpRule_pattern_post = 4,
  google_api_HttpRule_pattern_delete = 5,
  google_api_HttpRule_pattern_patch = 6,
  google_api_HttpRule_pattern_custom = 8,
  google_api_HttpRule_pattern_NOT_SET = 0,
} google_api_HttpRule_pattern_oneofcases;
UPB_INLINE google_api_HttpRule_pattern_oneofcases google_api_HttpRule_pattern_case(const google_api_HttpRule* msg) { return UPB_FIELD_AT(msg, int, UPB_SIZE(40, 80)); }

UPB_INLINE upb_stringview google_api_HttpRule_selector(const google_api_HttpRule *msg) { return UPB_FIELD_AT(msg, upb_stringview, UPB_SIZE(0, 0)); }
UPB_INLINE upb_stringview google_api_HttpRule_get(const google_api_HttpRule *msg) { return UPB_READ_ONEOF(msg, upb_stringview, UPB_SIZE(32, 64), UPB_SIZE(40, 80), 2, upb_stringview_make("", strlen(""))); }
UPB_INLINE upb_stringview google_api_HttpRule_put(const google_api_HttpRule *msg) { return UPB_READ_ONEOF(msg, upb_stringview, UPB_SIZE(32, 64), UPB_SIZE(40, 80), 3, upb_stringview_make("", strlen(""))); }
UPB_INLINE upb_stringview google_api_HttpRule_post(const google_api_HttpRule *msg) { return UPB_READ_ONEOF(msg, upb_stringview, UPB_SIZE(32, 64), UPB_SIZE(40, 80), 4, upb_stringview_make("", strlen(""))); }
UPB_INLINE upb_stringview google_api_HttpRule_delete(const google_api_HttpRule *msg) { return UPB_READ_ONEOF(msg, upb_stringview, UPB_SIZE(32, 64), UPB_SIZE(40, 80), 5, upb_stringview_make("", strlen(""))); }
UPB_INLINE upb_stringview google_api_HttpRule_patch(const google_api_HttpRule *msg) { return UPB_READ_ONEOF(msg, upb_stringview, UPB_SIZE(32, 64), UPB_SIZE(40, 80), 6, upb_stringview_make("", strlen(""))); }
UPB_INLINE upb_stringview google_api_HttpRule_body(const google_api_HttpRule *msg) { return UPB_FIELD_AT(msg, upb_stringview, UPB_SIZE(8, 16)); }
UPB_INLINE const google_api_CustomHttpPattern* google_api_HttpRule_custom(const google_api_HttpRule *msg) { return UPB_READ_ONEOF(msg, const google_api_CustomHttpPattern*, UPB_SIZE(32, 64), UPB_SIZE(40, 80), 8, NULL); }
UPB_INLINE const upb_array* google_api_HttpRule_additional_bindings(const google_api_HttpRule *msg) { return UPB_FIELD_AT(msg, const upb_array*, UPB_SIZE(24, 48)); }
UPB_INLINE upb_stringview google_api_HttpRule_response_body(const google_api_HttpRule *msg) { return UPB_FIELD_AT(msg, upb_stringview, UPB_SIZE(16, 32)); }

UPB_INLINE void google_api_HttpRule_set_selector(google_api_HttpRule *msg, upb_stringview value) { UPB_FIELD_AT(msg, upb_stringview, UPB_SIZE(0, 0)) = value; }
UPB_INLINE void google_api_HttpRule_set_get(google_api_HttpRule *msg, upb_stringview value) { UPB_WRITE_ONEOF(msg, upb_stringview, UPB_SIZE(32, 64), value, UPB_SIZE(40, 80), 2); }
UPB_INLINE void google_api_HttpRule_set_put(google_api_HttpRule *msg, upb_stringview value) { UPB_WRITE_ONEOF(msg, upb_stringview, UPB_SIZE(32, 64), value, UPB_SIZE(40, 80), 3); }
UPB_INLINE void google_api_HttpRule_set_post(google_api_HttpRule *msg, upb_stringview value) { UPB_WRITE_ONEOF(msg, upb_stringview, UPB_SIZE(32, 64), value, UPB_SIZE(40, 80), 4); }
UPB_INLINE void google_api_HttpRule_set_delete(google_api_HttpRule *msg, upb_stringview value) { UPB_WRITE_ONEOF(msg, upb_stringview, UPB_SIZE(32, 64), value, UPB_SIZE(40, 80), 5); }
UPB_INLINE void google_api_HttpRule_set_patch(google_api_HttpRule *msg, upb_stringview value) { UPB_WRITE_ONEOF(msg, upb_stringview, UPB_SIZE(32, 64), value, UPB_SIZE(40, 80), 6); }
UPB_INLINE void google_api_HttpRule_set_body(google_api_HttpRule *msg, upb_stringview value) { UPB_FIELD_AT(msg, upb_stringview, UPB_SIZE(8, 16)) = value; }
UPB_INLINE void google_api_HttpRule_set_custom(google_api_HttpRule *msg, google_api_CustomHttpPattern* value) { UPB_WRITE_ONEOF(msg, google_api_CustomHttpPattern*, UPB_SIZE(32, 64), value, UPB_SIZE(40, 80), 8); }
UPB_INLINE void google_api_HttpRule_set_additional_bindings(google_api_HttpRule *msg, upb_array* value) { UPB_FIELD_AT(msg, upb_array*, UPB_SIZE(24, 48)) = value; }
UPB_INLINE void google_api_HttpRule_set_response_body(google_api_HttpRule *msg, upb_stringview value) { UPB_FIELD_AT(msg, upb_stringview, UPB_SIZE(16, 32)) = value; }


/* google.api.CustomHttpPattern */

extern const upb_msglayout google_api_CustomHttpPattern_msginit;
UPB_INLINE google_api_CustomHttpPattern *google_api_CustomHttpPattern_new(upb_arena *arena) {
  return upb_msg_new(&google_api_CustomHttpPattern_msginit, arena);
}
UPB_INLINE google_api_CustomHttpPattern *google_api_CustomHttpPattern_parsenew(upb_stringview buf, upb_arena *arena) {
  google_api_CustomHttpPattern *ret = google_api_CustomHttpPattern_new(arena);
  return (ret && upb_decode(buf, ret, &google_api_CustomHttpPattern_msginit)) ? ret : NULL;
}
UPB_INLINE char *google_api_CustomHttpPattern_serialize(const google_api_CustomHttpPattern *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &google_api_CustomHttpPattern_msginit, arena, len);
}

UPB_INLINE upb_stringview google_api_CustomHttpPattern_kind(const google_api_CustomHttpPattern *msg) { return UPB_FIELD_AT(msg, upb_stringview, UPB_SIZE(0, 0)); }
UPB_INLINE upb_stringview google_api_CustomHttpPattern_path(const google_api_CustomHttpPattern *msg) { return UPB_FIELD_AT(msg, upb_stringview, UPB_SIZE(8, 16)); }

UPB_INLINE void google_api_CustomHttpPattern_set_kind(google_api_CustomHttpPattern *msg, upb_stringview value) { UPB_FIELD_AT(msg, upb_stringview, UPB_SIZE(0, 0)) = value; }
UPB_INLINE void google_api_CustomHttpPattern_set_path(google_api_CustomHttpPattern *msg, upb_stringview value) { UPB_FIELD_AT(msg, upb_stringview, UPB_SIZE(8, 16)) = value; }


UPB_END_EXTERN_C

#include "upb/port_undef.inc"

#endif  /* GOOGLE_API_HTTP_PROTO_UPB_H_ */
