/* This file was generated by upbc (the upb compiler) from the input
 * file:
 *
 *     envoy/config/filter/accesslog/v2/accesslog.proto
 *
 * Do not edit -- your changes will be discarded when the file is
 * regenerated. */

#ifndef ENVOY_CONFIG_FILTER_ACCESSLOG_V2_ACCESSLOG_PROTO_UPB_H_
#define ENVOY_CONFIG_FILTER_ACCESSLOG_V2_ACCESSLOG_PROTO_UPB_H_

#include "upb/generated_util.h"
#include "upb/msg.h"
#include "upb/decode.h"
#include "upb/encode.h"

#include "upb/port_def.inc"

#ifdef __cplusplus
extern "C" {
#endif

struct envoy_config_filter_accesslog_v2_AccessLog;
struct envoy_config_filter_accesslog_v2_AccessLogFilter;
struct envoy_config_filter_accesslog_v2_ComparisonFilter;
struct envoy_config_filter_accesslog_v2_StatusCodeFilter;
struct envoy_config_filter_accesslog_v2_DurationFilter;
struct envoy_config_filter_accesslog_v2_NotHealthCheckFilter;
struct envoy_config_filter_accesslog_v2_TraceableFilter;
struct envoy_config_filter_accesslog_v2_RuntimeFilter;
struct envoy_config_filter_accesslog_v2_AndFilter;
struct envoy_config_filter_accesslog_v2_OrFilter;
struct envoy_config_filter_accesslog_v2_HeaderFilter;
struct envoy_config_filter_accesslog_v2_ResponseFlagFilter;
struct envoy_config_filter_accesslog_v2_GrpcStatusFilter;
struct envoy_config_filter_accesslog_v2_ExtensionFilter;
typedef struct envoy_config_filter_accesslog_v2_AccessLog envoy_config_filter_accesslog_v2_AccessLog;
typedef struct envoy_config_filter_accesslog_v2_AccessLogFilter envoy_config_filter_accesslog_v2_AccessLogFilter;
typedef struct envoy_config_filter_accesslog_v2_ComparisonFilter envoy_config_filter_accesslog_v2_ComparisonFilter;
typedef struct envoy_config_filter_accesslog_v2_StatusCodeFilter envoy_config_filter_accesslog_v2_StatusCodeFilter;
typedef struct envoy_config_filter_accesslog_v2_DurationFilter envoy_config_filter_accesslog_v2_DurationFilter;
typedef struct envoy_config_filter_accesslog_v2_NotHealthCheckFilter envoy_config_filter_accesslog_v2_NotHealthCheckFilter;
typedef struct envoy_config_filter_accesslog_v2_TraceableFilter envoy_config_filter_accesslog_v2_TraceableFilter;
typedef struct envoy_config_filter_accesslog_v2_RuntimeFilter envoy_config_filter_accesslog_v2_RuntimeFilter;
typedef struct envoy_config_filter_accesslog_v2_AndFilter envoy_config_filter_accesslog_v2_AndFilter;
typedef struct envoy_config_filter_accesslog_v2_OrFilter envoy_config_filter_accesslog_v2_OrFilter;
typedef struct envoy_config_filter_accesslog_v2_HeaderFilter envoy_config_filter_accesslog_v2_HeaderFilter;
typedef struct envoy_config_filter_accesslog_v2_ResponseFlagFilter envoy_config_filter_accesslog_v2_ResponseFlagFilter;
typedef struct envoy_config_filter_accesslog_v2_GrpcStatusFilter envoy_config_filter_accesslog_v2_GrpcStatusFilter;
typedef struct envoy_config_filter_accesslog_v2_ExtensionFilter envoy_config_filter_accesslog_v2_ExtensionFilter;
extern const upb_msglayout envoy_config_filter_accesslog_v2_AccessLog_msginit;
extern const upb_msglayout envoy_config_filter_accesslog_v2_AccessLogFilter_msginit;
extern const upb_msglayout envoy_config_filter_accesslog_v2_ComparisonFilter_msginit;
extern const upb_msglayout envoy_config_filter_accesslog_v2_StatusCodeFilter_msginit;
extern const upb_msglayout envoy_config_filter_accesslog_v2_DurationFilter_msginit;
extern const upb_msglayout envoy_config_filter_accesslog_v2_NotHealthCheckFilter_msginit;
extern const upb_msglayout envoy_config_filter_accesslog_v2_TraceableFilter_msginit;
extern const upb_msglayout envoy_config_filter_accesslog_v2_RuntimeFilter_msginit;
extern const upb_msglayout envoy_config_filter_accesslog_v2_AndFilter_msginit;
extern const upb_msglayout envoy_config_filter_accesslog_v2_OrFilter_msginit;
extern const upb_msglayout envoy_config_filter_accesslog_v2_HeaderFilter_msginit;
extern const upb_msglayout envoy_config_filter_accesslog_v2_ResponseFlagFilter_msginit;
extern const upb_msglayout envoy_config_filter_accesslog_v2_GrpcStatusFilter_msginit;
extern const upb_msglayout envoy_config_filter_accesslog_v2_ExtensionFilter_msginit;
struct envoy_api_v2_core_RuntimeUInt32;
struct envoy_api_v2_route_HeaderMatcher;
struct envoy_type_FractionalPercent;
struct google_protobuf_Any;
struct google_protobuf_Struct;
extern const upb_msglayout envoy_api_v2_core_RuntimeUInt32_msginit;
extern const upb_msglayout envoy_api_v2_route_HeaderMatcher_msginit;
extern const upb_msglayout envoy_type_FractionalPercent_msginit;
extern const upb_msglayout google_protobuf_Any_msginit;
extern const upb_msglayout google_protobuf_Struct_msginit;

typedef enum {
  envoy_config_filter_accesslog_v2_ComparisonFilter_EQ = 0,
  envoy_config_filter_accesslog_v2_ComparisonFilter_GE = 1,
  envoy_config_filter_accesslog_v2_ComparisonFilter_LE = 2
} envoy_config_filter_accesslog_v2_ComparisonFilter_Op;

typedef enum {
  envoy_config_filter_accesslog_v2_GrpcStatusFilter_OK = 0,
  envoy_config_filter_accesslog_v2_GrpcStatusFilter_CANCELED = 1,
  envoy_config_filter_accesslog_v2_GrpcStatusFilter_UNKNOWN = 2,
  envoy_config_filter_accesslog_v2_GrpcStatusFilter_INVALID_ARGUMENT = 3,
  envoy_config_filter_accesslog_v2_GrpcStatusFilter_DEADLINE_EXCEEDED = 4,
  envoy_config_filter_accesslog_v2_GrpcStatusFilter_NOT_FOUND = 5,
  envoy_config_filter_accesslog_v2_GrpcStatusFilter_ALREADY_EXISTS = 6,
  envoy_config_filter_accesslog_v2_GrpcStatusFilter_PERMISSION_DENIED = 7,
  envoy_config_filter_accesslog_v2_GrpcStatusFilter_RESOURCE_EXHAUSTED = 8,
  envoy_config_filter_accesslog_v2_GrpcStatusFilter_FAILED_PRECONDITION = 9,
  envoy_config_filter_accesslog_v2_GrpcStatusFilter_ABORTED = 10,
  envoy_config_filter_accesslog_v2_GrpcStatusFilter_OUT_OF_RANGE = 11,
  envoy_config_filter_accesslog_v2_GrpcStatusFilter_UNIMPLEMENTED = 12,
  envoy_config_filter_accesslog_v2_GrpcStatusFilter_INTERNAL = 13,
  envoy_config_filter_accesslog_v2_GrpcStatusFilter_UNAVAILABLE = 14,
  envoy_config_filter_accesslog_v2_GrpcStatusFilter_DATA_LOSS = 15,
  envoy_config_filter_accesslog_v2_GrpcStatusFilter_UNAUTHENTICATED = 16
} envoy_config_filter_accesslog_v2_GrpcStatusFilter_Status;


/* envoy.config.filter.accesslog.v2.AccessLog */

UPB_INLINE envoy_config_filter_accesslog_v2_AccessLog *envoy_config_filter_accesslog_v2_AccessLog_new(upb_arena *arena) {
  return (envoy_config_filter_accesslog_v2_AccessLog *)upb_msg_new(&envoy_config_filter_accesslog_v2_AccessLog_msginit, arena);
}
UPB_INLINE envoy_config_filter_accesslog_v2_AccessLog *envoy_config_filter_accesslog_v2_AccessLog_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_config_filter_accesslog_v2_AccessLog *ret = envoy_config_filter_accesslog_v2_AccessLog_new(arena);
  return (ret && upb_decode(buf, size, ret, &envoy_config_filter_accesslog_v2_AccessLog_msginit, arena)) ? ret : NULL;
}
UPB_INLINE char *envoy_config_filter_accesslog_v2_AccessLog_serialize(const envoy_config_filter_accesslog_v2_AccessLog *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_config_filter_accesslog_v2_AccessLog_msginit, arena, len);
}

typedef enum {
  envoy_config_filter_accesslog_v2_AccessLog_config_type_config = 3,
  envoy_config_filter_accesslog_v2_AccessLog_config_type_typed_config = 4,
  envoy_config_filter_accesslog_v2_AccessLog_config_type_NOT_SET = 0
} envoy_config_filter_accesslog_v2_AccessLog_config_type_oneofcases;
UPB_INLINE envoy_config_filter_accesslog_v2_AccessLog_config_type_oneofcases envoy_config_filter_accesslog_v2_AccessLog_config_type_case(const envoy_config_filter_accesslog_v2_AccessLog* msg) { return (envoy_config_filter_accesslog_v2_AccessLog_config_type_oneofcases)UPB_FIELD_AT(msg, int32_t, UPB_SIZE(16, 32)); }

UPB_INLINE upb_strview envoy_config_filter_accesslog_v2_AccessLog_name(const envoy_config_filter_accesslog_v2_AccessLog *msg) { return UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(0, 0)); }
UPB_INLINE const envoy_config_filter_accesslog_v2_AccessLogFilter* envoy_config_filter_accesslog_v2_AccessLog_filter(const envoy_config_filter_accesslog_v2_AccessLog *msg) { return UPB_FIELD_AT(msg, const envoy_config_filter_accesslog_v2_AccessLogFilter*, UPB_SIZE(8, 16)); }
UPB_INLINE bool envoy_config_filter_accesslog_v2_AccessLog_has_config(const envoy_config_filter_accesslog_v2_AccessLog *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(16, 32), 3); }
UPB_INLINE const struct google_protobuf_Struct* envoy_config_filter_accesslog_v2_AccessLog_config(const envoy_config_filter_accesslog_v2_AccessLog *msg) { return UPB_READ_ONEOF(msg, const struct google_protobuf_Struct*, UPB_SIZE(12, 24), UPB_SIZE(16, 32), 3, NULL); }
UPB_INLINE bool envoy_config_filter_accesslog_v2_AccessLog_has_typed_config(const envoy_config_filter_accesslog_v2_AccessLog *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(16, 32), 4); }
UPB_INLINE const struct google_protobuf_Any* envoy_config_filter_accesslog_v2_AccessLog_typed_config(const envoy_config_filter_accesslog_v2_AccessLog *msg) { return UPB_READ_ONEOF(msg, const struct google_protobuf_Any*, UPB_SIZE(12, 24), UPB_SIZE(16, 32), 4, NULL); }

UPB_INLINE void envoy_config_filter_accesslog_v2_AccessLog_set_name(envoy_config_filter_accesslog_v2_AccessLog *msg, upb_strview value) {
  UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(0, 0)) = value;
}
UPB_INLINE void envoy_config_filter_accesslog_v2_AccessLog_set_filter(envoy_config_filter_accesslog_v2_AccessLog *msg, envoy_config_filter_accesslog_v2_AccessLogFilter* value) {
  UPB_FIELD_AT(msg, envoy_config_filter_accesslog_v2_AccessLogFilter*, UPB_SIZE(8, 16)) = value;
}
UPB_INLINE struct envoy_config_filter_accesslog_v2_AccessLogFilter* envoy_config_filter_accesslog_v2_AccessLog_mutable_filter(envoy_config_filter_accesslog_v2_AccessLog *msg, upb_arena *arena) {
  struct envoy_config_filter_accesslog_v2_AccessLogFilter* sub = (struct envoy_config_filter_accesslog_v2_AccessLogFilter*)envoy_config_filter_accesslog_v2_AccessLog_filter(msg);
  if (sub == NULL) {
    sub = (struct envoy_config_filter_accesslog_v2_AccessLogFilter*)upb_msg_new(&envoy_config_filter_accesslog_v2_AccessLogFilter_msginit, arena);
    if (!sub) return NULL;
    envoy_config_filter_accesslog_v2_AccessLog_set_filter(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_config_filter_accesslog_v2_AccessLog_set_config(envoy_config_filter_accesslog_v2_AccessLog *msg, struct google_protobuf_Struct* value) {
  UPB_WRITE_ONEOF(msg, struct google_protobuf_Struct*, UPB_SIZE(12, 24), value, UPB_SIZE(16, 32), 3);
}
UPB_INLINE struct google_protobuf_Struct* envoy_config_filter_accesslog_v2_AccessLog_mutable_config(envoy_config_filter_accesslog_v2_AccessLog *msg, upb_arena *arena) {
  struct google_protobuf_Struct* sub = (struct google_protobuf_Struct*)envoy_config_filter_accesslog_v2_AccessLog_config(msg);
  if (sub == NULL) {
    sub = (struct google_protobuf_Struct*)upb_msg_new(&google_protobuf_Struct_msginit, arena);
    if (!sub) return NULL;
    envoy_config_filter_accesslog_v2_AccessLog_set_config(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_config_filter_accesslog_v2_AccessLog_set_typed_config(envoy_config_filter_accesslog_v2_AccessLog *msg, struct google_protobuf_Any* value) {
  UPB_WRITE_ONEOF(msg, struct google_protobuf_Any*, UPB_SIZE(12, 24), value, UPB_SIZE(16, 32), 4);
}
UPB_INLINE struct google_protobuf_Any* envoy_config_filter_accesslog_v2_AccessLog_mutable_typed_config(envoy_config_filter_accesslog_v2_AccessLog *msg, upb_arena *arena) {
  struct google_protobuf_Any* sub = (struct google_protobuf_Any*)envoy_config_filter_accesslog_v2_AccessLog_typed_config(msg);
  if (sub == NULL) {
    sub = (struct google_protobuf_Any*)upb_msg_new(&google_protobuf_Any_msginit, arena);
    if (!sub) return NULL;
    envoy_config_filter_accesslog_v2_AccessLog_set_typed_config(msg, sub);
  }
  return sub;
}

/* envoy.config.filter.accesslog.v2.AccessLogFilter */

UPB_INLINE envoy_config_filter_accesslog_v2_AccessLogFilter *envoy_config_filter_accesslog_v2_AccessLogFilter_new(upb_arena *arena) {
  return (envoy_config_filter_accesslog_v2_AccessLogFilter *)upb_msg_new(&envoy_config_filter_accesslog_v2_AccessLogFilter_msginit, arena);
}
UPB_INLINE envoy_config_filter_accesslog_v2_AccessLogFilter *envoy_config_filter_accesslog_v2_AccessLogFilter_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_config_filter_accesslog_v2_AccessLogFilter *ret = envoy_config_filter_accesslog_v2_AccessLogFilter_new(arena);
  return (ret && upb_decode(buf, size, ret, &envoy_config_filter_accesslog_v2_AccessLogFilter_msginit, arena)) ? ret : NULL;
}
UPB_INLINE char *envoy_config_filter_accesslog_v2_AccessLogFilter_serialize(const envoy_config_filter_accesslog_v2_AccessLogFilter *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_config_filter_accesslog_v2_AccessLogFilter_msginit, arena, len);
}

typedef enum {
  envoy_config_filter_accesslog_v2_AccessLogFilter_filter_specifier_status_code_filter = 1,
  envoy_config_filter_accesslog_v2_AccessLogFilter_filter_specifier_duration_filter = 2,
  envoy_config_filter_accesslog_v2_AccessLogFilter_filter_specifier_not_health_check_filter = 3,
  envoy_config_filter_accesslog_v2_AccessLogFilter_filter_specifier_traceable_filter = 4,
  envoy_config_filter_accesslog_v2_AccessLogFilter_filter_specifier_runtime_filter = 5,
  envoy_config_filter_accesslog_v2_AccessLogFilter_filter_specifier_and_filter = 6,
  envoy_config_filter_accesslog_v2_AccessLogFilter_filter_specifier_or_filter = 7,
  envoy_config_filter_accesslog_v2_AccessLogFilter_filter_specifier_header_filter = 8,
  envoy_config_filter_accesslog_v2_AccessLogFilter_filter_specifier_response_flag_filter = 9,
  envoy_config_filter_accesslog_v2_AccessLogFilter_filter_specifier_grpc_status_filter = 10,
  envoy_config_filter_accesslog_v2_AccessLogFilter_filter_specifier_extension_filter = 11,
  envoy_config_filter_accesslog_v2_AccessLogFilter_filter_specifier_NOT_SET = 0
} envoy_config_filter_accesslog_v2_AccessLogFilter_filter_specifier_oneofcases;
UPB_INLINE envoy_config_filter_accesslog_v2_AccessLogFilter_filter_specifier_oneofcases envoy_config_filter_accesslog_v2_AccessLogFilter_filter_specifier_case(const envoy_config_filter_accesslog_v2_AccessLogFilter* msg) { return (envoy_config_filter_accesslog_v2_AccessLogFilter_filter_specifier_oneofcases)UPB_FIELD_AT(msg, int32_t, UPB_SIZE(4, 8)); }

UPB_INLINE bool envoy_config_filter_accesslog_v2_AccessLogFilter_has_status_code_filter(const envoy_config_filter_accesslog_v2_AccessLogFilter *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(4, 8), 1); }
UPB_INLINE const envoy_config_filter_accesslog_v2_StatusCodeFilter* envoy_config_filter_accesslog_v2_AccessLogFilter_status_code_filter(const envoy_config_filter_accesslog_v2_AccessLogFilter *msg) { return UPB_READ_ONEOF(msg, const envoy_config_filter_accesslog_v2_StatusCodeFilter*, UPB_SIZE(0, 0), UPB_SIZE(4, 8), 1, NULL); }
UPB_INLINE bool envoy_config_filter_accesslog_v2_AccessLogFilter_has_duration_filter(const envoy_config_filter_accesslog_v2_AccessLogFilter *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(4, 8), 2); }
UPB_INLINE const envoy_config_filter_accesslog_v2_DurationFilter* envoy_config_filter_accesslog_v2_AccessLogFilter_duration_filter(const envoy_config_filter_accesslog_v2_AccessLogFilter *msg) { return UPB_READ_ONEOF(msg, const envoy_config_filter_accesslog_v2_DurationFilter*, UPB_SIZE(0, 0), UPB_SIZE(4, 8), 2, NULL); }
UPB_INLINE bool envoy_config_filter_accesslog_v2_AccessLogFilter_has_not_health_check_filter(const envoy_config_filter_accesslog_v2_AccessLogFilter *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(4, 8), 3); }
UPB_INLINE const envoy_config_filter_accesslog_v2_NotHealthCheckFilter* envoy_config_filter_accesslog_v2_AccessLogFilter_not_health_check_filter(const envoy_config_filter_accesslog_v2_AccessLogFilter *msg) { return UPB_READ_ONEOF(msg, const envoy_config_filter_accesslog_v2_NotHealthCheckFilter*, UPB_SIZE(0, 0), UPB_SIZE(4, 8), 3, NULL); }
UPB_INLINE bool envoy_config_filter_accesslog_v2_AccessLogFilter_has_traceable_filter(const envoy_config_filter_accesslog_v2_AccessLogFilter *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(4, 8), 4); }
UPB_INLINE const envoy_config_filter_accesslog_v2_TraceableFilter* envoy_config_filter_accesslog_v2_AccessLogFilter_traceable_filter(const envoy_config_filter_accesslog_v2_AccessLogFilter *msg) { return UPB_READ_ONEOF(msg, const envoy_config_filter_accesslog_v2_TraceableFilter*, UPB_SIZE(0, 0), UPB_SIZE(4, 8), 4, NULL); }
UPB_INLINE bool envoy_config_filter_accesslog_v2_AccessLogFilter_has_runtime_filter(const envoy_config_filter_accesslog_v2_AccessLogFilter *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(4, 8), 5); }
UPB_INLINE const envoy_config_filter_accesslog_v2_RuntimeFilter* envoy_config_filter_accesslog_v2_AccessLogFilter_runtime_filter(const envoy_config_filter_accesslog_v2_AccessLogFilter *msg) { return UPB_READ_ONEOF(msg, const envoy_config_filter_accesslog_v2_RuntimeFilter*, UPB_SIZE(0, 0), UPB_SIZE(4, 8), 5, NULL); }
UPB_INLINE bool envoy_config_filter_accesslog_v2_AccessLogFilter_has_and_filter(const envoy_config_filter_accesslog_v2_AccessLogFilter *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(4, 8), 6); }
UPB_INLINE const envoy_config_filter_accesslog_v2_AndFilter* envoy_config_filter_accesslog_v2_AccessLogFilter_and_filter(const envoy_config_filter_accesslog_v2_AccessLogFilter *msg) { return UPB_READ_ONEOF(msg, const envoy_config_filter_accesslog_v2_AndFilter*, UPB_SIZE(0, 0), UPB_SIZE(4, 8), 6, NULL); }
UPB_INLINE bool envoy_config_filter_accesslog_v2_AccessLogFilter_has_or_filter(const envoy_config_filter_accesslog_v2_AccessLogFilter *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(4, 8), 7); }
UPB_INLINE const envoy_config_filter_accesslog_v2_OrFilter* envoy_config_filter_accesslog_v2_AccessLogFilter_or_filter(const envoy_config_filter_accesslog_v2_AccessLogFilter *msg) { return UPB_READ_ONEOF(msg, const envoy_config_filter_accesslog_v2_OrFilter*, UPB_SIZE(0, 0), UPB_SIZE(4, 8), 7, NULL); }
UPB_INLINE bool envoy_config_filter_accesslog_v2_AccessLogFilter_has_header_filter(const envoy_config_filter_accesslog_v2_AccessLogFilter *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(4, 8), 8); }
UPB_INLINE const envoy_config_filter_accesslog_v2_HeaderFilter* envoy_config_filter_accesslog_v2_AccessLogFilter_header_filter(const envoy_config_filter_accesslog_v2_AccessLogFilter *msg) { return UPB_READ_ONEOF(msg, const envoy_config_filter_accesslog_v2_HeaderFilter*, UPB_SIZE(0, 0), UPB_SIZE(4, 8), 8, NULL); }
UPB_INLINE bool envoy_config_filter_accesslog_v2_AccessLogFilter_has_response_flag_filter(const envoy_config_filter_accesslog_v2_AccessLogFilter *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(4, 8), 9); }
UPB_INLINE const envoy_config_filter_accesslog_v2_ResponseFlagFilter* envoy_config_filter_accesslog_v2_AccessLogFilter_response_flag_filter(const envoy_config_filter_accesslog_v2_AccessLogFilter *msg) { return UPB_READ_ONEOF(msg, const envoy_config_filter_accesslog_v2_ResponseFlagFilter*, UPB_SIZE(0, 0), UPB_SIZE(4, 8), 9, NULL); }
UPB_INLINE bool envoy_config_filter_accesslog_v2_AccessLogFilter_has_grpc_status_filter(const envoy_config_filter_accesslog_v2_AccessLogFilter *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(4, 8), 10); }
UPB_INLINE const envoy_config_filter_accesslog_v2_GrpcStatusFilter* envoy_config_filter_accesslog_v2_AccessLogFilter_grpc_status_filter(const envoy_config_filter_accesslog_v2_AccessLogFilter *msg) { return UPB_READ_ONEOF(msg, const envoy_config_filter_accesslog_v2_GrpcStatusFilter*, UPB_SIZE(0, 0), UPB_SIZE(4, 8), 10, NULL); }
UPB_INLINE bool envoy_config_filter_accesslog_v2_AccessLogFilter_has_extension_filter(const envoy_config_filter_accesslog_v2_AccessLogFilter *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(4, 8), 11); }
UPB_INLINE const envoy_config_filter_accesslog_v2_ExtensionFilter* envoy_config_filter_accesslog_v2_AccessLogFilter_extension_filter(const envoy_config_filter_accesslog_v2_AccessLogFilter *msg) { return UPB_READ_ONEOF(msg, const envoy_config_filter_accesslog_v2_ExtensionFilter*, UPB_SIZE(0, 0), UPB_SIZE(4, 8), 11, NULL); }

UPB_INLINE void envoy_config_filter_accesslog_v2_AccessLogFilter_set_status_code_filter(envoy_config_filter_accesslog_v2_AccessLogFilter *msg, envoy_config_filter_accesslog_v2_StatusCodeFilter* value) {
  UPB_WRITE_ONEOF(msg, envoy_config_filter_accesslog_v2_StatusCodeFilter*, UPB_SIZE(0, 0), value, UPB_SIZE(4, 8), 1);
}
UPB_INLINE struct envoy_config_filter_accesslog_v2_StatusCodeFilter* envoy_config_filter_accesslog_v2_AccessLogFilter_mutable_status_code_filter(envoy_config_filter_accesslog_v2_AccessLogFilter *msg, upb_arena *arena) {
  struct envoy_config_filter_accesslog_v2_StatusCodeFilter* sub = (struct envoy_config_filter_accesslog_v2_StatusCodeFilter*)envoy_config_filter_accesslog_v2_AccessLogFilter_status_code_filter(msg);
  if (sub == NULL) {
    sub = (struct envoy_config_filter_accesslog_v2_StatusCodeFilter*)upb_msg_new(&envoy_config_filter_accesslog_v2_StatusCodeFilter_msginit, arena);
    if (!sub) return NULL;
    envoy_config_filter_accesslog_v2_AccessLogFilter_set_status_code_filter(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_config_filter_accesslog_v2_AccessLogFilter_set_duration_filter(envoy_config_filter_accesslog_v2_AccessLogFilter *msg, envoy_config_filter_accesslog_v2_DurationFilter* value) {
  UPB_WRITE_ONEOF(msg, envoy_config_filter_accesslog_v2_DurationFilter*, UPB_SIZE(0, 0), value, UPB_SIZE(4, 8), 2);
}
UPB_INLINE struct envoy_config_filter_accesslog_v2_DurationFilter* envoy_config_filter_accesslog_v2_AccessLogFilter_mutable_duration_filter(envoy_config_filter_accesslog_v2_AccessLogFilter *msg, upb_arena *arena) {
  struct envoy_config_filter_accesslog_v2_DurationFilter* sub = (struct envoy_config_filter_accesslog_v2_DurationFilter*)envoy_config_filter_accesslog_v2_AccessLogFilter_duration_filter(msg);
  if (sub == NULL) {
    sub = (struct envoy_config_filter_accesslog_v2_DurationFilter*)upb_msg_new(&envoy_config_filter_accesslog_v2_DurationFilter_msginit, arena);
    if (!sub) return NULL;
    envoy_config_filter_accesslog_v2_AccessLogFilter_set_duration_filter(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_config_filter_accesslog_v2_AccessLogFilter_set_not_health_check_filter(envoy_config_filter_accesslog_v2_AccessLogFilter *msg, envoy_config_filter_accesslog_v2_NotHealthCheckFilter* value) {
  UPB_WRITE_ONEOF(msg, envoy_config_filter_accesslog_v2_NotHealthCheckFilter*, UPB_SIZE(0, 0), value, UPB_SIZE(4, 8), 3);
}
UPB_INLINE struct envoy_config_filter_accesslog_v2_NotHealthCheckFilter* envoy_config_filter_accesslog_v2_AccessLogFilter_mutable_not_health_check_filter(envoy_config_filter_accesslog_v2_AccessLogFilter *msg, upb_arena *arena) {
  struct envoy_config_filter_accesslog_v2_NotHealthCheckFilter* sub = (struct envoy_config_filter_accesslog_v2_NotHealthCheckFilter*)envoy_config_filter_accesslog_v2_AccessLogFilter_not_health_check_filter(msg);
  if (sub == NULL) {
    sub = (struct envoy_config_filter_accesslog_v2_NotHealthCheckFilter*)upb_msg_new(&envoy_config_filter_accesslog_v2_NotHealthCheckFilter_msginit, arena);
    if (!sub) return NULL;
    envoy_config_filter_accesslog_v2_AccessLogFilter_set_not_health_check_filter(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_config_filter_accesslog_v2_AccessLogFilter_set_traceable_filter(envoy_config_filter_accesslog_v2_AccessLogFilter *msg, envoy_config_filter_accesslog_v2_TraceableFilter* value) {
  UPB_WRITE_ONEOF(msg, envoy_config_filter_accesslog_v2_TraceableFilter*, UPB_SIZE(0, 0), value, UPB_SIZE(4, 8), 4);
}
UPB_INLINE struct envoy_config_filter_accesslog_v2_TraceableFilter* envoy_config_filter_accesslog_v2_AccessLogFilter_mutable_traceable_filter(envoy_config_filter_accesslog_v2_AccessLogFilter *msg, upb_arena *arena) {
  struct envoy_config_filter_accesslog_v2_TraceableFilter* sub = (struct envoy_config_filter_accesslog_v2_TraceableFilter*)envoy_config_filter_accesslog_v2_AccessLogFilter_traceable_filter(msg);
  if (sub == NULL) {
    sub = (struct envoy_config_filter_accesslog_v2_TraceableFilter*)upb_msg_new(&envoy_config_filter_accesslog_v2_TraceableFilter_msginit, arena);
    if (!sub) return NULL;
    envoy_config_filter_accesslog_v2_AccessLogFilter_set_traceable_filter(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_config_filter_accesslog_v2_AccessLogFilter_set_runtime_filter(envoy_config_filter_accesslog_v2_AccessLogFilter *msg, envoy_config_filter_accesslog_v2_RuntimeFilter* value) {
  UPB_WRITE_ONEOF(msg, envoy_config_filter_accesslog_v2_RuntimeFilter*, UPB_SIZE(0, 0), value, UPB_SIZE(4, 8), 5);
}
UPB_INLINE struct envoy_config_filter_accesslog_v2_RuntimeFilter* envoy_config_filter_accesslog_v2_AccessLogFilter_mutable_runtime_filter(envoy_config_filter_accesslog_v2_AccessLogFilter *msg, upb_arena *arena) {
  struct envoy_config_filter_accesslog_v2_RuntimeFilter* sub = (struct envoy_config_filter_accesslog_v2_RuntimeFilter*)envoy_config_filter_accesslog_v2_AccessLogFilter_runtime_filter(msg);
  if (sub == NULL) {
    sub = (struct envoy_config_filter_accesslog_v2_RuntimeFilter*)upb_msg_new(&envoy_config_filter_accesslog_v2_RuntimeFilter_msginit, arena);
    if (!sub) return NULL;
    envoy_config_filter_accesslog_v2_AccessLogFilter_set_runtime_filter(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_config_filter_accesslog_v2_AccessLogFilter_set_and_filter(envoy_config_filter_accesslog_v2_AccessLogFilter *msg, envoy_config_filter_accesslog_v2_AndFilter* value) {
  UPB_WRITE_ONEOF(msg, envoy_config_filter_accesslog_v2_AndFilter*, UPB_SIZE(0, 0), value, UPB_SIZE(4, 8), 6);
}
UPB_INLINE struct envoy_config_filter_accesslog_v2_AndFilter* envoy_config_filter_accesslog_v2_AccessLogFilter_mutable_and_filter(envoy_config_filter_accesslog_v2_AccessLogFilter *msg, upb_arena *arena) {
  struct envoy_config_filter_accesslog_v2_AndFilter* sub = (struct envoy_config_filter_accesslog_v2_AndFilter*)envoy_config_filter_accesslog_v2_AccessLogFilter_and_filter(msg);
  if (sub == NULL) {
    sub = (struct envoy_config_filter_accesslog_v2_AndFilter*)upb_msg_new(&envoy_config_filter_accesslog_v2_AndFilter_msginit, arena);
    if (!sub) return NULL;
    envoy_config_filter_accesslog_v2_AccessLogFilter_set_and_filter(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_config_filter_accesslog_v2_AccessLogFilter_set_or_filter(envoy_config_filter_accesslog_v2_AccessLogFilter *msg, envoy_config_filter_accesslog_v2_OrFilter* value) {
  UPB_WRITE_ONEOF(msg, envoy_config_filter_accesslog_v2_OrFilter*, UPB_SIZE(0, 0), value, UPB_SIZE(4, 8), 7);
}
UPB_INLINE struct envoy_config_filter_accesslog_v2_OrFilter* envoy_config_filter_accesslog_v2_AccessLogFilter_mutable_or_filter(envoy_config_filter_accesslog_v2_AccessLogFilter *msg, upb_arena *arena) {
  struct envoy_config_filter_accesslog_v2_OrFilter* sub = (struct envoy_config_filter_accesslog_v2_OrFilter*)envoy_config_filter_accesslog_v2_AccessLogFilter_or_filter(msg);
  if (sub == NULL) {
    sub = (struct envoy_config_filter_accesslog_v2_OrFilter*)upb_msg_new(&envoy_config_filter_accesslog_v2_OrFilter_msginit, arena);
    if (!sub) return NULL;
    envoy_config_filter_accesslog_v2_AccessLogFilter_set_or_filter(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_config_filter_accesslog_v2_AccessLogFilter_set_header_filter(envoy_config_filter_accesslog_v2_AccessLogFilter *msg, envoy_config_filter_accesslog_v2_HeaderFilter* value) {
  UPB_WRITE_ONEOF(msg, envoy_config_filter_accesslog_v2_HeaderFilter*, UPB_SIZE(0, 0), value, UPB_SIZE(4, 8), 8);
}
UPB_INLINE struct envoy_config_filter_accesslog_v2_HeaderFilter* envoy_config_filter_accesslog_v2_AccessLogFilter_mutable_header_filter(envoy_config_filter_accesslog_v2_AccessLogFilter *msg, upb_arena *arena) {
  struct envoy_config_filter_accesslog_v2_HeaderFilter* sub = (struct envoy_config_filter_accesslog_v2_HeaderFilter*)envoy_config_filter_accesslog_v2_AccessLogFilter_header_filter(msg);
  if (sub == NULL) {
    sub = (struct envoy_config_filter_accesslog_v2_HeaderFilter*)upb_msg_new(&envoy_config_filter_accesslog_v2_HeaderFilter_msginit, arena);
    if (!sub) return NULL;
    envoy_config_filter_accesslog_v2_AccessLogFilter_set_header_filter(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_config_filter_accesslog_v2_AccessLogFilter_set_response_flag_filter(envoy_config_filter_accesslog_v2_AccessLogFilter *msg, envoy_config_filter_accesslog_v2_ResponseFlagFilter* value) {
  UPB_WRITE_ONEOF(msg, envoy_config_filter_accesslog_v2_ResponseFlagFilter*, UPB_SIZE(0, 0), value, UPB_SIZE(4, 8), 9);
}
UPB_INLINE struct envoy_config_filter_accesslog_v2_ResponseFlagFilter* envoy_config_filter_accesslog_v2_AccessLogFilter_mutable_response_flag_filter(envoy_config_filter_accesslog_v2_AccessLogFilter *msg, upb_arena *arena) {
  struct envoy_config_filter_accesslog_v2_ResponseFlagFilter* sub = (struct envoy_config_filter_accesslog_v2_ResponseFlagFilter*)envoy_config_filter_accesslog_v2_AccessLogFilter_response_flag_filter(msg);
  if (sub == NULL) {
    sub = (struct envoy_config_filter_accesslog_v2_ResponseFlagFilter*)upb_msg_new(&envoy_config_filter_accesslog_v2_ResponseFlagFilter_msginit, arena);
    if (!sub) return NULL;
    envoy_config_filter_accesslog_v2_AccessLogFilter_set_response_flag_filter(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_config_filter_accesslog_v2_AccessLogFilter_set_grpc_status_filter(envoy_config_filter_accesslog_v2_AccessLogFilter *msg, envoy_config_filter_accesslog_v2_GrpcStatusFilter* value) {
  UPB_WRITE_ONEOF(msg, envoy_config_filter_accesslog_v2_GrpcStatusFilter*, UPB_SIZE(0, 0), value, UPB_SIZE(4, 8), 10);
}
UPB_INLINE struct envoy_config_filter_accesslog_v2_GrpcStatusFilter* envoy_config_filter_accesslog_v2_AccessLogFilter_mutable_grpc_status_filter(envoy_config_filter_accesslog_v2_AccessLogFilter *msg, upb_arena *arena) {
  struct envoy_config_filter_accesslog_v2_GrpcStatusFilter* sub = (struct envoy_config_filter_accesslog_v2_GrpcStatusFilter*)envoy_config_filter_accesslog_v2_AccessLogFilter_grpc_status_filter(msg);
  if (sub == NULL) {
    sub = (struct envoy_config_filter_accesslog_v2_GrpcStatusFilter*)upb_msg_new(&envoy_config_filter_accesslog_v2_GrpcStatusFilter_msginit, arena);
    if (!sub) return NULL;
    envoy_config_filter_accesslog_v2_AccessLogFilter_set_grpc_status_filter(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_config_filter_accesslog_v2_AccessLogFilter_set_extension_filter(envoy_config_filter_accesslog_v2_AccessLogFilter *msg, envoy_config_filter_accesslog_v2_ExtensionFilter* value) {
  UPB_WRITE_ONEOF(msg, envoy_config_filter_accesslog_v2_ExtensionFilter*, UPB_SIZE(0, 0), value, UPB_SIZE(4, 8), 11);
}
UPB_INLINE struct envoy_config_filter_accesslog_v2_ExtensionFilter* envoy_config_filter_accesslog_v2_AccessLogFilter_mutable_extension_filter(envoy_config_filter_accesslog_v2_AccessLogFilter *msg, upb_arena *arena) {
  struct envoy_config_filter_accesslog_v2_ExtensionFilter* sub = (struct envoy_config_filter_accesslog_v2_ExtensionFilter*)envoy_config_filter_accesslog_v2_AccessLogFilter_extension_filter(msg);
  if (sub == NULL) {
    sub = (struct envoy_config_filter_accesslog_v2_ExtensionFilter*)upb_msg_new(&envoy_config_filter_accesslog_v2_ExtensionFilter_msginit, arena);
    if (!sub) return NULL;
    envoy_config_filter_accesslog_v2_AccessLogFilter_set_extension_filter(msg, sub);
  }
  return sub;
}

/* envoy.config.filter.accesslog.v2.ComparisonFilter */

UPB_INLINE envoy_config_filter_accesslog_v2_ComparisonFilter *envoy_config_filter_accesslog_v2_ComparisonFilter_new(upb_arena *arena) {
  return (envoy_config_filter_accesslog_v2_ComparisonFilter *)upb_msg_new(&envoy_config_filter_accesslog_v2_ComparisonFilter_msginit, arena);
}
UPB_INLINE envoy_config_filter_accesslog_v2_ComparisonFilter *envoy_config_filter_accesslog_v2_ComparisonFilter_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_config_filter_accesslog_v2_ComparisonFilter *ret = envoy_config_filter_accesslog_v2_ComparisonFilter_new(arena);
  return (ret && upb_decode(buf, size, ret, &envoy_config_filter_accesslog_v2_ComparisonFilter_msginit, arena)) ? ret : NULL;
}
UPB_INLINE char *envoy_config_filter_accesslog_v2_ComparisonFilter_serialize(const envoy_config_filter_accesslog_v2_ComparisonFilter *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_config_filter_accesslog_v2_ComparisonFilter_msginit, arena, len);
}

UPB_INLINE int32_t envoy_config_filter_accesslog_v2_ComparisonFilter_op(const envoy_config_filter_accesslog_v2_ComparisonFilter *msg) { return UPB_FIELD_AT(msg, int32_t, UPB_SIZE(0, 0)); }
UPB_INLINE const struct envoy_api_v2_core_RuntimeUInt32* envoy_config_filter_accesslog_v2_ComparisonFilter_value(const envoy_config_filter_accesslog_v2_ComparisonFilter *msg) { return UPB_FIELD_AT(msg, const struct envoy_api_v2_core_RuntimeUInt32*, UPB_SIZE(8, 8)); }

UPB_INLINE void envoy_config_filter_accesslog_v2_ComparisonFilter_set_op(envoy_config_filter_accesslog_v2_ComparisonFilter *msg, int32_t value) {
  UPB_FIELD_AT(msg, int32_t, UPB_SIZE(0, 0)) = value;
}
UPB_INLINE void envoy_config_filter_accesslog_v2_ComparisonFilter_set_value(envoy_config_filter_accesslog_v2_ComparisonFilter *msg, struct envoy_api_v2_core_RuntimeUInt32* value) {
  UPB_FIELD_AT(msg, struct envoy_api_v2_core_RuntimeUInt32*, UPB_SIZE(8, 8)) = value;
}
UPB_INLINE struct envoy_api_v2_core_RuntimeUInt32* envoy_config_filter_accesslog_v2_ComparisonFilter_mutable_value(envoy_config_filter_accesslog_v2_ComparisonFilter *msg, upb_arena *arena) {
  struct envoy_api_v2_core_RuntimeUInt32* sub = (struct envoy_api_v2_core_RuntimeUInt32*)envoy_config_filter_accesslog_v2_ComparisonFilter_value(msg);
  if (sub == NULL) {
    sub = (struct envoy_api_v2_core_RuntimeUInt32*)upb_msg_new(&envoy_api_v2_core_RuntimeUInt32_msginit, arena);
    if (!sub) return NULL;
    envoy_config_filter_accesslog_v2_ComparisonFilter_set_value(msg, sub);
  }
  return sub;
}

/* envoy.config.filter.accesslog.v2.StatusCodeFilter */

UPB_INLINE envoy_config_filter_accesslog_v2_StatusCodeFilter *envoy_config_filter_accesslog_v2_StatusCodeFilter_new(upb_arena *arena) {
  return (envoy_config_filter_accesslog_v2_StatusCodeFilter *)upb_msg_new(&envoy_config_filter_accesslog_v2_StatusCodeFilter_msginit, arena);
}
UPB_INLINE envoy_config_filter_accesslog_v2_StatusCodeFilter *envoy_config_filter_accesslog_v2_StatusCodeFilter_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_config_filter_accesslog_v2_StatusCodeFilter *ret = envoy_config_filter_accesslog_v2_StatusCodeFilter_new(arena);
  return (ret && upb_decode(buf, size, ret, &envoy_config_filter_accesslog_v2_StatusCodeFilter_msginit, arena)) ? ret : NULL;
}
UPB_INLINE char *envoy_config_filter_accesslog_v2_StatusCodeFilter_serialize(const envoy_config_filter_accesslog_v2_StatusCodeFilter *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_config_filter_accesslog_v2_StatusCodeFilter_msginit, arena, len);
}

UPB_INLINE const envoy_config_filter_accesslog_v2_ComparisonFilter* envoy_config_filter_accesslog_v2_StatusCodeFilter_comparison(const envoy_config_filter_accesslog_v2_StatusCodeFilter *msg) { return UPB_FIELD_AT(msg, const envoy_config_filter_accesslog_v2_ComparisonFilter*, UPB_SIZE(0, 0)); }

UPB_INLINE void envoy_config_filter_accesslog_v2_StatusCodeFilter_set_comparison(envoy_config_filter_accesslog_v2_StatusCodeFilter *msg, envoy_config_filter_accesslog_v2_ComparisonFilter* value) {
  UPB_FIELD_AT(msg, envoy_config_filter_accesslog_v2_ComparisonFilter*, UPB_SIZE(0, 0)) = value;
}
UPB_INLINE struct envoy_config_filter_accesslog_v2_ComparisonFilter* envoy_config_filter_accesslog_v2_StatusCodeFilter_mutable_comparison(envoy_config_filter_accesslog_v2_StatusCodeFilter *msg, upb_arena *arena) {
  struct envoy_config_filter_accesslog_v2_ComparisonFilter* sub = (struct envoy_config_filter_accesslog_v2_ComparisonFilter*)envoy_config_filter_accesslog_v2_StatusCodeFilter_comparison(msg);
  if (sub == NULL) {
    sub = (struct envoy_config_filter_accesslog_v2_ComparisonFilter*)upb_msg_new(&envoy_config_filter_accesslog_v2_ComparisonFilter_msginit, arena);
    if (!sub) return NULL;
    envoy_config_filter_accesslog_v2_StatusCodeFilter_set_comparison(msg, sub);
  }
  return sub;
}

/* envoy.config.filter.accesslog.v2.DurationFilter */

UPB_INLINE envoy_config_filter_accesslog_v2_DurationFilter *envoy_config_filter_accesslog_v2_DurationFilter_new(upb_arena *arena) {
  return (envoy_config_filter_accesslog_v2_DurationFilter *)upb_msg_new(&envoy_config_filter_accesslog_v2_DurationFilter_msginit, arena);
}
UPB_INLINE envoy_config_filter_accesslog_v2_DurationFilter *envoy_config_filter_accesslog_v2_DurationFilter_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_config_filter_accesslog_v2_DurationFilter *ret = envoy_config_filter_accesslog_v2_DurationFilter_new(arena);
  return (ret && upb_decode(buf, size, ret, &envoy_config_filter_accesslog_v2_DurationFilter_msginit, arena)) ? ret : NULL;
}
UPB_INLINE char *envoy_config_filter_accesslog_v2_DurationFilter_serialize(const envoy_config_filter_accesslog_v2_DurationFilter *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_config_filter_accesslog_v2_DurationFilter_msginit, arena, len);
}

UPB_INLINE const envoy_config_filter_accesslog_v2_ComparisonFilter* envoy_config_filter_accesslog_v2_DurationFilter_comparison(const envoy_config_filter_accesslog_v2_DurationFilter *msg) { return UPB_FIELD_AT(msg, const envoy_config_filter_accesslog_v2_ComparisonFilter*, UPB_SIZE(0, 0)); }

UPB_INLINE void envoy_config_filter_accesslog_v2_DurationFilter_set_comparison(envoy_config_filter_accesslog_v2_DurationFilter *msg, envoy_config_filter_accesslog_v2_ComparisonFilter* value) {
  UPB_FIELD_AT(msg, envoy_config_filter_accesslog_v2_ComparisonFilter*, UPB_SIZE(0, 0)) = value;
}
UPB_INLINE struct envoy_config_filter_accesslog_v2_ComparisonFilter* envoy_config_filter_accesslog_v2_DurationFilter_mutable_comparison(envoy_config_filter_accesslog_v2_DurationFilter *msg, upb_arena *arena) {
  struct envoy_config_filter_accesslog_v2_ComparisonFilter* sub = (struct envoy_config_filter_accesslog_v2_ComparisonFilter*)envoy_config_filter_accesslog_v2_DurationFilter_comparison(msg);
  if (sub == NULL) {
    sub = (struct envoy_config_filter_accesslog_v2_ComparisonFilter*)upb_msg_new(&envoy_config_filter_accesslog_v2_ComparisonFilter_msginit, arena);
    if (!sub) return NULL;
    envoy_config_filter_accesslog_v2_DurationFilter_set_comparison(msg, sub);
  }
  return sub;
}

/* envoy.config.filter.accesslog.v2.NotHealthCheckFilter */

UPB_INLINE envoy_config_filter_accesslog_v2_NotHealthCheckFilter *envoy_config_filter_accesslog_v2_NotHealthCheckFilter_new(upb_arena *arena) {
  return (envoy_config_filter_accesslog_v2_NotHealthCheckFilter *)upb_msg_new(&envoy_config_filter_accesslog_v2_NotHealthCheckFilter_msginit, arena);
}
UPB_INLINE envoy_config_filter_accesslog_v2_NotHealthCheckFilter *envoy_config_filter_accesslog_v2_NotHealthCheckFilter_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_config_filter_accesslog_v2_NotHealthCheckFilter *ret = envoy_config_filter_accesslog_v2_NotHealthCheckFilter_new(arena);
  return (ret && upb_decode(buf, size, ret, &envoy_config_filter_accesslog_v2_NotHealthCheckFilter_msginit, arena)) ? ret : NULL;
}
UPB_INLINE char *envoy_config_filter_accesslog_v2_NotHealthCheckFilter_serialize(const envoy_config_filter_accesslog_v2_NotHealthCheckFilter *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_config_filter_accesslog_v2_NotHealthCheckFilter_msginit, arena, len);
}



/* envoy.config.filter.accesslog.v2.TraceableFilter */

UPB_INLINE envoy_config_filter_accesslog_v2_TraceableFilter *envoy_config_filter_accesslog_v2_TraceableFilter_new(upb_arena *arena) {
  return (envoy_config_filter_accesslog_v2_TraceableFilter *)upb_msg_new(&envoy_config_filter_accesslog_v2_TraceableFilter_msginit, arena);
}
UPB_INLINE envoy_config_filter_accesslog_v2_TraceableFilter *envoy_config_filter_accesslog_v2_TraceableFilter_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_config_filter_accesslog_v2_TraceableFilter *ret = envoy_config_filter_accesslog_v2_TraceableFilter_new(arena);
  return (ret && upb_decode(buf, size, ret, &envoy_config_filter_accesslog_v2_TraceableFilter_msginit, arena)) ? ret : NULL;
}
UPB_INLINE char *envoy_config_filter_accesslog_v2_TraceableFilter_serialize(const envoy_config_filter_accesslog_v2_TraceableFilter *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_config_filter_accesslog_v2_TraceableFilter_msginit, arena, len);
}



/* envoy.config.filter.accesslog.v2.RuntimeFilter */

UPB_INLINE envoy_config_filter_accesslog_v2_RuntimeFilter *envoy_config_filter_accesslog_v2_RuntimeFilter_new(upb_arena *arena) {
  return (envoy_config_filter_accesslog_v2_RuntimeFilter *)upb_msg_new(&envoy_config_filter_accesslog_v2_RuntimeFilter_msginit, arena);
}
UPB_INLINE envoy_config_filter_accesslog_v2_RuntimeFilter *envoy_config_filter_accesslog_v2_RuntimeFilter_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_config_filter_accesslog_v2_RuntimeFilter *ret = envoy_config_filter_accesslog_v2_RuntimeFilter_new(arena);
  return (ret && upb_decode(buf, size, ret, &envoy_config_filter_accesslog_v2_RuntimeFilter_msginit, arena)) ? ret : NULL;
}
UPB_INLINE char *envoy_config_filter_accesslog_v2_RuntimeFilter_serialize(const envoy_config_filter_accesslog_v2_RuntimeFilter *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_config_filter_accesslog_v2_RuntimeFilter_msginit, arena, len);
}

UPB_INLINE upb_strview envoy_config_filter_accesslog_v2_RuntimeFilter_runtime_key(const envoy_config_filter_accesslog_v2_RuntimeFilter *msg) { return UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(4, 8)); }
UPB_INLINE const struct envoy_type_FractionalPercent* envoy_config_filter_accesslog_v2_RuntimeFilter_percent_sampled(const envoy_config_filter_accesslog_v2_RuntimeFilter *msg) { return UPB_FIELD_AT(msg, const struct envoy_type_FractionalPercent*, UPB_SIZE(12, 24)); }
UPB_INLINE bool envoy_config_filter_accesslog_v2_RuntimeFilter_use_independent_randomness(const envoy_config_filter_accesslog_v2_RuntimeFilter *msg) { return UPB_FIELD_AT(msg, bool, UPB_SIZE(0, 0)); }

UPB_INLINE void envoy_config_filter_accesslog_v2_RuntimeFilter_set_runtime_key(envoy_config_filter_accesslog_v2_RuntimeFilter *msg, upb_strview value) {
  UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(4, 8)) = value;
}
UPB_INLINE void envoy_config_filter_accesslog_v2_RuntimeFilter_set_percent_sampled(envoy_config_filter_accesslog_v2_RuntimeFilter *msg, struct envoy_type_FractionalPercent* value) {
  UPB_FIELD_AT(msg, struct envoy_type_FractionalPercent*, UPB_SIZE(12, 24)) = value;
}
UPB_INLINE struct envoy_type_FractionalPercent* envoy_config_filter_accesslog_v2_RuntimeFilter_mutable_percent_sampled(envoy_config_filter_accesslog_v2_RuntimeFilter *msg, upb_arena *arena) {
  struct envoy_type_FractionalPercent* sub = (struct envoy_type_FractionalPercent*)envoy_config_filter_accesslog_v2_RuntimeFilter_percent_sampled(msg);
  if (sub == NULL) {
    sub = (struct envoy_type_FractionalPercent*)upb_msg_new(&envoy_type_FractionalPercent_msginit, arena);
    if (!sub) return NULL;
    envoy_config_filter_accesslog_v2_RuntimeFilter_set_percent_sampled(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_config_filter_accesslog_v2_RuntimeFilter_set_use_independent_randomness(envoy_config_filter_accesslog_v2_RuntimeFilter *msg, bool value) {
  UPB_FIELD_AT(msg, bool, UPB_SIZE(0, 0)) = value;
}

/* envoy.config.filter.accesslog.v2.AndFilter */

UPB_INLINE envoy_config_filter_accesslog_v2_AndFilter *envoy_config_filter_accesslog_v2_AndFilter_new(upb_arena *arena) {
  return (envoy_config_filter_accesslog_v2_AndFilter *)upb_msg_new(&envoy_config_filter_accesslog_v2_AndFilter_msginit, arena);
}
UPB_INLINE envoy_config_filter_accesslog_v2_AndFilter *envoy_config_filter_accesslog_v2_AndFilter_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_config_filter_accesslog_v2_AndFilter *ret = envoy_config_filter_accesslog_v2_AndFilter_new(arena);
  return (ret && upb_decode(buf, size, ret, &envoy_config_filter_accesslog_v2_AndFilter_msginit, arena)) ? ret : NULL;
}
UPB_INLINE char *envoy_config_filter_accesslog_v2_AndFilter_serialize(const envoy_config_filter_accesslog_v2_AndFilter *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_config_filter_accesslog_v2_AndFilter_msginit, arena, len);
}

UPB_INLINE const envoy_config_filter_accesslog_v2_AccessLogFilter* const* envoy_config_filter_accesslog_v2_AndFilter_filters(const envoy_config_filter_accesslog_v2_AndFilter *msg, size_t *len) { return (const envoy_config_filter_accesslog_v2_AccessLogFilter* const*)_upb_array_accessor(msg, UPB_SIZE(0, 0), len); }

UPB_INLINE envoy_config_filter_accesslog_v2_AccessLogFilter** envoy_config_filter_accesslog_v2_AndFilter_mutable_filters(envoy_config_filter_accesslog_v2_AndFilter *msg, size_t *len) {
  return (envoy_config_filter_accesslog_v2_AccessLogFilter**)_upb_array_mutable_accessor(msg, UPB_SIZE(0, 0), len);
}
UPB_INLINE envoy_config_filter_accesslog_v2_AccessLogFilter** envoy_config_filter_accesslog_v2_AndFilter_resize_filters(envoy_config_filter_accesslog_v2_AndFilter *msg, size_t len, upb_arena *arena) {
  return (envoy_config_filter_accesslog_v2_AccessLogFilter**)_upb_array_resize_accessor(msg, UPB_SIZE(0, 0), len, UPB_SIZE(4, 8), UPB_TYPE_MESSAGE, arena);
}
UPB_INLINE struct envoy_config_filter_accesslog_v2_AccessLogFilter* envoy_config_filter_accesslog_v2_AndFilter_add_filters(envoy_config_filter_accesslog_v2_AndFilter *msg, upb_arena *arena) {
  struct envoy_config_filter_accesslog_v2_AccessLogFilter* sub = (struct envoy_config_filter_accesslog_v2_AccessLogFilter*)upb_msg_new(&envoy_config_filter_accesslog_v2_AccessLogFilter_msginit, arena);
  bool ok = _upb_array_append_accessor(
      msg, UPB_SIZE(0, 0), UPB_SIZE(4, 8), UPB_TYPE_MESSAGE, &sub, arena);
  if (!ok) return NULL;
  return sub;
}

/* envoy.config.filter.accesslog.v2.OrFilter */

UPB_INLINE envoy_config_filter_accesslog_v2_OrFilter *envoy_config_filter_accesslog_v2_OrFilter_new(upb_arena *arena) {
  return (envoy_config_filter_accesslog_v2_OrFilter *)upb_msg_new(&envoy_config_filter_accesslog_v2_OrFilter_msginit, arena);
}
UPB_INLINE envoy_config_filter_accesslog_v2_OrFilter *envoy_config_filter_accesslog_v2_OrFilter_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_config_filter_accesslog_v2_OrFilter *ret = envoy_config_filter_accesslog_v2_OrFilter_new(arena);
  return (ret && upb_decode(buf, size, ret, &envoy_config_filter_accesslog_v2_OrFilter_msginit, arena)) ? ret : NULL;
}
UPB_INLINE char *envoy_config_filter_accesslog_v2_OrFilter_serialize(const envoy_config_filter_accesslog_v2_OrFilter *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_config_filter_accesslog_v2_OrFilter_msginit, arena, len);
}

UPB_INLINE const envoy_config_filter_accesslog_v2_AccessLogFilter* const* envoy_config_filter_accesslog_v2_OrFilter_filters(const envoy_config_filter_accesslog_v2_OrFilter *msg, size_t *len) { return (const envoy_config_filter_accesslog_v2_AccessLogFilter* const*)_upb_array_accessor(msg, UPB_SIZE(0, 0), len); }

UPB_INLINE envoy_config_filter_accesslog_v2_AccessLogFilter** envoy_config_filter_accesslog_v2_OrFilter_mutable_filters(envoy_config_filter_accesslog_v2_OrFilter *msg, size_t *len) {
  return (envoy_config_filter_accesslog_v2_AccessLogFilter**)_upb_array_mutable_accessor(msg, UPB_SIZE(0, 0), len);
}
UPB_INLINE envoy_config_filter_accesslog_v2_AccessLogFilter** envoy_config_filter_accesslog_v2_OrFilter_resize_filters(envoy_config_filter_accesslog_v2_OrFilter *msg, size_t len, upb_arena *arena) {
  return (envoy_config_filter_accesslog_v2_AccessLogFilter**)_upb_array_resize_accessor(msg, UPB_SIZE(0, 0), len, UPB_SIZE(4, 8), UPB_TYPE_MESSAGE, arena);
}
UPB_INLINE struct envoy_config_filter_accesslog_v2_AccessLogFilter* envoy_config_filter_accesslog_v2_OrFilter_add_filters(envoy_config_filter_accesslog_v2_OrFilter *msg, upb_arena *arena) {
  struct envoy_config_filter_accesslog_v2_AccessLogFilter* sub = (struct envoy_config_filter_accesslog_v2_AccessLogFilter*)upb_msg_new(&envoy_config_filter_accesslog_v2_AccessLogFilter_msginit, arena);
  bool ok = _upb_array_append_accessor(
      msg, UPB_SIZE(0, 0), UPB_SIZE(4, 8), UPB_TYPE_MESSAGE, &sub, arena);
  if (!ok) return NULL;
  return sub;
}

/* envoy.config.filter.accesslog.v2.HeaderFilter */

UPB_INLINE envoy_config_filter_accesslog_v2_HeaderFilter *envoy_config_filter_accesslog_v2_HeaderFilter_new(upb_arena *arena) {
  return (envoy_config_filter_accesslog_v2_HeaderFilter *)upb_msg_new(&envoy_config_filter_accesslog_v2_HeaderFilter_msginit, arena);
}
UPB_INLINE envoy_config_filter_accesslog_v2_HeaderFilter *envoy_config_filter_accesslog_v2_HeaderFilter_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_config_filter_accesslog_v2_HeaderFilter *ret = envoy_config_filter_accesslog_v2_HeaderFilter_new(arena);
  return (ret && upb_decode(buf, size, ret, &envoy_config_filter_accesslog_v2_HeaderFilter_msginit, arena)) ? ret : NULL;
}
UPB_INLINE char *envoy_config_filter_accesslog_v2_HeaderFilter_serialize(const envoy_config_filter_accesslog_v2_HeaderFilter *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_config_filter_accesslog_v2_HeaderFilter_msginit, arena, len);
}

UPB_INLINE const struct envoy_api_v2_route_HeaderMatcher* envoy_config_filter_accesslog_v2_HeaderFilter_header(const envoy_config_filter_accesslog_v2_HeaderFilter *msg) { return UPB_FIELD_AT(msg, const struct envoy_api_v2_route_HeaderMatcher*, UPB_SIZE(0, 0)); }

UPB_INLINE void envoy_config_filter_accesslog_v2_HeaderFilter_set_header(envoy_config_filter_accesslog_v2_HeaderFilter *msg, struct envoy_api_v2_route_HeaderMatcher* value) {
  UPB_FIELD_AT(msg, struct envoy_api_v2_route_HeaderMatcher*, UPB_SIZE(0, 0)) = value;
}
UPB_INLINE struct envoy_api_v2_route_HeaderMatcher* envoy_config_filter_accesslog_v2_HeaderFilter_mutable_header(envoy_config_filter_accesslog_v2_HeaderFilter *msg, upb_arena *arena) {
  struct envoy_api_v2_route_HeaderMatcher* sub = (struct envoy_api_v2_route_HeaderMatcher*)envoy_config_filter_accesslog_v2_HeaderFilter_header(msg);
  if (sub == NULL) {
    sub = (struct envoy_api_v2_route_HeaderMatcher*)upb_msg_new(&envoy_api_v2_route_HeaderMatcher_msginit, arena);
    if (!sub) return NULL;
    envoy_config_filter_accesslog_v2_HeaderFilter_set_header(msg, sub);
  }
  return sub;
}

/* envoy.config.filter.accesslog.v2.ResponseFlagFilter */

UPB_INLINE envoy_config_filter_accesslog_v2_ResponseFlagFilter *envoy_config_filter_accesslog_v2_ResponseFlagFilter_new(upb_arena *arena) {
  return (envoy_config_filter_accesslog_v2_ResponseFlagFilter *)upb_msg_new(&envoy_config_filter_accesslog_v2_ResponseFlagFilter_msginit, arena);
}
UPB_INLINE envoy_config_filter_accesslog_v2_ResponseFlagFilter *envoy_config_filter_accesslog_v2_ResponseFlagFilter_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_config_filter_accesslog_v2_ResponseFlagFilter *ret = envoy_config_filter_accesslog_v2_ResponseFlagFilter_new(arena);
  return (ret && upb_decode(buf, size, ret, &envoy_config_filter_accesslog_v2_ResponseFlagFilter_msginit, arena)) ? ret : NULL;
}
UPB_INLINE char *envoy_config_filter_accesslog_v2_ResponseFlagFilter_serialize(const envoy_config_filter_accesslog_v2_ResponseFlagFilter *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_config_filter_accesslog_v2_ResponseFlagFilter_msginit, arena, len);
}

UPB_INLINE upb_strview const* envoy_config_filter_accesslog_v2_ResponseFlagFilter_flags(const envoy_config_filter_accesslog_v2_ResponseFlagFilter *msg, size_t *len) { return (upb_strview const*)_upb_array_accessor(msg, UPB_SIZE(0, 0), len); }

UPB_INLINE upb_strview* envoy_config_filter_accesslog_v2_ResponseFlagFilter_mutable_flags(envoy_config_filter_accesslog_v2_ResponseFlagFilter *msg, size_t *len) {
  return (upb_strview*)_upb_array_mutable_accessor(msg, UPB_SIZE(0, 0), len);
}
UPB_INLINE upb_strview* envoy_config_filter_accesslog_v2_ResponseFlagFilter_resize_flags(envoy_config_filter_accesslog_v2_ResponseFlagFilter *msg, size_t len, upb_arena *arena) {
  return (upb_strview*)_upb_array_resize_accessor(msg, UPB_SIZE(0, 0), len, UPB_SIZE(8, 16), UPB_TYPE_STRING, arena);
}
UPB_INLINE bool envoy_config_filter_accesslog_v2_ResponseFlagFilter_add_flags(envoy_config_filter_accesslog_v2_ResponseFlagFilter *msg, upb_strview val, upb_arena *arena) {
  return _upb_array_append_accessor(
      msg, UPB_SIZE(0, 0), UPB_SIZE(8, 16), UPB_TYPE_STRING, &val, arena);
}

/* envoy.config.filter.accesslog.v2.GrpcStatusFilter */

UPB_INLINE envoy_config_filter_accesslog_v2_GrpcStatusFilter *envoy_config_filter_accesslog_v2_GrpcStatusFilter_new(upb_arena *arena) {
  return (envoy_config_filter_accesslog_v2_GrpcStatusFilter *)upb_msg_new(&envoy_config_filter_accesslog_v2_GrpcStatusFilter_msginit, arena);
}
UPB_INLINE envoy_config_filter_accesslog_v2_GrpcStatusFilter *envoy_config_filter_accesslog_v2_GrpcStatusFilter_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_config_filter_accesslog_v2_GrpcStatusFilter *ret = envoy_config_filter_accesslog_v2_GrpcStatusFilter_new(arena);
  return (ret && upb_decode(buf, size, ret, &envoy_config_filter_accesslog_v2_GrpcStatusFilter_msginit, arena)) ? ret : NULL;
}
UPB_INLINE char *envoy_config_filter_accesslog_v2_GrpcStatusFilter_serialize(const envoy_config_filter_accesslog_v2_GrpcStatusFilter *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_config_filter_accesslog_v2_GrpcStatusFilter_msginit, arena, len);
}

UPB_INLINE int32_t const* envoy_config_filter_accesslog_v2_GrpcStatusFilter_statuses(const envoy_config_filter_accesslog_v2_GrpcStatusFilter *msg, size_t *len) { return (int32_t const*)_upb_array_accessor(msg, UPB_SIZE(4, 8), len); }
UPB_INLINE bool envoy_config_filter_accesslog_v2_GrpcStatusFilter_exclude(const envoy_config_filter_accesslog_v2_GrpcStatusFilter *msg) { return UPB_FIELD_AT(msg, bool, UPB_SIZE(0, 0)); }

UPB_INLINE int32_t* envoy_config_filter_accesslog_v2_GrpcStatusFilter_mutable_statuses(envoy_config_filter_accesslog_v2_GrpcStatusFilter *msg, size_t *len) {
  return (int32_t*)_upb_array_mutable_accessor(msg, UPB_SIZE(4, 8), len);
}
UPB_INLINE int32_t* envoy_config_filter_accesslog_v2_GrpcStatusFilter_resize_statuses(envoy_config_filter_accesslog_v2_GrpcStatusFilter *msg, size_t len, upb_arena *arena) {
  return (int32_t*)_upb_array_resize_accessor(msg, UPB_SIZE(4, 8), len, UPB_SIZE(8, 8), UPB_TYPE_ENUM, arena);
}
UPB_INLINE bool envoy_config_filter_accesslog_v2_GrpcStatusFilter_add_statuses(envoy_config_filter_accesslog_v2_GrpcStatusFilter *msg, int32_t val, upb_arena *arena) {
  return _upb_array_append_accessor(
      msg, UPB_SIZE(4, 8), UPB_SIZE(8, 8), UPB_TYPE_ENUM, &val, arena);
}
UPB_INLINE void envoy_config_filter_accesslog_v2_GrpcStatusFilter_set_exclude(envoy_config_filter_accesslog_v2_GrpcStatusFilter *msg, bool value) {
  UPB_FIELD_AT(msg, bool, UPB_SIZE(0, 0)) = value;
}

/* envoy.config.filter.accesslog.v2.ExtensionFilter */

UPB_INLINE envoy_config_filter_accesslog_v2_ExtensionFilter *envoy_config_filter_accesslog_v2_ExtensionFilter_new(upb_arena *arena) {
  return (envoy_config_filter_accesslog_v2_ExtensionFilter *)upb_msg_new(&envoy_config_filter_accesslog_v2_ExtensionFilter_msginit, arena);
}
UPB_INLINE envoy_config_filter_accesslog_v2_ExtensionFilter *envoy_config_filter_accesslog_v2_ExtensionFilter_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_config_filter_accesslog_v2_ExtensionFilter *ret = envoy_config_filter_accesslog_v2_ExtensionFilter_new(arena);
  return (ret && upb_decode(buf, size, ret, &envoy_config_filter_accesslog_v2_ExtensionFilter_msginit, arena)) ? ret : NULL;
}
UPB_INLINE char *envoy_config_filter_accesslog_v2_ExtensionFilter_serialize(const envoy_config_filter_accesslog_v2_ExtensionFilter *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_config_filter_accesslog_v2_ExtensionFilter_msginit, arena, len);
}

typedef enum {
  envoy_config_filter_accesslog_v2_ExtensionFilter_config_type_config = 2,
  envoy_config_filter_accesslog_v2_ExtensionFilter_config_type_typed_config = 3,
  envoy_config_filter_accesslog_v2_ExtensionFilter_config_type_NOT_SET = 0
} envoy_config_filter_accesslog_v2_ExtensionFilter_config_type_oneofcases;
UPB_INLINE envoy_config_filter_accesslog_v2_ExtensionFilter_config_type_oneofcases envoy_config_filter_accesslog_v2_ExtensionFilter_config_type_case(const envoy_config_filter_accesslog_v2_ExtensionFilter* msg) { return (envoy_config_filter_accesslog_v2_ExtensionFilter_config_type_oneofcases)UPB_FIELD_AT(msg, int32_t, UPB_SIZE(12, 24)); }

UPB_INLINE upb_strview envoy_config_filter_accesslog_v2_ExtensionFilter_name(const envoy_config_filter_accesslog_v2_ExtensionFilter *msg) { return UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(0, 0)); }
UPB_INLINE bool envoy_config_filter_accesslog_v2_ExtensionFilter_has_config(const envoy_config_filter_accesslog_v2_ExtensionFilter *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(12, 24), 2); }
UPB_INLINE const struct google_protobuf_Struct* envoy_config_filter_accesslog_v2_ExtensionFilter_config(const envoy_config_filter_accesslog_v2_ExtensionFilter *msg) { return UPB_READ_ONEOF(msg, const struct google_protobuf_Struct*, UPB_SIZE(8, 16), UPB_SIZE(12, 24), 2, NULL); }
UPB_INLINE bool envoy_config_filter_accesslog_v2_ExtensionFilter_has_typed_config(const envoy_config_filter_accesslog_v2_ExtensionFilter *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(12, 24), 3); }
UPB_INLINE const struct google_protobuf_Any* envoy_config_filter_accesslog_v2_ExtensionFilter_typed_config(const envoy_config_filter_accesslog_v2_ExtensionFilter *msg) { return UPB_READ_ONEOF(msg, const struct google_protobuf_Any*, UPB_SIZE(8, 16), UPB_SIZE(12, 24), 3, NULL); }

UPB_INLINE void envoy_config_filter_accesslog_v2_ExtensionFilter_set_name(envoy_config_filter_accesslog_v2_ExtensionFilter *msg, upb_strview value) {
  UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(0, 0)) = value;
}
UPB_INLINE void envoy_config_filter_accesslog_v2_ExtensionFilter_set_config(envoy_config_filter_accesslog_v2_ExtensionFilter *msg, struct google_protobuf_Struct* value) {
  UPB_WRITE_ONEOF(msg, struct google_protobuf_Struct*, UPB_SIZE(8, 16), value, UPB_SIZE(12, 24), 2);
}
UPB_INLINE struct google_protobuf_Struct* envoy_config_filter_accesslog_v2_ExtensionFilter_mutable_config(envoy_config_filter_accesslog_v2_ExtensionFilter *msg, upb_arena *arena) {
  struct google_protobuf_Struct* sub = (struct google_protobuf_Struct*)envoy_config_filter_accesslog_v2_ExtensionFilter_config(msg);
  if (sub == NULL) {
    sub = (struct google_protobuf_Struct*)upb_msg_new(&google_protobuf_Struct_msginit, arena);
    if (!sub) return NULL;
    envoy_config_filter_accesslog_v2_ExtensionFilter_set_config(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_config_filter_accesslog_v2_ExtensionFilter_set_typed_config(envoy_config_filter_accesslog_v2_ExtensionFilter *msg, struct google_protobuf_Any* value) {
  UPB_WRITE_ONEOF(msg, struct google_protobuf_Any*, UPB_SIZE(8, 16), value, UPB_SIZE(12, 24), 3);
}
UPB_INLINE struct google_protobuf_Any* envoy_config_filter_accesslog_v2_ExtensionFilter_mutable_typed_config(envoy_config_filter_accesslog_v2_ExtensionFilter *msg, upb_arena *arena) {
  struct google_protobuf_Any* sub = (struct google_protobuf_Any*)envoy_config_filter_accesslog_v2_ExtensionFilter_typed_config(msg);
  if (sub == NULL) {
    sub = (struct google_protobuf_Any*)upb_msg_new(&google_protobuf_Any_msginit, arena);
    if (!sub) return NULL;
    envoy_config_filter_accesslog_v2_ExtensionFilter_set_typed_config(msg, sub);
  }
  return sub;
}

#ifdef __cplusplus
}  /* extern "C" */
#endif

#include "upb/port_undef.inc"

#endif  /* ENVOY_CONFIG_FILTER_ACCESSLOG_V2_ACCESSLOG_PROTO_UPB_H_ */
