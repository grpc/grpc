/* This file was generated by upbc (the upb compiler) from the input
 * file:
 *
 *     envoy/extensions/load_balancing_policies/round_robin/v3/round_robin.proto
 *
 * Do not edit -- your changes will be discarded when the file is
 * regenerated. */

#ifndef ENVOY_EXTENSIONS_LOAD_BALANCING_POLICIES_ROUND_ROBIN_V3_ROUND_ROBIN_PROTO_UPB_H_
#define ENVOY_EXTENSIONS_LOAD_BALANCING_POLICIES_ROUND_ROBIN_V3_ROUND_ROBIN_PROTO_UPB_H_

#include "upb/msg_internal.h"
#include "upb/decode.h"
#include "upb/decode_fast.h"
#include "upb/encode.h"

#include "upb/port_def.inc"

#ifdef __cplusplus
extern "C" {
#endif

struct envoy_extensions_load_balancing_policies_round_robin_v3_RoundRobin;
typedef struct envoy_extensions_load_balancing_policies_round_robin_v3_RoundRobin envoy_extensions_load_balancing_policies_round_robin_v3_RoundRobin;
extern const upb_MiniTable envoy_extensions_load_balancing_policies_round_robin_v3_RoundRobin_msginit;
struct envoy_config_cluster_v3_Cluster_SlowStartConfig;
extern const upb_MiniTable envoy_config_cluster_v3_Cluster_SlowStartConfig_msginit;



/* envoy.extensions.load_balancing_policies.round_robin.v3.RoundRobin */

UPB_INLINE envoy_extensions_load_balancing_policies_round_robin_v3_RoundRobin* envoy_extensions_load_balancing_policies_round_robin_v3_RoundRobin_new(upb_Arena* arena) {
  return (envoy_extensions_load_balancing_policies_round_robin_v3_RoundRobin*)_upb_Message_New(&envoy_extensions_load_balancing_policies_round_robin_v3_RoundRobin_msginit, arena);
}
UPB_INLINE envoy_extensions_load_balancing_policies_round_robin_v3_RoundRobin* envoy_extensions_load_balancing_policies_round_robin_v3_RoundRobin_parse(const char* buf, size_t size, upb_Arena* arena) {
  envoy_extensions_load_balancing_policies_round_robin_v3_RoundRobin* ret = envoy_extensions_load_balancing_policies_round_robin_v3_RoundRobin_new(arena);
  if (!ret) return NULL;
  if (upb_Decode(buf, size, ret, &envoy_extensions_load_balancing_policies_round_robin_v3_RoundRobin_msginit, NULL, 0, arena) != kUpb_DecodeStatus_Ok) {
    return NULL;
  }
  return ret;
}
UPB_INLINE envoy_extensions_load_balancing_policies_round_robin_v3_RoundRobin* envoy_extensions_load_balancing_policies_round_robin_v3_RoundRobin_parse_ex(const char* buf, size_t size,
                           const upb_ExtensionRegistry* extreg,
                           int options, upb_Arena* arena) {
  envoy_extensions_load_balancing_policies_round_robin_v3_RoundRobin* ret = envoy_extensions_load_balancing_policies_round_robin_v3_RoundRobin_new(arena);
  if (!ret) return NULL;
  if (upb_Decode(buf, size, ret, &envoy_extensions_load_balancing_policies_round_robin_v3_RoundRobin_msginit, extreg, options, arena) !=
      kUpb_DecodeStatus_Ok) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char* envoy_extensions_load_balancing_policies_round_robin_v3_RoundRobin_serialize(const envoy_extensions_load_balancing_policies_round_robin_v3_RoundRobin* msg, upb_Arena* arena, size_t* len) {
  return upb_Encode(msg, &envoy_extensions_load_balancing_policies_round_robin_v3_RoundRobin_msginit, 0, arena, len);
}
UPB_INLINE char* envoy_extensions_load_balancing_policies_round_robin_v3_RoundRobin_serialize_ex(const envoy_extensions_load_balancing_policies_round_robin_v3_RoundRobin* msg, int options,
                                 upb_Arena* arena, size_t* len) {
  return upb_Encode(msg, &envoy_extensions_load_balancing_policies_round_robin_v3_RoundRobin_msginit, options, arena, len);
}
UPB_INLINE bool envoy_extensions_load_balancing_policies_round_robin_v3_RoundRobin_has_slow_start_config(const envoy_extensions_load_balancing_policies_round_robin_v3_RoundRobin* msg) {
  return _upb_hasbit(msg, 1);
}
UPB_INLINE void envoy_extensions_load_balancing_policies_round_robin_v3_RoundRobin_clear_slow_start_config(const envoy_extensions_load_balancing_policies_round_robin_v3_RoundRobin* msg) {
  *UPB_PTR_AT(msg, UPB_SIZE(4, 8), const upb_Message*) = NULL;
}
UPB_INLINE const struct envoy_config_cluster_v3_Cluster_SlowStartConfig* envoy_extensions_load_balancing_policies_round_robin_v3_RoundRobin_slow_start_config(const envoy_extensions_load_balancing_policies_round_robin_v3_RoundRobin* msg) {
  return *UPB_PTR_AT(msg, UPB_SIZE(4, 8), const struct envoy_config_cluster_v3_Cluster_SlowStartConfig*);
}

UPB_INLINE void envoy_extensions_load_balancing_policies_round_robin_v3_RoundRobin_set_slow_start_config(envoy_extensions_load_balancing_policies_round_robin_v3_RoundRobin *msg, struct envoy_config_cluster_v3_Cluster_SlowStartConfig* value) {
  _upb_sethas(msg, 1);
  *UPB_PTR_AT(msg, UPB_SIZE(4, 8), struct envoy_config_cluster_v3_Cluster_SlowStartConfig*) = value;
}
UPB_INLINE struct envoy_config_cluster_v3_Cluster_SlowStartConfig* envoy_extensions_load_balancing_policies_round_robin_v3_RoundRobin_mutable_slow_start_config(envoy_extensions_load_balancing_policies_round_robin_v3_RoundRobin* msg, upb_Arena* arena) {
  struct envoy_config_cluster_v3_Cluster_SlowStartConfig* sub = (struct envoy_config_cluster_v3_Cluster_SlowStartConfig*)envoy_extensions_load_balancing_policies_round_robin_v3_RoundRobin_slow_start_config(msg);
  if (sub == NULL) {
    sub = (struct envoy_config_cluster_v3_Cluster_SlowStartConfig*)_upb_Message_New(&envoy_config_cluster_v3_Cluster_SlowStartConfig_msginit, arena);
    if (!sub) return NULL;
    envoy_extensions_load_balancing_policies_round_robin_v3_RoundRobin_set_slow_start_config(msg, sub);
  }
  return sub;
}

extern const upb_MiniTable_File envoy_extensions_load_balancing_policies_round_robin_v3_round_robin_proto_upb_file_layout;

#ifdef __cplusplus
}  /* extern "C" */
#endif

#include "upb/port_undef.inc"

#endif  /* ENVOY_EXTENSIONS_LOAD_BALANCING_POLICIES_ROUND_ROBIN_V3_ROUND_ROBIN_PROTO_UPB_H_ */
