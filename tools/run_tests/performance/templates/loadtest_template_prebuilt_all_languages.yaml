# Template generated from load test configurations by loadtest_template.py.
#
# Configuration templates contain client and server configurations for multiple
# languages, and may contain template substitution keys. These templates are
# used to generate load test configurations by selecting clients and servers for
# the required languages. The source files for template generation may be load
# test configurations or load test configuration templates. Load test
# configuration generation is performed by loadtest_config.py. See documentation
# below:
# https://github.com/grpc/grpc/blob/master/tools/run_tests/performance/README.md
apiVersion: e2etest.grpc.io/v1
kind: LoadTest
metadata:
  name: prebuilt_all_languages
spec:
  clients:
  - language: csharp
    pool: ${client_pool}
    run:
      args:
      - exec
      - /execute/qps_worker/Grpc.IntegrationTesting.QpsWorker.dll
      command:
      - dotnet
      image: ${prebuilt_image_prefix}/csharp:${prebuilt_image_tag}
  - language: cxx
    pool: ${client_pool}
    run:
      command:
      - /source/code/bazel-bin/test/cpp/qps/qps_worker
      image: ${prebuilt_image_prefix}/cxx:${prebuilt_image_tag}
  - language: go
    pool: ${client_pool}
    run:
      command:
      - /executable/bin/worker
      image: ${prebuilt_image_prefix}/go:${prebuilt_image_tag}
  - language: java
    pool: ${client_pool}
    run:
      command:
      - /execute/bin/benchmark_worker
      image: ${prebuilt_image_prefix}/java:${prebuilt_image_tag}
  - language: node
    pool: ${client_pool}
    run:
      command:
      - /execute/worker-linux
      - --benchmark_impl=grpc
      image: ${prebuilt_image_prefix}/node:${prebuilt_image_tag}
  - language: php7
    pool: ${client_pool}
    run:
      command:
      - bash
      - /run_scripts/run_worker.sh
      image: ${prebuilt_image_prefix}/php:${prebuilt_image_tag}
  - language: python
    pool: ${client_pool}
    run:
      command:
      - /execute/qps_worker
      image: ${prebuilt_image_prefix}/python:${prebuilt_image_tag}
  - language: python_asyncio
    pool: ${client_pool}
    run:
      command:
      - /execute/benchmark_worker
      image: ${prebuilt_image_prefix}/python:${prebuilt_image_tag}
  - language: ruby
    pool: ${client_pool}
    run:
      args:
      - /execute/src/ruby/qps/worker.rb
      command:
      - ruby
      image: ${prebuilt_image_prefix}/ruby:${prebuilt_image_tag}
  driver:
    language: cxx
    pool: ${driver_pool}
    run:
      image: ${driver_image}
  results:
    bigQueryTable: ${big_query_table}
  servers:
  - language: csharp
    pool: ${server_pool}
    run:
      args:
      - exec
      - /execute/qps_worker/Grpc.IntegrationTesting.QpsWorker.dll
      command:
      - dotnet
      image: ${prebuilt_image_prefix}/csharp:${prebuilt_image_tag}
  - language: cxx
    pool: ${server_pool}
    run:
      args:
      - --server_port=10010
      command:
      - /source/code/bazel-bin/test/cpp/qps/qps_worker
      image: ${prebuilt_image_prefix}/cxx:${prebuilt_image_tag}
  - language: go
    pool: ${server_pool}
    run:
      command:
      - /executable/bin/worker
      image: ${prebuilt_image_prefix}/go:${prebuilt_image_tag}
  - language: java
    pool: ${server_pool}
    run:
      command:
      - /execute/bin/benchmark_worker
      image: ${prebuilt_image_prefix}/java:${prebuilt_image_tag}
  - language: node
    pool: ${server_pool}
    run:
      command:
      - /execute/worker-linux
      - --benchmark_impl=grpc
      image: ${prebuilt_image_prefix}/node:${prebuilt_image_tag}
  - language: python
    pool: ${server_pool}
    run:
      command:
      - /execute/qps_worker
      image: ${prebuilt_image_prefix}/python:${prebuilt_image_tag}
  - language: python_asyncio
    pool: ${server_pool}
    run:
      command:
      - /execute/benchmark_worker
      image: ${prebuilt_image_prefix}/python:${prebuilt_image_tag}
  - language: ruby
    pool: ${server_pool}
    run:
      args:
      - /execute/src/ruby/qps/worker.rb
      command:
      - ruby
      image: ${prebuilt_image_prefix}/ruby:${prebuilt_image_tag}
  timeoutSeconds: ${timeout_seconds}
  ttlSeconds: 86400
