/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// Automatically generated by MockGen. DO NOT EDIT!
// Source: gen/thrifttest (interfaces: ThriftTest)

package common

import (
	gomock "github.com/golang/mock/gomock"
	thrifttest "gen/thrifttest"
)

// Mock of ThriftTest interface
type MockThriftTest struct {
	ctrl     *gomock.Controller
	recorder *_MockThriftTestRecorder
}

// Recorder for MockThriftTest (not exported)
type _MockThriftTestRecorder struct {
	mock *MockThriftTest
}

func NewMockThriftTest(ctrl *gomock.Controller) *MockThriftTest {
	mock := &MockThriftTest{ctrl: ctrl}
	mock.recorder = &_MockThriftTestRecorder{mock}
	return mock
}

func (_m *MockThriftTest) EXPECT() *_MockThriftTestRecorder {
	return _m.recorder
}

func (_m *MockThriftTest) TestBool(_param0 bool) (bool, error) {
	ret := _m.ctrl.Call(_m, "TestBool", _param0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThriftTestRecorder) TestBool(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TestBool", arg0)
}


func (_m *MockThriftTest) TestByte(_param0 int8) (int8, error) {
	ret := _m.ctrl.Call(_m, "TestByte", _param0)
	ret0, _ := ret[0].(int8)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThriftTestRecorder) TestByte(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TestByte", arg0)
}

func (_m *MockThriftTest) TestDouble(_param0 float64) (float64, error) {
	ret := _m.ctrl.Call(_m, "TestDouble", _param0)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThriftTestRecorder) TestDouble(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TestDouble", arg0)
}

func (_m *MockThriftTest) TestBinary(_param0 []byte) ([]byte, error) {
	ret := _m.ctrl.Call(_m, "TestBinary", _param0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThriftTestRecorder) TestBinary(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TestBinary", arg0)
}

func (_m *MockThriftTest) TestEnum(_param0 thrifttest.Numberz) (thrifttest.Numberz, error) {
	ret := _m.ctrl.Call(_m, "TestEnum", _param0)
	ret0, _ := ret[0].(thrifttest.Numberz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThriftTestRecorder) TestEnum(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TestEnum", arg0)
}

func (_m *MockThriftTest) TestException(_param0 string) error {
	ret := _m.ctrl.Call(_m, "TestException", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockThriftTestRecorder) TestException(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TestException", arg0)
}

func (_m *MockThriftTest) TestI32(_param0 int32) (int32, error) {
	ret := _m.ctrl.Call(_m, "TestI32", _param0)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThriftTestRecorder) TestI32(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TestI32", arg0)
}

func (_m *MockThriftTest) TestI64(_param0 int64) (int64, error) {
	ret := _m.ctrl.Call(_m, "TestI64", _param0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThriftTestRecorder) TestI64(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TestI64", arg0)
}

func (_m *MockThriftTest) TestInsanity(_param0 *thrifttest.Insanity) (map[thrifttest.UserId]map[thrifttest.Numberz]*thrifttest.Insanity, error) {
	ret := _m.ctrl.Call(_m, "TestInsanity", _param0)
	ret0, _ := ret[0].(map[thrifttest.UserId]map[thrifttest.Numberz]*thrifttest.Insanity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThriftTestRecorder) TestInsanity(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TestInsanity", arg0)
}

func (_m *MockThriftTest) TestList(_param0 []int32) ([]int32, error) {
	ret := _m.ctrl.Call(_m, "TestList", _param0)
	ret0, _ := ret[0].([]int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThriftTestRecorder) TestList(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TestList", arg0)
}

func (_m *MockThriftTest) TestMap(_param0 map[int32]int32) (map[int32]int32, error) {
	ret := _m.ctrl.Call(_m, "TestMap", _param0)
	ret0, _ := ret[0].(map[int32]int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThriftTestRecorder) TestMap(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TestMap", arg0)
}

func (_m *MockThriftTest) TestMapMap(_param0 int32) (map[int32]map[int32]int32, error) {
	ret := _m.ctrl.Call(_m, "TestMapMap", _param0)
	ret0, _ := ret[0].(map[int32]map[int32]int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThriftTestRecorder) TestMapMap(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TestMapMap", arg0)
}

func (_m *MockThriftTest) TestMulti(_param0 int8, _param1 int32, _param2 int64, _param3 map[int16]string, _param4 thrifttest.Numberz, _param5 thrifttest.UserId) (*thrifttest.Xtruct, error) {
	ret := _m.ctrl.Call(_m, "TestMulti", _param0, _param1, _param2, _param3, _param4, _param5)
	ret0, _ := ret[0].(*thrifttest.Xtruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThriftTestRecorder) TestMulti(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TestMulti", arg0, arg1, arg2, arg3, arg4, arg5)
}

func (_m *MockThriftTest) TestMultiException(_param0 string, _param1 string) (*thrifttest.Xtruct, error) {
	ret := _m.ctrl.Call(_m, "TestMultiException", _param0, _param1)
	ret0, _ := ret[0].(*thrifttest.Xtruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThriftTestRecorder) TestMultiException(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TestMultiException", arg0, arg1)
}

func (_m *MockThriftTest) TestNest(_param0 *thrifttest.Xtruct2) (*thrifttest.Xtruct2, error) {
	ret := _m.ctrl.Call(_m, "TestNest", _param0)
	ret0, _ := ret[0].(*thrifttest.Xtruct2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThriftTestRecorder) TestNest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TestNest", arg0)
}

func (_m *MockThriftTest) TestOneway(_param0 int32) error {
	ret := _m.ctrl.Call(_m, "TestOneway", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockThriftTestRecorder) TestOneway(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TestOneway", arg0)
}

func (_m *MockThriftTest) TestSet(_param0 map[int32]struct{}) (map[int32]struct{}, error) {
	ret := _m.ctrl.Call(_m, "TestSet", _param0)
	ret0, _ := ret[0].(map[int32]struct{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThriftTestRecorder) TestSet(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TestSet", arg0)
}

func (_m *MockThriftTest) TestString(_param0 string) (string, error) {
	ret := _m.ctrl.Call(_m, "TestString", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThriftTestRecorder) TestString(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TestString", arg0)
}

func (_m *MockThriftTest) TestStringMap(_param0 map[string]string) (map[string]string, error) {
	ret := _m.ctrl.Call(_m, "TestStringMap", _param0)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThriftTestRecorder) TestStringMap(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TestStringMap", arg0)
}

func (_m *MockThriftTest) TestStruct(_param0 *thrifttest.Xtruct) (*thrifttest.Xtruct, error) {
	ret := _m.ctrl.Call(_m, "TestStruct", _param0)
	ret0, _ := ret[0].(*thrifttest.Xtruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThriftTestRecorder) TestStruct(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TestStruct", arg0)
}

func (_m *MockThriftTest) TestTypedef(_param0 thrifttest.UserId) (thrifttest.UserId, error) {
	ret := _m.ctrl.Call(_m, "TestTypedef", _param0)
	ret0, _ := ret[0].(thrifttest.UserId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThriftTestRecorder) TestTypedef(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TestTypedef", arg0)
}

func (_m *MockThriftTest) TestVoid() error {
	ret := _m.ctrl.Call(_m, "TestVoid")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockThriftTestRecorder) TestVoid() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TestVoid")
}
