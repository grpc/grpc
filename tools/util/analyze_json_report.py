#!/usr/bin/env python2.7
# Copyright 2016, Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#     * Neither the name of Google Inc. nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""Analyzer for JSON report generated by run_tests.py."""

import argparse
import json

# parse command line
argp = argparse.ArgumentParser(description='Analyze run_tests.py JSON report.')
argp.add_argument('-f', '--file', default='report.json', type=str,
        help='Input file.')
argp.add_argument('--only_failing',
                  default=False,
                  action='store_const',
                  const=True,
                  help='Only show tests that had some failures/timeouts.')
argp.add_argument('--failurelogs',
                  default=False,
                  action='store_const',
                  const=True,
                  help='Write failure output by test to a text file.')
args = argp.parse_args()

with open(args.file, 'r') as f:
  report = json.load(f)

for testname, results in report.iteritems():
  results_passed = [r for r in results if r['state'] == 'PASSED']
  results_failed = [r for r in results if r['state'] == 'FAILED']
  results_timeout = [r for r in results if r['state'] == 'TIMEOUT']
  if len(results) != len(results_passed) + len(results_failed) + len(results_timeout):
    raise Exception('Unknown result state found. Malformed report.')

  avg_time = sum(r['elapsed_time'] for r in results_passed) / len(results_passed)
  success_rate_percent = (float(len(results_passed)) / len(results)) * 100

  if not args.only_failing or results_failed or results_timeout:
    print testname
    print '  {}/{} passed ({:.1f}% success rate)'.format(len(results_passed),
                                                         len(results),
                                                         success_rate_percent)
    print '  {} runs failed'.format(len(results_failed))
    print '  {} runs timed out'.format(len(results_timeout))
    print '  {:.2f}s avg time (for passing tests)'.format(avg_time)
    if args.failurelogs and (results_failed or results_timeout):
      failures_log = 'testfailures_{}.txt'.format(testname)
      with open(failures_log, 'w') as f:
        for r in results_failed + results_timeout:
          f.write('=============================================\n')
          f.write('== Test: {}\n'.format(testname))
          f.write('== State: {}\n'.format(r['state']))
          f.write('=============================================\n')
          f.write(r['message'])
          f.write('\n\n')
      print '  failure log written to {}'.format(failures_log)

    print
