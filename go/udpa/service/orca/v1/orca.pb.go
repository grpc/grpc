// Code generated by protoc-gen-go. DO NOT EDIT.
// source: udpa/service/orca/v1/orca.proto

package udpa_service_orca_v1

import (
	context "context"
	fmt "fmt"
	v1 "github.com/cncf/udpa/go/udpa/data/orca/v1"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type OrcaLoadReportRequest struct {
	ReportInterval       *duration.Duration `protobuf:"bytes,1,opt,name=report_interval,json=reportInterval,proto3" json:"report_interval,omitempty"`
	RequestCostNames     []string           `protobuf:"bytes,2,rep,name=request_cost_names,json=requestCostNames,proto3" json:"request_cost_names,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *OrcaLoadReportRequest) Reset()         { *m = OrcaLoadReportRequest{} }
func (m *OrcaLoadReportRequest) String() string { return proto.CompactTextString(m) }
func (*OrcaLoadReportRequest) ProtoMessage()    {}
func (*OrcaLoadReportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f598b2ec2dba5eee, []int{0}
}

func (m *OrcaLoadReportRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrcaLoadReportRequest.Unmarshal(m, b)
}
func (m *OrcaLoadReportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrcaLoadReportRequest.Marshal(b, m, deterministic)
}
func (m *OrcaLoadReportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrcaLoadReportRequest.Merge(m, src)
}
func (m *OrcaLoadReportRequest) XXX_Size() int {
	return xxx_messageInfo_OrcaLoadReportRequest.Size(m)
}
func (m *OrcaLoadReportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OrcaLoadReportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OrcaLoadReportRequest proto.InternalMessageInfo

func (m *OrcaLoadReportRequest) GetReportInterval() *duration.Duration {
	if m != nil {
		return m.ReportInterval
	}
	return nil
}

func (m *OrcaLoadReportRequest) GetRequestCostNames() []string {
	if m != nil {
		return m.RequestCostNames
	}
	return nil
}

func init() {
	proto.RegisterType((*OrcaLoadReportRequest)(nil), "udpa.service.orca.v1.OrcaLoadReportRequest")
}

func init() { proto.RegisterFile("udpa/service/orca/v1/orca.proto", fileDescriptor_f598b2ec2dba5eee) }

var fileDescriptor_f598b2ec2dba5eee = []byte{
	// 295 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xdd, 0x4a, 0xc3, 0x40,
	0x10, 0x85, 0x89, 0x82, 0xd0, 0x15, 0xaa, 0x06, 0xc5, 0xda, 0x0b, 0xad, 0xe2, 0x45, 0x41, 0xd9,
	0xd8, 0xf6, 0x0d, 0x5a, 0x6f, 0x04, 0xb5, 0x25, 0x7d, 0x80, 0x30, 0xdd, 0x8c, 0x35, 0x90, 0x66,
	0xe2, 0xec, 0x24, 0x3e, 0x83, 0x6f, 0x2d, 0xd9, 0x4d, 0x2f, 0x84, 0x78, 0xb5, 0x3f, 0xe7, 0x7c,
	0x73, 0x98, 0xa3, 0x6e, 0xaa, 0xb4, 0x84, 0xc8, 0x22, 0xd7, 0x99, 0xc1, 0x88, 0xd8, 0x40, 0x54,
	0x4f, 0xdc, 0xa9, 0x4b, 0x26, 0xa1, 0xf0, 0xbc, 0x31, 0xe8, 0xd6, 0xa0, 0x9d, 0x50, 0x4f, 0x86,
	0x63, 0x87, 0xa5, 0x20, 0xf0, 0x87, 0x49, 0x72, 0x82, 0x34, 0x61, 0x2c, 0x89, 0xc5, 0xf3, 0xc3,
	0xeb, 0x2d, 0xd1, 0x36, 0xc7, 0xc8, 0xbd, 0x36, 0xd5, 0x47, 0x94, 0x56, 0x0c, 0x92, 0x51, 0xd1,
	0xea, 0x97, 0x35, 0xe4, 0x59, 0x0a, 0x82, 0xd1, 0xfe, 0xe2, 0x85, 0xbb, 0x9f, 0x40, 0x5d, 0x2c,
	0xd9, 0xc0, 0x2b, 0x41, 0x1a, 0xbb, 0x89, 0x31, 0x7e, 0x55, 0x68, 0x25, 0x9c, 0xab, 0x13, 0x1f,
	0x91, 0x64, 0x85, 0x20, 0xd7, 0x90, 0x0f, 0x82, 0x51, 0x30, 0x3e, 0x9e, 0x5e, 0x69, 0x1f, 0xa6,
	0xf7, 0x61, 0xfa, 0xb9, 0x0d, 0x8b, 0xfb, 0x9e, 0x78, 0x69, 0x81, 0xf0, 0x51, 0x85, 0xec, 0xc7,
	0x25, 0x86, 0xac, 0x24, 0x05, 0xec, 0xd0, 0x0e, 0x0e, 0x46, 0x87, 0xe3, 0x5e, 0x7c, 0xda, 0x2a,
	0x0b, 0xb2, 0xf2, 0xde, 0xfc, 0x4f, 0xbf, 0x55, 0x7f, 0x59, 0x62, 0x11, 0x1b, 0x58, 0xfb, 0x22,
	0x42, 0x54, 0x67, 0x6b, 0x61, 0x84, 0xdd, 0x82, 0x18, 0xdf, 0x50, 0x38, 0x33, 0x36, 0x7c, 0xd0,
	0x5d, 0x65, 0xe9, 0xce, 0x2d, 0x86, 0xb7, 0xde, 0xdc, 0x74, 0xf8, 0x8f, 0xf3, 0x29, 0x98, 0xcf,
	0xd4, 0xbd, 0xa1, 0x9d, 0xde, 0x66, 0xf2, 0x59, 0x6d, 0x3c, 0xd0, 0x15, 0x31, 0xef, 0x35, 0xe4,
	0xaa, 0xd9, 0x7a, 0x15, 0x6c, 0x8e, 0xdc, 0xfa, 0xb3, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1f,
	0xe4, 0x0b, 0x27, 0xdc, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OpenRcaServiceClient is the client API for OpenRcaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OpenRcaServiceClient interface {
	StreamCoreMetrics(ctx context.Context, in *OrcaLoadReportRequest, opts ...grpc.CallOption) (OpenRcaService_StreamCoreMetricsClient, error)
}

type openRcaServiceClient struct {
	cc *grpc.ClientConn
}

func NewOpenRcaServiceClient(cc *grpc.ClientConn) OpenRcaServiceClient {
	return &openRcaServiceClient{cc}
}

func (c *openRcaServiceClient) StreamCoreMetrics(ctx context.Context, in *OrcaLoadReportRequest, opts ...grpc.CallOption) (OpenRcaService_StreamCoreMetricsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_OpenRcaService_serviceDesc.Streams[0], "/udpa.service.orca.v1.OpenRcaService/StreamCoreMetrics", opts...)
	if err != nil {
		return nil, err
	}
	x := &openRcaServiceStreamCoreMetricsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OpenRcaService_StreamCoreMetricsClient interface {
	Recv() (*v1.OrcaLoadReport, error)
	grpc.ClientStream
}

type openRcaServiceStreamCoreMetricsClient struct {
	grpc.ClientStream
}

func (x *openRcaServiceStreamCoreMetricsClient) Recv() (*v1.OrcaLoadReport, error) {
	m := new(v1.OrcaLoadReport)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OpenRcaServiceServer is the server API for OpenRcaService service.
type OpenRcaServiceServer interface {
	StreamCoreMetrics(*OrcaLoadReportRequest, OpenRcaService_StreamCoreMetricsServer) error
}

func RegisterOpenRcaServiceServer(s *grpc.Server, srv OpenRcaServiceServer) {
	s.RegisterService(&_OpenRcaService_serviceDesc, srv)
}

func _OpenRcaService_StreamCoreMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OrcaLoadReportRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OpenRcaServiceServer).StreamCoreMetrics(m, &openRcaServiceStreamCoreMetricsServer{stream})
}

type OpenRcaService_StreamCoreMetricsServer interface {
	Send(*v1.OrcaLoadReport) error
	grpc.ServerStream
}

type openRcaServiceStreamCoreMetricsServer struct {
	grpc.ServerStream
}

func (x *openRcaServiceStreamCoreMetricsServer) Send(m *v1.OrcaLoadReport) error {
	return x.ServerStream.SendMsg(m)
}

var _OpenRcaService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "udpa.service.orca.v1.OpenRcaService",
	HandlerType: (*OpenRcaServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamCoreMetrics",
			Handler:       _OpenRcaService_StreamCoreMetrics_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "udpa/service/orca/v1/orca.proto",
}
