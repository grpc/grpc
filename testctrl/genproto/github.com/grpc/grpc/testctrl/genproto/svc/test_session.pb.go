// Code generated by protoc-gen-go. DO NOT EDIT.
// source: test_session.proto

package svc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	longrunning "google.golang.org/genproto/googleapis/longrunning"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
	testing "src/proto/grpc/testing"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TestSessionMetadata_RunPhase int32

const (
	// The test session is waiting for idle nodes to schedule pods.
	TestSessionMetadata_QUEUED TestSessionMetadata_RunPhase = 0
	// Kubernetes is creating and starting the test pods.
	TestSessionMetadata_SETUP TestSessionMetadata_RunPhase = 1
	// The driver is waiting for the workers to warmup.
	TestSessionMetadata_WARMUP TestSessionMetadata_RunPhase = 2
	// The tests are running and metrics are being collected.
	TestSessionMetadata_TESTING TestSessionMetadata_RunPhase = 3
	// Results are being saved to persistent storage.
	TestSessionMetadata_REPORTING TestSessionMetadata_RunPhase = 4
)

var TestSessionMetadata_RunPhase_name = map[int32]string{
	0: "QUEUED",
	1: "SETUP",
	2: "WARMUP",
	3: "TESTING",
	4: "REPORTING",
}

var TestSessionMetadata_RunPhase_value = map[string]int32{
	"QUEUED":    0,
	"SETUP":     1,
	"WARMUP":    2,
	"TESTING":   3,
	"REPORTING": 4,
}

func (x TestSessionMetadata_RunPhase) String() string {
	return proto.EnumName(TestSessionMetadata_RunPhase_name, int32(x))
}

func (TestSessionMetadata_RunPhase) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a1b4997a3f60ea72, []int{2, 0}
}

type StartTestSessionRequest struct {
	// The test scenarios to run as a part of the test session.
	Scenarios []*testing.Scenario `protobuf:"bytes,1,rep,name=scenarios,proto3" json:"scenarios,omitempty"`
	// The name and tag of the docker image which starts the driver.
	//
	// Name and tag should be colon delimited.  If this field is not specified,
	// the latest driver version that was built will be used.  It's version number
	// will be made available in the test session response.
	DriverContainerImage string `protobuf:"bytes,2,opt,name=driver_container_image,json=driverContainerImage,proto3" json:"driver_container_image,omitempty"`
	// The name and tag of the docker image which starts a worker.
	//
	// Name and tag should be colon delimited.  The same worker image is expected
	// to be used for the client and servers.  Workers are passed a WORKER_KIND
	// environment variable, specifying either "server" or "client".
	WorkerContainerImage string `protobuf:"bytes,3,opt,name=worker_container_image,json=workerContainerImage,proto3" json:"worker_container_image,omitempty"`
	// An optional location where the results should be written.
	//
	// Types that are valid to be assigned to ResultDestination:
	//	*StartTestSessionRequest_BqResultsTable
	//	*StartTestSessionRequest_GcsResultsFileUri
	ResultDestination    isStartTestSessionRequest_ResultDestination `protobuf_oneof:"result_destination"`
	XXX_NoUnkeyedLiteral struct{}                                    `json:"-"`
	XXX_unrecognized     []byte                                      `json:"-"`
	XXX_sizecache        int32                                       `json:"-"`
}

func (m *StartTestSessionRequest) Reset()         { *m = StartTestSessionRequest{} }
func (m *StartTestSessionRequest) String() string { return proto.CompactTextString(m) }
func (*StartTestSessionRequest) ProtoMessage()    {}
func (*StartTestSessionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1b4997a3f60ea72, []int{0}
}

func (m *StartTestSessionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartTestSessionRequest.Unmarshal(m, b)
}
func (m *StartTestSessionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartTestSessionRequest.Marshal(b, m, deterministic)
}
func (m *StartTestSessionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartTestSessionRequest.Merge(m, src)
}
func (m *StartTestSessionRequest) XXX_Size() int {
	return xxx_messageInfo_StartTestSessionRequest.Size(m)
}
func (m *StartTestSessionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartTestSessionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartTestSessionRequest proto.InternalMessageInfo

func (m *StartTestSessionRequest) GetScenarios() []*testing.Scenario {
	if m != nil {
		return m.Scenarios
	}
	return nil
}

func (m *StartTestSessionRequest) GetDriverContainerImage() string {
	if m != nil {
		return m.DriverContainerImage
	}
	return ""
}

func (m *StartTestSessionRequest) GetWorkerContainerImage() string {
	if m != nil {
		return m.WorkerContainerImage
	}
	return ""
}

type isStartTestSessionRequest_ResultDestination interface {
	isStartTestSessionRequest_ResultDestination()
}

type StartTestSessionRequest_BqResultsTable struct {
	BqResultsTable string `protobuf:"bytes,4,opt,name=bq_results_table,json=bqResultsTable,proto3,oneof"`
}

type StartTestSessionRequest_GcsResultsFileUri struct {
	GcsResultsFileUri string `protobuf:"bytes,5,opt,name=gcs_results_file_uri,json=gcsResultsFileUri,proto3,oneof"`
}

func (*StartTestSessionRequest_BqResultsTable) isStartTestSessionRequest_ResultDestination() {}

func (*StartTestSessionRequest_GcsResultsFileUri) isStartTestSessionRequest_ResultDestination() {}

func (m *StartTestSessionRequest) GetResultDestination() isStartTestSessionRequest_ResultDestination {
	if m != nil {
		return m.ResultDestination
	}
	return nil
}

func (m *StartTestSessionRequest) GetBqResultsTable() string {
	if x, ok := m.GetResultDestination().(*StartTestSessionRequest_BqResultsTable); ok {
		return x.BqResultsTable
	}
	return ""
}

func (m *StartTestSessionRequest) GetGcsResultsFileUri() string {
	if x, ok := m.GetResultDestination().(*StartTestSessionRequest_GcsResultsFileUri); ok {
		return x.GcsResultsFileUri
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*StartTestSessionRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*StartTestSessionRequest_BqResultsTable)(nil),
		(*StartTestSessionRequest_GcsResultsFileUri)(nil),
	}
}

type TestSessionResults struct {
	// The results for each scenario.
	ScenarioResults []*testing.ScenarioResult `protobuf:"bytes,1,rep,name=scenario_results,json=scenarioResults,proto3" json:"scenario_results,omitempty"`
	// The amount of time that this session lived, including scheduling to
	// to reporting results.
	TimeElapsed          *duration.Duration `protobuf:"bytes,2,opt,name=time_elapsed,json=timeElapsed,proto3" json:"time_elapsed,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TestSessionResults) Reset()         { *m = TestSessionResults{} }
func (m *TestSessionResults) String() string { return proto.CompactTextString(m) }
func (*TestSessionResults) ProtoMessage()    {}
func (*TestSessionResults) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1b4997a3f60ea72, []int{1}
}

func (m *TestSessionResults) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestSessionResults.Unmarshal(m, b)
}
func (m *TestSessionResults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestSessionResults.Marshal(b, m, deterministic)
}
func (m *TestSessionResults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestSessionResults.Merge(m, src)
}
func (m *TestSessionResults) XXX_Size() int {
	return xxx_messageInfo_TestSessionResults.Size(m)
}
func (m *TestSessionResults) XXX_DiscardUnknown() {
	xxx_messageInfo_TestSessionResults.DiscardUnknown(m)
}

var xxx_messageInfo_TestSessionResults proto.InternalMessageInfo

func (m *TestSessionResults) GetScenarioResults() []*testing.ScenarioResult {
	if m != nil {
		return m.ScenarioResults
	}
	return nil
}

func (m *TestSessionResults) GetTimeElapsed() *duration.Duration {
	if m != nil {
		return m.TimeElapsed
	}
	return nil
}

type TestSessionMetadata struct {
	// If the session has not terminated, this field is included to provide
	// progress updates.
	Phase TestSessionMetadata_RunPhase `protobuf:"varint,1,opt,name=phase,proto3,enum=proto.TestSessionMetadata_RunPhase" json:"phase,omitempty"`
	// The version number for the Go driver that was tested.
	DriverVersion string `protobuf:"bytes,3,opt,name=driver_version,json=driverVersion,proto3" json:"driver_version,omitempty"`
	// The name of the kubernetes cluster where tests were run.
	GkeCluster           string   `protobuf:"bytes,4,opt,name=gke_cluster,json=gkeCluster,proto3" json:"gke_cluster,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestSessionMetadata) Reset()         { *m = TestSessionMetadata{} }
func (m *TestSessionMetadata) String() string { return proto.CompactTextString(m) }
func (*TestSessionMetadata) ProtoMessage()    {}
func (*TestSessionMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1b4997a3f60ea72, []int{2}
}

func (m *TestSessionMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestSessionMetadata.Unmarshal(m, b)
}
func (m *TestSessionMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestSessionMetadata.Marshal(b, m, deterministic)
}
func (m *TestSessionMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestSessionMetadata.Merge(m, src)
}
func (m *TestSessionMetadata) XXX_Size() int {
	return xxx_messageInfo_TestSessionMetadata.Size(m)
}
func (m *TestSessionMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_TestSessionMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_TestSessionMetadata proto.InternalMessageInfo

func (m *TestSessionMetadata) GetPhase() TestSessionMetadata_RunPhase {
	if m != nil {
		return m.Phase
	}
	return TestSessionMetadata_QUEUED
}

func (m *TestSessionMetadata) GetDriverVersion() string {
	if m != nil {
		return m.DriverVersion
	}
	return ""
}

func (m *TestSessionMetadata) GetGkeCluster() string {
	if m != nil {
		return m.GkeCluster
	}
	return ""
}

func init() {
	proto.RegisterEnum("proto.TestSessionMetadata_RunPhase", TestSessionMetadata_RunPhase_name, TestSessionMetadata_RunPhase_value)
	proto.RegisterType((*StartTestSessionRequest)(nil), "proto.StartTestSessionRequest")
	proto.RegisterType((*TestSessionResults)(nil), "proto.TestSessionResults")
	proto.RegisterType((*TestSessionMetadata)(nil), "proto.TestSessionMetadata")
}

func init() { proto.RegisterFile("test_session.proto", fileDescriptor_a1b4997a3f60ea72) }

var fileDescriptor_a1b4997a3f60ea72 = []byte{
	// 575 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0xdf, 0x6e, 0xd3, 0x3e,
	0x14, 0xc7, 0x97, 0x75, 0xdd, 0xef, 0x57, 0x77, 0x2b, 0xc1, 0x54, 0xa3, 0x54, 0x30, 0xaa, 0x0e,
	0xa4, 0x32, 0x4d, 0x89, 0x28, 0xbb, 0x41, 0xe2, 0x66, 0x7f, 0xc2, 0xe8, 0xc5, 0x58, 0x71, 0x5b,
	0x90, 0xb8, 0x89, 0x92, 0xf4, 0xcc, 0xb3, 0x9a, 0xc6, 0xad, 0xed, 0x94, 0x4b, 0x1e, 0x81, 0x07,
	0xe0, 0x25, 0x78, 0x0e, 0x5e, 0x83, 0x17, 0x41, 0x8e, 0x93, 0xd2, 0x4d, 0xdd, 0x55, 0xeb, 0x73,
	0x3e, 0xdf, 0x63, 0xe7, 0x7b, 0xce, 0x41, 0x58, 0x81, 0x54, 0xbe, 0x04, 0x29, 0x19, 0x4f, 0x9c,
	0x99, 0xe0, 0x8a, 0xe3, 0x72, 0xf6, 0xd3, 0xdc, 0xa7, 0x9c, 0xd3, 0x18, 0xdc, 0xec, 0x14, 0xa6,
	0xd7, 0xee, 0x38, 0x15, 0x81, 0x5a, 0x62, 0xcd, 0x83, 0x3c, 0x1f, 0xf3, 0x84, 0x8a, 0x34, 0x49,
	0x58, 0x42, 0x5d, 0x3e, 0x03, 0xc3, 0xc8, 0x1c, 0x7a, 0x21, 0x45, 0x64, 0x2a, 0xb8, 0x54, 0xcc,
	0x22, 0x57, 0x5f, 0xa7, 0xc1, 0x88, 0x27, 0x4a, 0xf0, 0xd8, 0x50, 0xed, 0x5f, 0x9b, 0xe8, 0xf1,
	0x40, 0x05, 0x42, 0x0d, 0x41, 0xaa, 0x81, 0x79, 0x0c, 0x81, 0x79, 0x0a, 0x52, 0xe1, 0x63, 0x54,
	0x91, 0x11, 0x24, 0x81, 0x60, 0x5c, 0x36, 0xac, 0x56, 0xa9, 0x53, 0xed, 0xee, 0x39, 0xba, 0x96,
	0x93, 0xd7, 0x72, 0x06, 0x79, 0x9a, 0xfc, 0x03, 0xf1, 0x31, 0xda, 0x1b, 0x0b, 0xb6, 0x00, 0xe1,
	0xeb, 0x9b, 0x02, 0x96, 0x80, 0xf0, 0xd9, 0x34, 0xa0, 0xd0, 0xd8, 0x6c, 0x59, 0x9d, 0x0a, 0xa9,
	0x9b, 0xec, 0x59, 0x91, 0xec, 0xe9, 0x9c, 0x56, 0x7d, 0xe3, 0x62, 0xb2, 0x46, 0x55, 0x32, 0x2a,
	0x93, 0xbd, 0xa3, 0x3a, 0x44, 0x76, 0x38, 0xf7, 0x05, 0xc8, 0x34, 0x56, 0xd2, 0x57, 0x41, 0x18,
	0x43, 0x63, 0x4b, 0xf3, 0x1f, 0x36, 0x48, 0x2d, 0x9c, 0x13, 0x93, 0x18, 0xea, 0x38, 0x7e, 0x8d,
	0xea, 0x34, 0x92, 0x4b, 0xf8, 0x9a, 0xc5, 0xe0, 0xa7, 0x82, 0x35, 0xca, 0x39, 0xff, 0x90, 0x46,
	0x32, 0x17, 0xbc, 0x67, 0x31, 0x8c, 0x04, 0x3b, 0xad, 0x23, 0x6c, 0x70, 0x7f, 0x9c, 0x7d, 0x70,
	0xe6, 0x6f, 0xfb, 0xa7, 0x85, 0xf0, 0x2d, 0xb7, 0x32, 0x0d, 0xbe, 0x40, 0x76, 0x61, 0x42, 0x71,
	0x49, 0x6e, 0xda, 0xd3, 0x7b, 0x4c, 0xcb, 0x20, 0xf2, 0x40, 0xde, 0x3a, 0x4b, 0xfc, 0x0e, 0xed,
	0x28, 0x36, 0x05, 0x1f, 0xe2, 0x60, 0x26, 0x61, 0x9c, 0xd9, 0x56, 0xed, 0x3e, 0x71, 0x4c, 0xd3,
	0x9d, 0x62, 0x28, 0x9c, 0xf3, 0x7c, 0x28, 0x48, 0x55, 0xe3, 0x9e, 0xa1, 0xdb, 0x7f, 0x2c, 0xf4,
	0x68, 0xe5, 0x75, 0x97, 0xa0, 0x82, 0x71, 0xa0, 0x02, 0xfc, 0x16, 0x95, 0x67, 0x37, 0x81, 0x84,
	0x86, 0xd5, 0xb2, 0x3a, 0xb5, 0xee, 0x81, 0xa9, 0xe3, 0xac, 0x41, 0x1d, 0x92, 0x26, 0x7d, 0x8d,
	0x12, 0xa3, 0xc0, 0x2f, 0x51, 0x2d, 0xef, 0xe8, 0x02, 0x84, 0x26, 0xf3, 0x9e, 0xec, 0x9a, 0xe8,
	0x67, 0x13, 0xc4, 0xcf, 0x51, 0x95, 0x4e, 0xc0, 0x8f, 0xe2, 0x54, 0x2a, 0x10, 0xa6, 0x0f, 0x04,
	0xd1, 0x09, 0x9c, 0x99, 0x48, 0xbb, 0x87, 0xfe, 0x2f, 0x4a, 0x63, 0x84, 0xb6, 0x3f, 0x8d, 0xbc,
	0x91, 0x77, 0x6e, 0x6f, 0xe0, 0x0a, 0x2a, 0x0f, 0xbc, 0xe1, 0xa8, 0x6f, 0x5b, 0x3a, 0xfc, 0xe5,
	0x84, 0x5c, 0x8e, 0xfa, 0xf6, 0x26, 0xae, 0xa2, 0xff, 0x86, 0xde, 0x60, 0xd8, 0xfb, 0x78, 0x61,
	0x97, 0xf0, 0x2e, 0xaa, 0x10, 0xaf, 0x7f, 0x45, 0xb2, 0xe3, 0x56, 0xf7, 0x87, 0x85, 0x76, 0x56,
	0x9e, 0x2e, 0xf1, 0x77, 0x64, 0xdf, 0x1d, 0x63, 0xbc, 0x9f, 0x7f, 0xe3, 0x3d, 0xf3, 0xdd, 0x7c,
	0x56, 0x58, 0xba, 0xb2, 0x47, 0xce, 0x55, 0xb1, 0x47, 0xed, 0xa3, 0xdf, 0x27, 0xaf, 0xd6, 0x76,
	0x7a, 0x9d, 0xbf, 0xa7, 0x47, 0x5f, 0x0f, 0x29, 0x53, 0x37, 0x69, 0xe8, 0x44, 0x7c, 0x6a, 0x36,
	0x6e, 0xb9, 0x76, 0x91, 0x12, 0xb1, 0x4b, 0x21, 0x31, 0xdb, 0x28, 0x17, 0x51, 0xb8, 0x9d, 0xfd,
	0x7d, 0xf3, 0x37, 0x00, 0x00, 0xff, 0xff, 0x3b, 0x6b, 0x20, 0xd6, 0x05, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TestSessionsClient is the client API for TestSessions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestSessionsClient interface {
	// Starts a set of test scenarios.
	//
	// This is a long-running operation that is managed by the Operations service
	// on the same server.  The long-running operation will assign a unique
	// identifier to the session.
	//
	// The unique identifier can be used to poll for the session's status and
	// results.  Streaming is not supported at present.
	//
	// It can also be used to cancel while in progress, but cancellations operate
	// like killing a running process. If they occur while results are being
	// reported, the persistent storage may receive some but not all of them.
	StartTestSession(ctx context.Context, in *StartTestSessionRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
}

type testSessionsClient struct {
	cc *grpc.ClientConn
}

func NewTestSessionsClient(cc *grpc.ClientConn) TestSessionsClient {
	return &testSessionsClient{cc}
}

func (c *testSessionsClient) StartTestSession(ctx context.Context, in *StartTestSessionRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/proto.TestSessions/StartTestSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestSessionsServer is the server API for TestSessions service.
type TestSessionsServer interface {
	// Starts a set of test scenarios.
	//
	// This is a long-running operation that is managed by the Operations service
	// on the same server.  The long-running operation will assign a unique
	// identifier to the session.
	//
	// The unique identifier can be used to poll for the session's status and
	// results.  Streaming is not supported at present.
	//
	// It can also be used to cancel while in progress, but cancellations operate
	// like killing a running process. If they occur while results are being
	// reported, the persistent storage may receive some but not all of them.
	StartTestSession(context.Context, *StartTestSessionRequest) (*longrunning.Operation, error)
}

// UnimplementedTestSessionsServer can be embedded to have forward compatible implementations.
type UnimplementedTestSessionsServer struct {
}

func (*UnimplementedTestSessionsServer) StartTestSession(ctx context.Context, req *StartTestSessionRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTestSession not implemented")
}

func RegisterTestSessionsServer(s *grpc.Server, srv TestSessionsServer) {
	s.RegisterService(&_TestSessions_serviceDesc, srv)
}

func _TestSessions_StartTestSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartTestSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestSessionsServer).StartTestSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TestSessions/StartTestSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestSessionsServer).StartTestSession(ctx, req.(*StartTestSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestSessions_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TestSessions",
	HandlerType: (*TestSessionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartTestSession",
			Handler:    _TestSessions_StartTestSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test_session.proto",
}
