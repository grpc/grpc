// Code generated by protoc-gen-go. DO NOT EDIT.
// source: src/proto/grpc/testing/compiler_test.proto

// Ignored package leading comment

package grpc_testing

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Request struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_cfd871303c702934, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

type Response struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_cfd871303c702934, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Request)(nil), "grpc.testing.Request")
	proto.RegisterType((*Response)(nil), "grpc.testing.Response")
}

func init() {
	proto.RegisterFile("src/proto/grpc/testing/compiler_test.proto", fileDescriptor_cfd871303c702934)
}

var fileDescriptor_cfd871303c702934 = []byte{
	// 175 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x2a, 0x2e, 0x4a, 0xd6,
	0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x4f, 0x2f, 0x2a, 0x48, 0xd6, 0x2f, 0x49, 0x2d, 0x2e, 0xc9,
	0xcc, 0x4b, 0xd7, 0x4f, 0xce, 0xcf, 0x2d, 0xc8, 0xcc, 0x49, 0x2d, 0x8a, 0x07, 0x09, 0xe8, 0x81,
	0x15, 0x08, 0xf1, 0x80, 0x54, 0xe8, 0x41, 0x55, 0x28, 0x71, 0x72, 0xb1, 0x07, 0xa5, 0x16, 0x96,
	0xa6, 0x16, 0x97, 0x28, 0x71, 0x71, 0x71, 0x04, 0xa5, 0x16, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x1a,
	0xfd, 0x63, 0xe4, 0xe2, 0x08, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x75, 0x14, 0xb2, 0xe4, 0xe2,
	0xf0, 0x4d, 0x2d, 0xc9, 0xc8, 0x4f, 0x71, 0x34, 0x14, 0x12, 0xd5, 0x43, 0xd6, 0xae, 0x07, 0xd5,
	0x2b, 0x25, 0x86, 0x2e, 0x0c, 0x31, 0x47, 0xc8, 0x1a, 0xae, 0xd5, 0x88, 0x44, 0xad, 0x1a, 0x8c,
	0x48, 0x9a, 0x8d, 0x49, 0xd4, 0x6c, 0xc0, 0x28, 0x64, 0x0b, 0xd7, 0x6c, 0x42, 0xb2, 0xcd, 0x06,
	0x8c, 0x46, 0xae, 0x70, 0xff, 0x3b, 0x21, 0xfc, 0xef, 0x44, 0xaa, 0xff, 0x93, 0xd8, 0xc0, 0x61,
	0x6e, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x91, 0x43, 0x57, 0x6b, 0xa1, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServiceAClient is the client API for ServiceA service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceAClient interface {
	// MethodA1 leading comment 1
	MethodA1(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// Method A2 leading comment 1
	// Method A2 leading comment 2
	MethodA2(ctx context.Context, opts ...grpc.CallOption) (ServiceA_MethodA2Client, error)
	// Method A3 leading comment 1
	MethodA3(ctx context.Context, in *Request, opts ...grpc.CallOption) (ServiceA_MethodA3Client, error)
	// Method A4 leading comment 1
	MethodA4(ctx context.Context, opts ...grpc.CallOption) (ServiceA_MethodA4Client, error)
}

type serviceAClient struct {
	cc *grpc.ClientConn
}

func NewServiceAClient(cc *grpc.ClientConn) ServiceAClient {
	return &serviceAClient{cc}
}

func (c *serviceAClient) MethodA1(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.testing.ServiceA/MethodA1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAClient) MethodA2(ctx context.Context, opts ...grpc.CallOption) (ServiceA_MethodA2Client, error) {
	stream, err := c.cc.NewStream(ctx, &_ServiceA_serviceDesc.Streams[0], "/grpc.testing.ServiceA/MethodA2", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceAMethodA2Client{stream}
	return x, nil
}

type ServiceA_MethodA2Client interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type serviceAMethodA2Client struct {
	grpc.ClientStream
}

func (x *serviceAMethodA2Client) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceAMethodA2Client) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceAClient) MethodA3(ctx context.Context, in *Request, opts ...grpc.CallOption) (ServiceA_MethodA3Client, error) {
	stream, err := c.cc.NewStream(ctx, &_ServiceA_serviceDesc.Streams[1], "/grpc.testing.ServiceA/MethodA3", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceAMethodA3Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServiceA_MethodA3Client interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type serviceAMethodA3Client struct {
	grpc.ClientStream
}

func (x *serviceAMethodA3Client) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceAClient) MethodA4(ctx context.Context, opts ...grpc.CallOption) (ServiceA_MethodA4Client, error) {
	stream, err := c.cc.NewStream(ctx, &_ServiceA_serviceDesc.Streams[2], "/grpc.testing.ServiceA/MethodA4", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceAMethodA4Client{stream}
	return x, nil
}

type ServiceA_MethodA4Client interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type serviceAMethodA4Client struct {
	grpc.ClientStream
}

func (x *serviceAMethodA4Client) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceAMethodA4Client) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceAServer is the server API for ServiceA service.
type ServiceAServer interface {
	// MethodA1 leading comment 1
	MethodA1(context.Context, *Request) (*Response, error)
	// Method A2 leading comment 1
	// Method A2 leading comment 2
	MethodA2(ServiceA_MethodA2Server) error
	// Method A3 leading comment 1
	MethodA3(*Request, ServiceA_MethodA3Server) error
	// Method A4 leading comment 1
	MethodA4(ServiceA_MethodA4Server) error
}

// UnimplementedServiceAServer can be embedded to have forward compatible implementations.
type UnimplementedServiceAServer struct {
}

func (*UnimplementedServiceAServer) MethodA1(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MethodA1 not implemented")
}
func (*UnimplementedServiceAServer) MethodA2(srv ServiceA_MethodA2Server) error {
	return status.Errorf(codes.Unimplemented, "method MethodA2 not implemented")
}
func (*UnimplementedServiceAServer) MethodA3(req *Request, srv ServiceA_MethodA3Server) error {
	return status.Errorf(codes.Unimplemented, "method MethodA3 not implemented")
}
func (*UnimplementedServiceAServer) MethodA4(srv ServiceA_MethodA4Server) error {
	return status.Errorf(codes.Unimplemented, "method MethodA4 not implemented")
}

func RegisterServiceAServer(s *grpc.Server, srv ServiceAServer) {
	s.RegisterService(&_ServiceA_serviceDesc, srv)
}

func _ServiceA_MethodA1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAServer).MethodA1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.testing.ServiceA/MethodA1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAServer).MethodA1(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceA_MethodA2_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceAServer).MethodA2(&serviceAMethodA2Server{stream})
}

type ServiceA_MethodA2Server interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type serviceAMethodA2Server struct {
	grpc.ServerStream
}

func (x *serviceAMethodA2Server) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceAMethodA2Server) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ServiceA_MethodA3_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceAServer).MethodA3(m, &serviceAMethodA3Server{stream})
}

type ServiceA_MethodA3Server interface {
	Send(*Response) error
	grpc.ServerStream
}

type serviceAMethodA3Server struct {
	grpc.ServerStream
}

func (x *serviceAMethodA3Server) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _ServiceA_MethodA4_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceAServer).MethodA4(&serviceAMethodA4Server{stream})
}

type ServiceA_MethodA4Server interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type serviceAMethodA4Server struct {
	grpc.ServerStream
}

func (x *serviceAMethodA4Server) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceAMethodA4Server) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ServiceA_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.testing.ServiceA",
	HandlerType: (*ServiceAServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MethodA1",
			Handler:    _ServiceA_MethodA1_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MethodA2",
			Handler:       _ServiceA_MethodA2_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "MethodA3",
			Handler:       _ServiceA_MethodA3_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MethodA4",
			Handler:       _ServiceA_MethodA4_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "src/proto/grpc/testing/compiler_test.proto",
}

// ServiceBClient is the client API for ServiceB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceBClient interface {
	// MethodB1 leading comment 1
	MethodB1(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type serviceBClient struct {
	cc *grpc.ClientConn
}

func NewServiceBClient(cc *grpc.ClientConn) ServiceBClient {
	return &serviceBClient{cc}
}

func (c *serviceBClient) MethodB1(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.testing.ServiceB/MethodB1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceBServer is the server API for ServiceB service.
type ServiceBServer interface {
	// MethodB1 leading comment 1
	MethodB1(context.Context, *Request) (*Response, error)
}

// UnimplementedServiceBServer can be embedded to have forward compatible implementations.
type UnimplementedServiceBServer struct {
}

func (*UnimplementedServiceBServer) MethodB1(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MethodB1 not implemented")
}

func RegisterServiceBServer(s *grpc.Server, srv ServiceBServer) {
	s.RegisterService(&_ServiceB_serviceDesc, srv)
}

func _ServiceB_MethodB1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceBServer).MethodB1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.testing.ServiceB/MethodB1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceBServer).MethodB1(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServiceB_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.testing.ServiceB",
	HandlerType: (*ServiceBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MethodB1",
			Handler:    _ServiceB_MethodB1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/proto/grpc/testing/compiler_test.proto",
}
