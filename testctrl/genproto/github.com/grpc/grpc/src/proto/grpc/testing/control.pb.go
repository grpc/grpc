// Code generated by protoc-gen-go. DO NOT EDIT.
// source: src/proto/grpc/testing/control.proto

package grpc_testing

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ClientType int32

const (
	// Many languages support a basic distinction between using
	// sync or async client, and this allows the specification
	ClientType_SYNC_CLIENT     ClientType = 0
	ClientType_ASYNC_CLIENT    ClientType = 1
	ClientType_OTHER_CLIENT    ClientType = 2
	ClientType_CALLBACK_CLIENT ClientType = 3
)

var ClientType_name = map[int32]string{
	0: "SYNC_CLIENT",
	1: "ASYNC_CLIENT",
	2: "OTHER_CLIENT",
	3: "CALLBACK_CLIENT",
}

var ClientType_value = map[string]int32{
	"SYNC_CLIENT":     0,
	"ASYNC_CLIENT":    1,
	"OTHER_CLIENT":    2,
	"CALLBACK_CLIENT": 3,
}

func (x ClientType) String() string {
	return proto.EnumName(ClientType_name, int32(x))
}

func (ClientType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2202fdf8e6917d5d, []int{0}
}

type ServerType int32

const (
	ServerType_SYNC_SERVER          ServerType = 0
	ServerType_ASYNC_SERVER         ServerType = 1
	ServerType_ASYNC_GENERIC_SERVER ServerType = 2
	ServerType_OTHER_SERVER         ServerType = 3
	ServerType_CALLBACK_SERVER      ServerType = 4
)

var ServerType_name = map[int32]string{
	0: "SYNC_SERVER",
	1: "ASYNC_SERVER",
	2: "ASYNC_GENERIC_SERVER",
	3: "OTHER_SERVER",
	4: "CALLBACK_SERVER",
}

var ServerType_value = map[string]int32{
	"SYNC_SERVER":          0,
	"ASYNC_SERVER":         1,
	"ASYNC_GENERIC_SERVER": 2,
	"OTHER_SERVER":         3,
	"CALLBACK_SERVER":      4,
}

func (x ServerType) String() string {
	return proto.EnumName(ServerType_name, int32(x))
}

func (ServerType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2202fdf8e6917d5d, []int{1}
}

type RpcType int32

const (
	RpcType_UNARY                 RpcType = 0
	RpcType_STREAMING             RpcType = 1
	RpcType_STREAMING_FROM_CLIENT RpcType = 2
	RpcType_STREAMING_FROM_SERVER RpcType = 3
	RpcType_STREAMING_BOTH_WAYS   RpcType = 4
)

var RpcType_name = map[int32]string{
	0: "UNARY",
	1: "STREAMING",
	2: "STREAMING_FROM_CLIENT",
	3: "STREAMING_FROM_SERVER",
	4: "STREAMING_BOTH_WAYS",
}

var RpcType_value = map[string]int32{
	"UNARY":                 0,
	"STREAMING":             1,
	"STREAMING_FROM_CLIENT": 2,
	"STREAMING_FROM_SERVER": 3,
	"STREAMING_BOTH_WAYS":   4,
}

func (x RpcType) String() string {
	return proto.EnumName(RpcType_name, int32(x))
}

func (RpcType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2202fdf8e6917d5d, []int{2}
}

// Parameters of poisson process distribution, which is a good representation
// of activity coming in from independent identical stationary sources.
type PoissonParams struct {
	// The rate of arrivals (a.k.a. lambda parameter of the exp distribution).
	OfferedLoad          float64  `protobuf:"fixed64,1,opt,name=offered_load,json=offeredLoad,proto3" json:"offered_load,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PoissonParams) Reset()         { *m = PoissonParams{} }
func (m *PoissonParams) String() string { return proto.CompactTextString(m) }
func (*PoissonParams) ProtoMessage()    {}
func (*PoissonParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_2202fdf8e6917d5d, []int{0}
}

func (m *PoissonParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PoissonParams.Unmarshal(m, b)
}
func (m *PoissonParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PoissonParams.Marshal(b, m, deterministic)
}
func (m *PoissonParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoissonParams.Merge(m, src)
}
func (m *PoissonParams) XXX_Size() int {
	return xxx_messageInfo_PoissonParams.Size(m)
}
func (m *PoissonParams) XXX_DiscardUnknown() {
	xxx_messageInfo_PoissonParams.DiscardUnknown(m)
}

var xxx_messageInfo_PoissonParams proto.InternalMessageInfo

func (m *PoissonParams) GetOfferedLoad() float64 {
	if m != nil {
		return m.OfferedLoad
	}
	return 0
}

// Once an RPC finishes, immediately start a new one.
// No configuration parameters needed.
type ClosedLoopParams struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClosedLoopParams) Reset()         { *m = ClosedLoopParams{} }
func (m *ClosedLoopParams) String() string { return proto.CompactTextString(m) }
func (*ClosedLoopParams) ProtoMessage()    {}
func (*ClosedLoopParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_2202fdf8e6917d5d, []int{1}
}

func (m *ClosedLoopParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClosedLoopParams.Unmarshal(m, b)
}
func (m *ClosedLoopParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClosedLoopParams.Marshal(b, m, deterministic)
}
func (m *ClosedLoopParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClosedLoopParams.Merge(m, src)
}
func (m *ClosedLoopParams) XXX_Size() int {
	return xxx_messageInfo_ClosedLoopParams.Size(m)
}
func (m *ClosedLoopParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ClosedLoopParams.DiscardUnknown(m)
}

var xxx_messageInfo_ClosedLoopParams proto.InternalMessageInfo

type LoadParams struct {
	// Types that are valid to be assigned to Load:
	//	*LoadParams_ClosedLoop
	//	*LoadParams_Poisson
	Load                 isLoadParams_Load `protobuf_oneof:"load"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *LoadParams) Reset()         { *m = LoadParams{} }
func (m *LoadParams) String() string { return proto.CompactTextString(m) }
func (*LoadParams) ProtoMessage()    {}
func (*LoadParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_2202fdf8e6917d5d, []int{2}
}

func (m *LoadParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadParams.Unmarshal(m, b)
}
func (m *LoadParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadParams.Marshal(b, m, deterministic)
}
func (m *LoadParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadParams.Merge(m, src)
}
func (m *LoadParams) XXX_Size() int {
	return xxx_messageInfo_LoadParams.Size(m)
}
func (m *LoadParams) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadParams.DiscardUnknown(m)
}

var xxx_messageInfo_LoadParams proto.InternalMessageInfo

type isLoadParams_Load interface {
	isLoadParams_Load()
}

type LoadParams_ClosedLoop struct {
	ClosedLoop *ClosedLoopParams `protobuf:"bytes,1,opt,name=closed_loop,json=closedLoop,proto3,oneof"`
}

type LoadParams_Poisson struct {
	Poisson *PoissonParams `protobuf:"bytes,2,opt,name=poisson,proto3,oneof"`
}

func (*LoadParams_ClosedLoop) isLoadParams_Load() {}

func (*LoadParams_Poisson) isLoadParams_Load() {}

func (m *LoadParams) GetLoad() isLoadParams_Load {
	if m != nil {
		return m.Load
	}
	return nil
}

func (m *LoadParams) GetClosedLoop() *ClosedLoopParams {
	if x, ok := m.GetLoad().(*LoadParams_ClosedLoop); ok {
		return x.ClosedLoop
	}
	return nil
}

func (m *LoadParams) GetPoisson() *PoissonParams {
	if x, ok := m.GetLoad().(*LoadParams_Poisson); ok {
		return x.Poisson
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*LoadParams) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*LoadParams_ClosedLoop)(nil),
		(*LoadParams_Poisson)(nil),
	}
}

// presence of SecurityParams implies use of TLS
type SecurityParams struct {
	UseTestCa            bool     `protobuf:"varint,1,opt,name=use_test_ca,json=useTestCa,proto3" json:"use_test_ca,omitempty"`
	ServerHostOverride   string   `protobuf:"bytes,2,opt,name=server_host_override,json=serverHostOverride,proto3" json:"server_host_override,omitempty"`
	CredType             string   `protobuf:"bytes,3,opt,name=cred_type,json=credType,proto3" json:"cred_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SecurityParams) Reset()         { *m = SecurityParams{} }
func (m *SecurityParams) String() string { return proto.CompactTextString(m) }
func (*SecurityParams) ProtoMessage()    {}
func (*SecurityParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_2202fdf8e6917d5d, []int{3}
}

func (m *SecurityParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SecurityParams.Unmarshal(m, b)
}
func (m *SecurityParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SecurityParams.Marshal(b, m, deterministic)
}
func (m *SecurityParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityParams.Merge(m, src)
}
func (m *SecurityParams) XXX_Size() int {
	return xxx_messageInfo_SecurityParams.Size(m)
}
func (m *SecurityParams) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityParams.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityParams proto.InternalMessageInfo

func (m *SecurityParams) GetUseTestCa() bool {
	if m != nil {
		return m.UseTestCa
	}
	return false
}

func (m *SecurityParams) GetServerHostOverride() string {
	if m != nil {
		return m.ServerHostOverride
	}
	return ""
}

func (m *SecurityParams) GetCredType() string {
	if m != nil {
		return m.CredType
	}
	return ""
}

type ChannelArg struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are valid to be assigned to Value:
	//	*ChannelArg_StrValue
	//	*ChannelArg_IntValue
	Value                isChannelArg_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ChannelArg) Reset()         { *m = ChannelArg{} }
func (m *ChannelArg) String() string { return proto.CompactTextString(m) }
func (*ChannelArg) ProtoMessage()    {}
func (*ChannelArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_2202fdf8e6917d5d, []int{4}
}

func (m *ChannelArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelArg.Unmarshal(m, b)
}
func (m *ChannelArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelArg.Marshal(b, m, deterministic)
}
func (m *ChannelArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelArg.Merge(m, src)
}
func (m *ChannelArg) XXX_Size() int {
	return xxx_messageInfo_ChannelArg.Size(m)
}
func (m *ChannelArg) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelArg.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelArg proto.InternalMessageInfo

func (m *ChannelArg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type isChannelArg_Value interface {
	isChannelArg_Value()
}

type ChannelArg_StrValue struct {
	StrValue string `protobuf:"bytes,2,opt,name=str_value,json=strValue,proto3,oneof"`
}

type ChannelArg_IntValue struct {
	IntValue int32 `protobuf:"varint,3,opt,name=int_value,json=intValue,proto3,oneof"`
}

func (*ChannelArg_StrValue) isChannelArg_Value() {}

func (*ChannelArg_IntValue) isChannelArg_Value() {}

func (m *ChannelArg) GetValue() isChannelArg_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ChannelArg) GetStrValue() string {
	if x, ok := m.GetValue().(*ChannelArg_StrValue); ok {
		return x.StrValue
	}
	return ""
}

func (m *ChannelArg) GetIntValue() int32 {
	if x, ok := m.GetValue().(*ChannelArg_IntValue); ok {
		return x.IntValue
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ChannelArg) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ChannelArg_StrValue)(nil),
		(*ChannelArg_IntValue)(nil),
	}
}

type ClientConfig struct {
	// List of targets to connect to. At least one target needs to be specified.
	ServerTargets  []string        `protobuf:"bytes,1,rep,name=server_targets,json=serverTargets,proto3" json:"server_targets,omitempty"`
	ClientType     ClientType      `protobuf:"varint,2,opt,name=client_type,json=clientType,proto3,enum=grpc.testing.ClientType" json:"client_type,omitempty"`
	SecurityParams *SecurityParams `protobuf:"bytes,3,opt,name=security_params,json=securityParams,proto3" json:"security_params,omitempty"`
	// How many concurrent RPCs to start for each channel.
	// For synchronous client, use a separate thread for each outstanding RPC.
	OutstandingRpcsPerChannel int32 `protobuf:"varint,4,opt,name=outstanding_rpcs_per_channel,json=outstandingRpcsPerChannel,proto3" json:"outstanding_rpcs_per_channel,omitempty"`
	// Number of independent client channels to create.
	// i-th channel will connect to server_target[i % server_targets.size()]
	ClientChannels int32 `protobuf:"varint,5,opt,name=client_channels,json=clientChannels,proto3" json:"client_channels,omitempty"`
	// Only for async client. Number of threads to use to start/manage RPCs.
	AsyncClientThreads int32   `protobuf:"varint,7,opt,name=async_client_threads,json=asyncClientThreads,proto3" json:"async_client_threads,omitempty"`
	RpcType            RpcType `protobuf:"varint,8,opt,name=rpc_type,json=rpcType,proto3,enum=grpc.testing.RpcType" json:"rpc_type,omitempty"`
	// The requested load for the entire client (aggregated over all the threads).
	LoadParams      *LoadParams      `protobuf:"bytes,10,opt,name=load_params,json=loadParams,proto3" json:"load_params,omitempty"`
	PayloadConfig   *PayloadConfig   `protobuf:"bytes,11,opt,name=payload_config,json=payloadConfig,proto3" json:"payload_config,omitempty"`
	HistogramParams *HistogramParams `protobuf:"bytes,12,opt,name=histogram_params,json=histogramParams,proto3" json:"histogram_params,omitempty"`
	// Specify the cores we should run the client on, if desired
	CoreList  []int32 `protobuf:"varint,13,rep,packed,name=core_list,json=coreList,proto3" json:"core_list,omitempty"`
	CoreLimit int32   `protobuf:"varint,14,opt,name=core_limit,json=coreLimit,proto3" json:"core_limit,omitempty"`
	// If we use an OTHER_CLIENT client_type, this string gives more detail
	OtherClientApi string        `protobuf:"bytes,15,opt,name=other_client_api,json=otherClientApi,proto3" json:"other_client_api,omitempty"`
	ChannelArgs    []*ChannelArg `protobuf:"bytes,16,rep,name=channel_args,json=channelArgs,proto3" json:"channel_args,omitempty"`
	// Number of threads that share each completion queue
	ThreadsPerCq int32 `protobuf:"varint,17,opt,name=threads_per_cq,json=threadsPerCq,proto3" json:"threads_per_cq,omitempty"`
	// Number of messages on a stream before it gets finished/restarted
	MessagesPerStream int32 `protobuf:"varint,18,opt,name=messages_per_stream,json=messagesPerStream,proto3" json:"messages_per_stream,omitempty"`
	// Use coalescing API when possible.
	UseCoalesceApi bool `protobuf:"varint,19,opt,name=use_coalesce_api,json=useCoalesceApi,proto3" json:"use_coalesce_api,omitempty"`
	// If 0, disabled. Else, specifies the period between gathering latency
	// medians in milliseconds.
	MedianLatencyCollectionIntervalMillis int32 `protobuf:"varint,20,opt,name=median_latency_collection_interval_millis,json=medianLatencyCollectionIntervalMillis,proto3" json:"median_latency_collection_interval_millis,omitempty"`
	// Number of client processes. 0 indicates no restriction.
	ClientProcesses      int32    `protobuf:"varint,21,opt,name=client_processes,json=clientProcesses,proto3" json:"client_processes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientConfig) Reset()         { *m = ClientConfig{} }
func (m *ClientConfig) String() string { return proto.CompactTextString(m) }
func (*ClientConfig) ProtoMessage()    {}
func (*ClientConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_2202fdf8e6917d5d, []int{5}
}

func (m *ClientConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientConfig.Unmarshal(m, b)
}
func (m *ClientConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientConfig.Marshal(b, m, deterministic)
}
func (m *ClientConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientConfig.Merge(m, src)
}
func (m *ClientConfig) XXX_Size() int {
	return xxx_messageInfo_ClientConfig.Size(m)
}
func (m *ClientConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ClientConfig proto.InternalMessageInfo

func (m *ClientConfig) GetServerTargets() []string {
	if m != nil {
		return m.ServerTargets
	}
	return nil
}

func (m *ClientConfig) GetClientType() ClientType {
	if m != nil {
		return m.ClientType
	}
	return ClientType_SYNC_CLIENT
}

func (m *ClientConfig) GetSecurityParams() *SecurityParams {
	if m != nil {
		return m.SecurityParams
	}
	return nil
}

func (m *ClientConfig) GetOutstandingRpcsPerChannel() int32 {
	if m != nil {
		return m.OutstandingRpcsPerChannel
	}
	return 0
}

func (m *ClientConfig) GetClientChannels() int32 {
	if m != nil {
		return m.ClientChannels
	}
	return 0
}

func (m *ClientConfig) GetAsyncClientThreads() int32 {
	if m != nil {
		return m.AsyncClientThreads
	}
	return 0
}

func (m *ClientConfig) GetRpcType() RpcType {
	if m != nil {
		return m.RpcType
	}
	return RpcType_UNARY
}

func (m *ClientConfig) GetLoadParams() *LoadParams {
	if m != nil {
		return m.LoadParams
	}
	return nil
}

func (m *ClientConfig) GetPayloadConfig() *PayloadConfig {
	if m != nil {
		return m.PayloadConfig
	}
	return nil
}

func (m *ClientConfig) GetHistogramParams() *HistogramParams {
	if m != nil {
		return m.HistogramParams
	}
	return nil
}

func (m *ClientConfig) GetCoreList() []int32 {
	if m != nil {
		return m.CoreList
	}
	return nil
}

func (m *ClientConfig) GetCoreLimit() int32 {
	if m != nil {
		return m.CoreLimit
	}
	return 0
}

func (m *ClientConfig) GetOtherClientApi() string {
	if m != nil {
		return m.OtherClientApi
	}
	return ""
}

func (m *ClientConfig) GetChannelArgs() []*ChannelArg {
	if m != nil {
		return m.ChannelArgs
	}
	return nil
}

func (m *ClientConfig) GetThreadsPerCq() int32 {
	if m != nil {
		return m.ThreadsPerCq
	}
	return 0
}

func (m *ClientConfig) GetMessagesPerStream() int32 {
	if m != nil {
		return m.MessagesPerStream
	}
	return 0
}

func (m *ClientConfig) GetUseCoalesceApi() bool {
	if m != nil {
		return m.UseCoalesceApi
	}
	return false
}

func (m *ClientConfig) GetMedianLatencyCollectionIntervalMillis() int32 {
	if m != nil {
		return m.MedianLatencyCollectionIntervalMillis
	}
	return 0
}

func (m *ClientConfig) GetClientProcesses() int32 {
	if m != nil {
		return m.ClientProcesses
	}
	return 0
}

type ClientStatus struct {
	Stats                *ClientStats `protobuf:"bytes,1,opt,name=stats,proto3" json:"stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ClientStatus) Reset()         { *m = ClientStatus{} }
func (m *ClientStatus) String() string { return proto.CompactTextString(m) }
func (*ClientStatus) ProtoMessage()    {}
func (*ClientStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_2202fdf8e6917d5d, []int{6}
}

func (m *ClientStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientStatus.Unmarshal(m, b)
}
func (m *ClientStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientStatus.Marshal(b, m, deterministic)
}
func (m *ClientStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientStatus.Merge(m, src)
}
func (m *ClientStatus) XXX_Size() int {
	return xxx_messageInfo_ClientStatus.Size(m)
}
func (m *ClientStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ClientStatus proto.InternalMessageInfo

func (m *ClientStatus) GetStats() *ClientStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// Request current stats
type Mark struct {
	// if true, the stats will be reset after taking their snapshot.
	Reset_               bool     `protobuf:"varint,1,opt,name=reset,proto3" json:"reset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Mark) Reset()         { *m = Mark{} }
func (m *Mark) String() string { return proto.CompactTextString(m) }
func (*Mark) ProtoMessage()    {}
func (*Mark) Descriptor() ([]byte, []int) {
	return fileDescriptor_2202fdf8e6917d5d, []int{7}
}

func (m *Mark) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Mark.Unmarshal(m, b)
}
func (m *Mark) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Mark.Marshal(b, m, deterministic)
}
func (m *Mark) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mark.Merge(m, src)
}
func (m *Mark) XXX_Size() int {
	return xxx_messageInfo_Mark.Size(m)
}
func (m *Mark) XXX_DiscardUnknown() {
	xxx_messageInfo_Mark.DiscardUnknown(m)
}

var xxx_messageInfo_Mark proto.InternalMessageInfo

func (m *Mark) GetReset_() bool {
	if m != nil {
		return m.Reset_
	}
	return false
}

type ClientArgs struct {
	// Types that are valid to be assigned to Argtype:
	//	*ClientArgs_Setup
	//	*ClientArgs_Mark
	Argtype              isClientArgs_Argtype `protobuf_oneof:"argtype"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ClientArgs) Reset()         { *m = ClientArgs{} }
func (m *ClientArgs) String() string { return proto.CompactTextString(m) }
func (*ClientArgs) ProtoMessage()    {}
func (*ClientArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_2202fdf8e6917d5d, []int{8}
}

func (m *ClientArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientArgs.Unmarshal(m, b)
}
func (m *ClientArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientArgs.Marshal(b, m, deterministic)
}
func (m *ClientArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientArgs.Merge(m, src)
}
func (m *ClientArgs) XXX_Size() int {
	return xxx_messageInfo_ClientArgs.Size(m)
}
func (m *ClientArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientArgs.DiscardUnknown(m)
}

var xxx_messageInfo_ClientArgs proto.InternalMessageInfo

type isClientArgs_Argtype interface {
	isClientArgs_Argtype()
}

type ClientArgs_Setup struct {
	Setup *ClientConfig `protobuf:"bytes,1,opt,name=setup,proto3,oneof"`
}

type ClientArgs_Mark struct {
	Mark *Mark `protobuf:"bytes,2,opt,name=mark,proto3,oneof"`
}

func (*ClientArgs_Setup) isClientArgs_Argtype() {}

func (*ClientArgs_Mark) isClientArgs_Argtype() {}

func (m *ClientArgs) GetArgtype() isClientArgs_Argtype {
	if m != nil {
		return m.Argtype
	}
	return nil
}

func (m *ClientArgs) GetSetup() *ClientConfig {
	if x, ok := m.GetArgtype().(*ClientArgs_Setup); ok {
		return x.Setup
	}
	return nil
}

func (m *ClientArgs) GetMark() *Mark {
	if x, ok := m.GetArgtype().(*ClientArgs_Mark); ok {
		return x.Mark
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ClientArgs) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ClientArgs_Setup)(nil),
		(*ClientArgs_Mark)(nil),
	}
}

type ServerConfig struct {
	ServerType     ServerType      `protobuf:"varint,1,opt,name=server_type,json=serverType,proto3,enum=grpc.testing.ServerType" json:"server_type,omitempty"`
	SecurityParams *SecurityParams `protobuf:"bytes,2,opt,name=security_params,json=securityParams,proto3" json:"security_params,omitempty"`
	// Port on which to listen. Zero means pick unused port.
	Port int32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	// Only for async server. Number of threads used to serve the requests.
	AsyncServerThreads int32 `protobuf:"varint,7,opt,name=async_server_threads,json=asyncServerThreads,proto3" json:"async_server_threads,omitempty"`
	// Specify the number of cores to limit server to, if desired
	CoreLimit int32 `protobuf:"varint,8,opt,name=core_limit,json=coreLimit,proto3" json:"core_limit,omitempty"`
	// payload config, used in generic server.
	// Note this must NOT be used in proto (non-generic) servers. For proto servers,
	// 'response sizes' must be configured from the 'response_size' field of the
	// 'SimpleRequest' objects in RPC requests.
	PayloadConfig *PayloadConfig `protobuf:"bytes,9,opt,name=payload_config,json=payloadConfig,proto3" json:"payload_config,omitempty"`
	// Specify the cores we should run the server on, if desired
	CoreList []int32 `protobuf:"varint,10,rep,packed,name=core_list,json=coreList,proto3" json:"core_list,omitempty"`
	// If we use an OTHER_SERVER client_type, this string gives more detail
	OtherServerApi string `protobuf:"bytes,11,opt,name=other_server_api,json=otherServerApi,proto3" json:"other_server_api,omitempty"`
	// Number of threads that share each completion queue
	ThreadsPerCq int32 `protobuf:"varint,12,opt,name=threads_per_cq,json=threadsPerCq,proto3" json:"threads_per_cq,omitempty"`
	// Buffer pool size (no buffer pool specified if unset)
	ResourceQuotaSize int32         `protobuf:"varint,1001,opt,name=resource_quota_size,json=resourceQuotaSize,proto3" json:"resource_quota_size,omitempty"`
	ChannelArgs       []*ChannelArg `protobuf:"bytes,1002,rep,name=channel_args,json=channelArgs,proto3" json:"channel_args,omitempty"`
	// Number of server processes. 0 indicates no restriction.
	ServerProcesses      int32    `protobuf:"varint,21,opt,name=server_processes,json=serverProcesses,proto3" json:"server_processes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServerConfig) Reset()         { *m = ServerConfig{} }
func (m *ServerConfig) String() string { return proto.CompactTextString(m) }
func (*ServerConfig) ProtoMessage()    {}
func (*ServerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_2202fdf8e6917d5d, []int{9}
}

func (m *ServerConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerConfig.Unmarshal(m, b)
}
func (m *ServerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerConfig.Marshal(b, m, deterministic)
}
func (m *ServerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerConfig.Merge(m, src)
}
func (m *ServerConfig) XXX_Size() int {
	return xxx_messageInfo_ServerConfig.Size(m)
}
func (m *ServerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ServerConfig proto.InternalMessageInfo

func (m *ServerConfig) GetServerType() ServerType {
	if m != nil {
		return m.ServerType
	}
	return ServerType_SYNC_SERVER
}

func (m *ServerConfig) GetSecurityParams() *SecurityParams {
	if m != nil {
		return m.SecurityParams
	}
	return nil
}

func (m *ServerConfig) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *ServerConfig) GetAsyncServerThreads() int32 {
	if m != nil {
		return m.AsyncServerThreads
	}
	return 0
}

func (m *ServerConfig) GetCoreLimit() int32 {
	if m != nil {
		return m.CoreLimit
	}
	return 0
}

func (m *ServerConfig) GetPayloadConfig() *PayloadConfig {
	if m != nil {
		return m.PayloadConfig
	}
	return nil
}

func (m *ServerConfig) GetCoreList() []int32 {
	if m != nil {
		return m.CoreList
	}
	return nil
}

func (m *ServerConfig) GetOtherServerApi() string {
	if m != nil {
		return m.OtherServerApi
	}
	return ""
}

func (m *ServerConfig) GetThreadsPerCq() int32 {
	if m != nil {
		return m.ThreadsPerCq
	}
	return 0
}

func (m *ServerConfig) GetResourceQuotaSize() int32 {
	if m != nil {
		return m.ResourceQuotaSize
	}
	return 0
}

func (m *ServerConfig) GetChannelArgs() []*ChannelArg {
	if m != nil {
		return m.ChannelArgs
	}
	return nil
}

func (m *ServerConfig) GetServerProcesses() int32 {
	if m != nil {
		return m.ServerProcesses
	}
	return 0
}

type ServerArgs struct {
	// Types that are valid to be assigned to Argtype:
	//	*ServerArgs_Setup
	//	*ServerArgs_Mark
	Argtype              isServerArgs_Argtype `protobuf_oneof:"argtype"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ServerArgs) Reset()         { *m = ServerArgs{} }
func (m *ServerArgs) String() string { return proto.CompactTextString(m) }
func (*ServerArgs) ProtoMessage()    {}
func (*ServerArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_2202fdf8e6917d5d, []int{10}
}

func (m *ServerArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerArgs.Unmarshal(m, b)
}
func (m *ServerArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerArgs.Marshal(b, m, deterministic)
}
func (m *ServerArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerArgs.Merge(m, src)
}
func (m *ServerArgs) XXX_Size() int {
	return xxx_messageInfo_ServerArgs.Size(m)
}
func (m *ServerArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerArgs.DiscardUnknown(m)
}

var xxx_messageInfo_ServerArgs proto.InternalMessageInfo

type isServerArgs_Argtype interface {
	isServerArgs_Argtype()
}

type ServerArgs_Setup struct {
	Setup *ServerConfig `protobuf:"bytes,1,opt,name=setup,proto3,oneof"`
}

type ServerArgs_Mark struct {
	Mark *Mark `protobuf:"bytes,2,opt,name=mark,proto3,oneof"`
}

func (*ServerArgs_Setup) isServerArgs_Argtype() {}

func (*ServerArgs_Mark) isServerArgs_Argtype() {}

func (m *ServerArgs) GetArgtype() isServerArgs_Argtype {
	if m != nil {
		return m.Argtype
	}
	return nil
}

func (m *ServerArgs) GetSetup() *ServerConfig {
	if x, ok := m.GetArgtype().(*ServerArgs_Setup); ok {
		return x.Setup
	}
	return nil
}

func (m *ServerArgs) GetMark() *Mark {
	if x, ok := m.GetArgtype().(*ServerArgs_Mark); ok {
		return x.Mark
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ServerArgs) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ServerArgs_Setup)(nil),
		(*ServerArgs_Mark)(nil),
	}
}

type ServerStatus struct {
	Stats *ServerStats `protobuf:"bytes,1,opt,name=stats,proto3" json:"stats,omitempty"`
	// the port bound by the server
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// Number of cores available to the server
	Cores                int32    `protobuf:"varint,3,opt,name=cores,proto3" json:"cores,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServerStatus) Reset()         { *m = ServerStatus{} }
func (m *ServerStatus) String() string { return proto.CompactTextString(m) }
func (*ServerStatus) ProtoMessage()    {}
func (*ServerStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_2202fdf8e6917d5d, []int{11}
}

func (m *ServerStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerStatus.Unmarshal(m, b)
}
func (m *ServerStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerStatus.Marshal(b, m, deterministic)
}
func (m *ServerStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerStatus.Merge(m, src)
}
func (m *ServerStatus) XXX_Size() int {
	return xxx_messageInfo_ServerStatus.Size(m)
}
func (m *ServerStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ServerStatus proto.InternalMessageInfo

func (m *ServerStatus) GetStats() *ServerStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *ServerStatus) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *ServerStatus) GetCores() int32 {
	if m != nil {
		return m.Cores
	}
	return 0
}

type CoreRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoreRequest) Reset()         { *m = CoreRequest{} }
func (m *CoreRequest) String() string { return proto.CompactTextString(m) }
func (*CoreRequest) ProtoMessage()    {}
func (*CoreRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2202fdf8e6917d5d, []int{12}
}

func (m *CoreRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoreRequest.Unmarshal(m, b)
}
func (m *CoreRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoreRequest.Marshal(b, m, deterministic)
}
func (m *CoreRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoreRequest.Merge(m, src)
}
func (m *CoreRequest) XXX_Size() int {
	return xxx_messageInfo_CoreRequest.Size(m)
}
func (m *CoreRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CoreRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CoreRequest proto.InternalMessageInfo

type CoreResponse struct {
	// Number of cores available on the server
	Cores                int32    `protobuf:"varint,1,opt,name=cores,proto3" json:"cores,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoreResponse) Reset()         { *m = CoreResponse{} }
func (m *CoreResponse) String() string { return proto.CompactTextString(m) }
func (*CoreResponse) ProtoMessage()    {}
func (*CoreResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2202fdf8e6917d5d, []int{13}
}

func (m *CoreResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoreResponse.Unmarshal(m, b)
}
func (m *CoreResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoreResponse.Marshal(b, m, deterministic)
}
func (m *CoreResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoreResponse.Merge(m, src)
}
func (m *CoreResponse) XXX_Size() int {
	return xxx_messageInfo_CoreResponse.Size(m)
}
func (m *CoreResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CoreResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CoreResponse proto.InternalMessageInfo

func (m *CoreResponse) GetCores() int32 {
	if m != nil {
		return m.Cores
	}
	return 0
}

type Void struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Void) Reset()         { *m = Void{} }
func (m *Void) String() string { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()    {}
func (*Void) Descriptor() ([]byte, []int) {
	return fileDescriptor_2202fdf8e6917d5d, []int{14}
}

func (m *Void) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Void.Unmarshal(m, b)
}
func (m *Void) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Void.Marshal(b, m, deterministic)
}
func (m *Void) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Void.Merge(m, src)
}
func (m *Void) XXX_Size() int {
	return xxx_messageInfo_Void.Size(m)
}
func (m *Void) XXX_DiscardUnknown() {
	xxx_messageInfo_Void.DiscardUnknown(m)
}

var xxx_messageInfo_Void proto.InternalMessageInfo

// A single performance scenario: input to qps_json_driver
type Scenario struct {
	// Human readable name for this scenario
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Client configuration
	ClientConfig *ClientConfig `protobuf:"bytes,2,opt,name=client_config,json=clientConfig,proto3" json:"client_config,omitempty"`
	// Number of clients to start for the test
	NumClients int32 `protobuf:"varint,3,opt,name=num_clients,json=numClients,proto3" json:"num_clients,omitempty"`
	// Server configuration
	ServerConfig *ServerConfig `protobuf:"bytes,4,opt,name=server_config,json=serverConfig,proto3" json:"server_config,omitempty"`
	// Number of servers to start for the test
	NumServers int32 `protobuf:"varint,5,opt,name=num_servers,json=numServers,proto3" json:"num_servers,omitempty"`
	// Warmup period, in seconds
	WarmupSeconds int32 `protobuf:"varint,6,opt,name=warmup_seconds,json=warmupSeconds,proto3" json:"warmup_seconds,omitempty"`
	// Benchmark time, in seconds
	BenchmarkSeconds int32 `protobuf:"varint,7,opt,name=benchmark_seconds,json=benchmarkSeconds,proto3" json:"benchmark_seconds,omitempty"`
	// Number of workers to spawn locally (usually zero)
	SpawnLocalWorkerCount int32    `protobuf:"varint,8,opt,name=spawn_local_worker_count,json=spawnLocalWorkerCount,proto3" json:"spawn_local_worker_count,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *Scenario) Reset()         { *m = Scenario{} }
func (m *Scenario) String() string { return proto.CompactTextString(m) }
func (*Scenario) ProtoMessage()    {}
func (*Scenario) Descriptor() ([]byte, []int) {
	return fileDescriptor_2202fdf8e6917d5d, []int{15}
}

func (m *Scenario) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Scenario.Unmarshal(m, b)
}
func (m *Scenario) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Scenario.Marshal(b, m, deterministic)
}
func (m *Scenario) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Scenario.Merge(m, src)
}
func (m *Scenario) XXX_Size() int {
	return xxx_messageInfo_Scenario.Size(m)
}
func (m *Scenario) XXX_DiscardUnknown() {
	xxx_messageInfo_Scenario.DiscardUnknown(m)
}

var xxx_messageInfo_Scenario proto.InternalMessageInfo

func (m *Scenario) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Scenario) GetClientConfig() *ClientConfig {
	if m != nil {
		return m.ClientConfig
	}
	return nil
}

func (m *Scenario) GetNumClients() int32 {
	if m != nil {
		return m.NumClients
	}
	return 0
}

func (m *Scenario) GetServerConfig() *ServerConfig {
	if m != nil {
		return m.ServerConfig
	}
	return nil
}

func (m *Scenario) GetNumServers() int32 {
	if m != nil {
		return m.NumServers
	}
	return 0
}

func (m *Scenario) GetWarmupSeconds() int32 {
	if m != nil {
		return m.WarmupSeconds
	}
	return 0
}

func (m *Scenario) GetBenchmarkSeconds() int32 {
	if m != nil {
		return m.BenchmarkSeconds
	}
	return 0
}

func (m *Scenario) GetSpawnLocalWorkerCount() int32 {
	if m != nil {
		return m.SpawnLocalWorkerCount
	}
	return 0
}

// A set of scenarios to be run with qps_json_driver
type Scenarios struct {
	Scenarios            []*Scenario `protobuf:"bytes,1,rep,name=scenarios,proto3" json:"scenarios,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Scenarios) Reset()         { *m = Scenarios{} }
func (m *Scenarios) String() string { return proto.CompactTextString(m) }
func (*Scenarios) ProtoMessage()    {}
func (*Scenarios) Descriptor() ([]byte, []int) {
	return fileDescriptor_2202fdf8e6917d5d, []int{16}
}

func (m *Scenarios) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Scenarios.Unmarshal(m, b)
}
func (m *Scenarios) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Scenarios.Marshal(b, m, deterministic)
}
func (m *Scenarios) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Scenarios.Merge(m, src)
}
func (m *Scenarios) XXX_Size() int {
	return xxx_messageInfo_Scenarios.Size(m)
}
func (m *Scenarios) XXX_DiscardUnknown() {
	xxx_messageInfo_Scenarios.DiscardUnknown(m)
}

var xxx_messageInfo_Scenarios proto.InternalMessageInfo

func (m *Scenarios) GetScenarios() []*Scenario {
	if m != nil {
		return m.Scenarios
	}
	return nil
}

// Basic summary that can be computed from ClientStats and ServerStats
// once the scenario has finished.
type ScenarioResultSummary struct {
	// Total number of operations per second over all clients. What is counted as 1 'operation' depends on the benchmark scenarios:
	// For unary benchmarks, an operation is processing of a single unary RPC.
	// For streaming benchmarks, an operation is processing of a single ping pong of request and response.
	Qps float64 `protobuf:"fixed64,1,opt,name=qps,proto3" json:"qps,omitempty"`
	// QPS per server core.
	QpsPerServerCore float64 `protobuf:"fixed64,2,opt,name=qps_per_server_core,json=qpsPerServerCore,proto3" json:"qps_per_server_core,omitempty"`
	// The total server cpu load based on system time across all server processes, expressed as percentage of a single cpu core.
	// For example, 85 implies 85% of a cpu core, 125 implies 125% of a cpu core. Since we are accumulating the cpu load across all the server
	// processes, the value could > 100 when there are multiple servers or a single server using multiple threads and cores.
	// Same explanation for the total client cpu load below.
	ServerSystemTime float64 `protobuf:"fixed64,3,opt,name=server_system_time,json=serverSystemTime,proto3" json:"server_system_time,omitempty"`
	// The total server cpu load based on user time across all server processes, expressed as percentage of a single cpu core. (85 => 85%, 125 => 125%)
	ServerUserTime float64 `protobuf:"fixed64,4,opt,name=server_user_time,json=serverUserTime,proto3" json:"server_user_time,omitempty"`
	// The total client cpu load based on system time across all client processes, expressed as percentage of a single cpu core. (85 => 85%, 125 => 125%)
	ClientSystemTime float64 `protobuf:"fixed64,5,opt,name=client_system_time,json=clientSystemTime,proto3" json:"client_system_time,omitempty"`
	// The total client cpu load based on user time across all client processes, expressed as percentage of a single cpu core. (85 => 85%, 125 => 125%)
	ClientUserTime float64 `protobuf:"fixed64,6,opt,name=client_user_time,json=clientUserTime,proto3" json:"client_user_time,omitempty"`
	// X% latency percentiles (in nanoseconds)
	Latency_50  float64 `protobuf:"fixed64,7,opt,name=latency_50,json=latency50,proto3" json:"latency_50,omitempty"`
	Latency_90  float64 `protobuf:"fixed64,8,opt,name=latency_90,json=latency90,proto3" json:"latency_90,omitempty"`
	Latency_95  float64 `protobuf:"fixed64,9,opt,name=latency_95,json=latency95,proto3" json:"latency_95,omitempty"`
	Latency_99  float64 `protobuf:"fixed64,10,opt,name=latency_99,json=latency99,proto3" json:"latency_99,omitempty"`
	Latency_999 float64 `protobuf:"fixed64,11,opt,name=latency_999,json=latency999,proto3" json:"latency_999,omitempty"`
	// server cpu usage percentage
	ServerCpuUsage float64 `protobuf:"fixed64,12,opt,name=server_cpu_usage,json=serverCpuUsage,proto3" json:"server_cpu_usage,omitempty"`
	// Number of requests that succeeded/failed
	SuccessfulRequestsPerSecond float64 `protobuf:"fixed64,13,opt,name=successful_requests_per_second,json=successfulRequestsPerSecond,proto3" json:"successful_requests_per_second,omitempty"`
	FailedRequestsPerSecond     float64 `protobuf:"fixed64,14,opt,name=failed_requests_per_second,json=failedRequestsPerSecond,proto3" json:"failed_requests_per_second,omitempty"`
	// Number of polls called inside completion queue per request
	ClientPollsPerRequest float64 `protobuf:"fixed64,15,opt,name=client_polls_per_request,json=clientPollsPerRequest,proto3" json:"client_polls_per_request,omitempty"`
	ServerPollsPerRequest float64 `protobuf:"fixed64,16,opt,name=server_polls_per_request,json=serverPollsPerRequest,proto3" json:"server_polls_per_request,omitempty"`
	// Queries per CPU-sec over all servers or clients
	ServerQueriesPerCpuSec float64  `protobuf:"fixed64,17,opt,name=server_queries_per_cpu_sec,json=serverQueriesPerCpuSec,proto3" json:"server_queries_per_cpu_sec,omitempty"`
	ClientQueriesPerCpuSec float64  `protobuf:"fixed64,18,opt,name=client_queries_per_cpu_sec,json=clientQueriesPerCpuSec,proto3" json:"client_queries_per_cpu_sec,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *ScenarioResultSummary) Reset()         { *m = ScenarioResultSummary{} }
func (m *ScenarioResultSummary) String() string { return proto.CompactTextString(m) }
func (*ScenarioResultSummary) ProtoMessage()    {}
func (*ScenarioResultSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_2202fdf8e6917d5d, []int{17}
}

func (m *ScenarioResultSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScenarioResultSummary.Unmarshal(m, b)
}
func (m *ScenarioResultSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScenarioResultSummary.Marshal(b, m, deterministic)
}
func (m *ScenarioResultSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScenarioResultSummary.Merge(m, src)
}
func (m *ScenarioResultSummary) XXX_Size() int {
	return xxx_messageInfo_ScenarioResultSummary.Size(m)
}
func (m *ScenarioResultSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_ScenarioResultSummary.DiscardUnknown(m)
}

var xxx_messageInfo_ScenarioResultSummary proto.InternalMessageInfo

func (m *ScenarioResultSummary) GetQps() float64 {
	if m != nil {
		return m.Qps
	}
	return 0
}

func (m *ScenarioResultSummary) GetQpsPerServerCore() float64 {
	if m != nil {
		return m.QpsPerServerCore
	}
	return 0
}

func (m *ScenarioResultSummary) GetServerSystemTime() float64 {
	if m != nil {
		return m.ServerSystemTime
	}
	return 0
}

func (m *ScenarioResultSummary) GetServerUserTime() float64 {
	if m != nil {
		return m.ServerUserTime
	}
	return 0
}

func (m *ScenarioResultSummary) GetClientSystemTime() float64 {
	if m != nil {
		return m.ClientSystemTime
	}
	return 0
}

func (m *ScenarioResultSummary) GetClientUserTime() float64 {
	if m != nil {
		return m.ClientUserTime
	}
	return 0
}

func (m *ScenarioResultSummary) GetLatency_50() float64 {
	if m != nil {
		return m.Latency_50
	}
	return 0
}

func (m *ScenarioResultSummary) GetLatency_90() float64 {
	if m != nil {
		return m.Latency_90
	}
	return 0
}

func (m *ScenarioResultSummary) GetLatency_95() float64 {
	if m != nil {
		return m.Latency_95
	}
	return 0
}

func (m *ScenarioResultSummary) GetLatency_99() float64 {
	if m != nil {
		return m.Latency_99
	}
	return 0
}

func (m *ScenarioResultSummary) GetLatency_999() float64 {
	if m != nil {
		return m.Latency_999
	}
	return 0
}

func (m *ScenarioResultSummary) GetServerCpuUsage() float64 {
	if m != nil {
		return m.ServerCpuUsage
	}
	return 0
}

func (m *ScenarioResultSummary) GetSuccessfulRequestsPerSecond() float64 {
	if m != nil {
		return m.SuccessfulRequestsPerSecond
	}
	return 0
}

func (m *ScenarioResultSummary) GetFailedRequestsPerSecond() float64 {
	if m != nil {
		return m.FailedRequestsPerSecond
	}
	return 0
}

func (m *ScenarioResultSummary) GetClientPollsPerRequest() float64 {
	if m != nil {
		return m.ClientPollsPerRequest
	}
	return 0
}

func (m *ScenarioResultSummary) GetServerPollsPerRequest() float64 {
	if m != nil {
		return m.ServerPollsPerRequest
	}
	return 0
}

func (m *ScenarioResultSummary) GetServerQueriesPerCpuSec() float64 {
	if m != nil {
		return m.ServerQueriesPerCpuSec
	}
	return 0
}

func (m *ScenarioResultSummary) GetClientQueriesPerCpuSec() float64 {
	if m != nil {
		return m.ClientQueriesPerCpuSec
	}
	return 0
}

// Results of a single benchmark scenario.
type ScenarioResult struct {
	// Inputs used to run the scenario.
	Scenario *Scenario `protobuf:"bytes,1,opt,name=scenario,proto3" json:"scenario,omitempty"`
	// Histograms from all clients merged into one histogram.
	Latencies *HistogramData `protobuf:"bytes,2,opt,name=latencies,proto3" json:"latencies,omitempty"`
	// Client stats for each client
	ClientStats []*ClientStats `protobuf:"bytes,3,rep,name=client_stats,json=clientStats,proto3" json:"client_stats,omitempty"`
	// Server stats for each server
	ServerStats []*ServerStats `protobuf:"bytes,4,rep,name=server_stats,json=serverStats,proto3" json:"server_stats,omitempty"`
	// Number of cores available to each server
	ServerCores []int32 `protobuf:"varint,5,rep,packed,name=server_cores,json=serverCores,proto3" json:"server_cores,omitempty"`
	// An after-the-fact computed summary
	Summary *ScenarioResultSummary `protobuf:"bytes,6,opt,name=summary,proto3" json:"summary,omitempty"`
	// Information on success or failure of each worker
	ClientSuccess []bool `protobuf:"varint,7,rep,packed,name=client_success,json=clientSuccess,proto3" json:"client_success,omitempty"`
	ServerSuccess []bool `protobuf:"varint,8,rep,packed,name=server_success,json=serverSuccess,proto3" json:"server_success,omitempty"`
	// Number of failed requests (one row per status code seen)
	RequestResults       []*RequestResultCount `protobuf:"bytes,9,rep,name=request_results,json=requestResults,proto3" json:"request_results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ScenarioResult) Reset()         { *m = ScenarioResult{} }
func (m *ScenarioResult) String() string { return proto.CompactTextString(m) }
func (*ScenarioResult) ProtoMessage()    {}
func (*ScenarioResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_2202fdf8e6917d5d, []int{18}
}

func (m *ScenarioResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScenarioResult.Unmarshal(m, b)
}
func (m *ScenarioResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScenarioResult.Marshal(b, m, deterministic)
}
func (m *ScenarioResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScenarioResult.Merge(m, src)
}
func (m *ScenarioResult) XXX_Size() int {
	return xxx_messageInfo_ScenarioResult.Size(m)
}
func (m *ScenarioResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ScenarioResult.DiscardUnknown(m)
}

var xxx_messageInfo_ScenarioResult proto.InternalMessageInfo

func (m *ScenarioResult) GetScenario() *Scenario {
	if m != nil {
		return m.Scenario
	}
	return nil
}

func (m *ScenarioResult) GetLatencies() *HistogramData {
	if m != nil {
		return m.Latencies
	}
	return nil
}

func (m *ScenarioResult) GetClientStats() []*ClientStats {
	if m != nil {
		return m.ClientStats
	}
	return nil
}

func (m *ScenarioResult) GetServerStats() []*ServerStats {
	if m != nil {
		return m.ServerStats
	}
	return nil
}

func (m *ScenarioResult) GetServerCores() []int32 {
	if m != nil {
		return m.ServerCores
	}
	return nil
}

func (m *ScenarioResult) GetSummary() *ScenarioResultSummary {
	if m != nil {
		return m.Summary
	}
	return nil
}

func (m *ScenarioResult) GetClientSuccess() []bool {
	if m != nil {
		return m.ClientSuccess
	}
	return nil
}

func (m *ScenarioResult) GetServerSuccess() []bool {
	if m != nil {
		return m.ServerSuccess
	}
	return nil
}

func (m *ScenarioResult) GetRequestResults() []*RequestResultCount {
	if m != nil {
		return m.RequestResults
	}
	return nil
}

func init() {
	proto.RegisterEnum("grpc.testing.ClientType", ClientType_name, ClientType_value)
	proto.RegisterEnum("grpc.testing.ServerType", ServerType_name, ServerType_value)
	proto.RegisterEnum("grpc.testing.RpcType", RpcType_name, RpcType_value)
	proto.RegisterType((*PoissonParams)(nil), "grpc.testing.PoissonParams")
	proto.RegisterType((*ClosedLoopParams)(nil), "grpc.testing.ClosedLoopParams")
	proto.RegisterType((*LoadParams)(nil), "grpc.testing.LoadParams")
	proto.RegisterType((*SecurityParams)(nil), "grpc.testing.SecurityParams")
	proto.RegisterType((*ChannelArg)(nil), "grpc.testing.ChannelArg")
	proto.RegisterType((*ClientConfig)(nil), "grpc.testing.ClientConfig")
	proto.RegisterType((*ClientStatus)(nil), "grpc.testing.ClientStatus")
	proto.RegisterType((*Mark)(nil), "grpc.testing.Mark")
	proto.RegisterType((*ClientArgs)(nil), "grpc.testing.ClientArgs")
	proto.RegisterType((*ServerConfig)(nil), "grpc.testing.ServerConfig")
	proto.RegisterType((*ServerArgs)(nil), "grpc.testing.ServerArgs")
	proto.RegisterType((*ServerStatus)(nil), "grpc.testing.ServerStatus")
	proto.RegisterType((*CoreRequest)(nil), "grpc.testing.CoreRequest")
	proto.RegisterType((*CoreResponse)(nil), "grpc.testing.CoreResponse")
	proto.RegisterType((*Void)(nil), "grpc.testing.Void")
	proto.RegisterType((*Scenario)(nil), "grpc.testing.Scenario")
	proto.RegisterType((*Scenarios)(nil), "grpc.testing.Scenarios")
	proto.RegisterType((*ScenarioResultSummary)(nil), "grpc.testing.ScenarioResultSummary")
	proto.RegisterType((*ScenarioResult)(nil), "grpc.testing.ScenarioResult")
}

func init() {
	proto.RegisterFile("src/proto/grpc/testing/control.proto", fileDescriptor_2202fdf8e6917d5d)
}

var fileDescriptor_2202fdf8e6917d5d = []byte{
	// 1903 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x58, 0x5f, 0x53, 0x1b, 0xc9,
	0x11, 0x47, 0x20, 0x81, 0xd4, 0x12, 0x42, 0x1e, 0xe0, 0x6e, 0x8d, 0xff, 0x84, 0x53, 0xec, 0x0a,
	0x76, 0x2e, 0x40, 0x91, 0xb8, 0x5c, 0xe4, 0x92, 0x72, 0x09, 0x85, 0x9c, 0xa8, 0x60, 0xcc, 0x8d,
	0xb0, 0x2f, 0x7e, 0xda, 0x9a, 0x5b, 0x0d, 0x62, 0xcb, 0xfb, 0x8f, 0x99, 0x59, 0xbb, 0xb8, 0x97,
	0x7c, 0x85, 0x7c, 0x9f, 0xbc, 0xe4, 0xeb, 0x24, 0x2f, 0x79, 0xbb, 0xe7, 0xd4, 0xcc, 0xf4, 0xac,
	0x56, 0x42, 0x8e, 0xe3, 0xe4, 0x6d, 0xa7, 0x7f, 0xbf, 0xee, 0xe9, 0xe9, 0xe9, 0xee, 0x69, 0x09,
	0x1e, 0x49, 0x11, 0xec, 0x65, 0x22, 0x55, 0xe9, 0xde, 0x58, 0x64, 0xc1, 0x9e, 0xe2, 0x52, 0x85,
	0xc9, 0x78, 0x2f, 0x48, 0x13, 0x25, 0xd2, 0x68, 0xd7, 0x40, 0xa4, 0xa5, 0xb1, 0x5d, 0xc4, 0xb6,
	0x1e, 0x7f, 0x44, 0x27, 0x63, 0x37, 0x51, 0xca, 0x46, 0xd2, 0x2a, 0x6d, 0x75, 0x3f, 0x42, 0x93,
	0x8a, 0x29, 0xe4, 0x74, 0x0f, 0x60, 0xf5, 0x3c, 0x0d, 0xa5, 0x4c, 0x93, 0x73, 0x26, 0x58, 0x2c,
	0xc9, 0x57, 0xd0, 0x4a, 0x2f, 0x2f, 0xb9, 0xe0, 0x23, 0x5f, 0xdb, 0xf2, 0x2a, 0xdb, 0x95, 0x9d,
	0x0a, 0x6d, 0xa2, 0xec, 0x34, 0x65, 0xa3, 0x2e, 0x81, 0x4e, 0x3f, 0x4a, 0xa5, 0x5e, 0xa5, 0x99,
	0x55, 0xeb, 0xfe, 0xb5, 0x02, 0xa0, 0x41, 0xb4, 0xd2, 0x83, 0x66, 0x60, 0x28, 0x7e, 0x94, 0xa6,
	0x99, 0x31, 0xd2, 0x3c, 0x78, 0xb8, 0x5b, 0x3e, 0xc5, 0xee, 0xac, 0x8d, 0xc1, 0x02, 0x85, 0xa0,
	0x90, 0x91, 0xe7, 0xb0, 0x92, 0x59, 0xcf, 0xbc, 0x45, 0xa3, 0x7e, 0x6f, 0x5a, 0x7d, 0xca, 0xed,
	0xc1, 0x02, 0x75, 0xec, 0xa3, 0x65, 0xa8, 0x6a, 0xcf, 0xbb, 0x7f, 0x81, 0xf6, 0x90, 0x07, 0xb9,
	0x08, 0xd5, 0x0d, 0x7a, 0xf5, 0x10, 0x9a, 0xb9, 0xe4, 0xbe, 0xb6, 0xe0, 0x07, 0xcc, 0x78, 0x55,
	0xa7, 0x8d, 0x5c, 0xf2, 0x0b, 0x2e, 0x55, 0x9f, 0x91, 0x7d, 0xd8, 0x90, 0x5c, 0xbc, 0xe7, 0xc2,
	0xbf, 0x4a, 0xa5, 0xf2, 0xd3, 0xf7, 0x5c, 0x88, 0x70, 0xc4, 0xcd, 0xfe, 0x0d, 0x4a, 0x2c, 0x36,
	0x48, 0xa5, 0x7a, 0x85, 0x08, 0xb9, 0x07, 0x8d, 0x40, 0x87, 0x4a, 0xdd, 0x64, 0xdc, 0x5b, 0x32,
	0xb4, 0xba, 0x16, 0x5c, 0xdc, 0x64, 0xbc, 0x3b, 0x06, 0xe8, 0x5f, 0xb1, 0x24, 0xe1, 0x51, 0x4f,
	0x8c, 0x09, 0x81, 0x6a, 0xc2, 0x62, 0x6e, 0x76, 0x6d, 0x50, 0xf3, 0x4d, 0x1e, 0x40, 0x43, 0x2a,
	0xe1, 0xbf, 0x67, 0x51, 0x8e, 0xbb, 0x0c, 0x16, 0x68, 0x5d, 0x2a, 0xf1, 0x46, 0x4b, 0x34, 0x1c,
	0x26, 0x0a, 0x61, 0x6d, 0xbd, 0xa6, 0xe1, 0x30, 0x51, 0x06, 0x3e, 0x5a, 0x81, 0x9a, 0x81, 0xba,
	0x3f, 0xad, 0x40, 0xab, 0x1f, 0x85, 0x3c, 0x51, 0xfd, 0x34, 0xb9, 0x0c, 0xc7, 0xe4, 0x31, 0xb4,
	0xf1, 0x20, 0x8a, 0x89, 0x31, 0x57, 0xd2, 0xab, 0x6c, 0x2f, 0xed, 0x34, 0xe8, 0xaa, 0x95, 0x5e,
	0x58, 0x21, 0x39, 0xd4, 0xb7, 0xa4, 0xd5, 0xac, 0xff, 0xda, 0x81, 0xf6, 0x81, 0x37, 0x7b, 0x4b,
	0x9a, 0xa0, 0xcf, 0xa3, 0x6f, 0xc7, 0x7d, 0x93, 0x63, 0x58, 0x93, 0x18, 0x5c, 0x3f, 0x33, 0xd1,
	0x35, 0x0e, 0x36, 0x0f, 0xee, 0x4f, 0xab, 0x4f, 0xdf, 0x00, 0x6d, 0xcb, 0xe9, 0x1b, 0x79, 0x01,
	0xf7, 0xd3, 0x5c, 0x49, 0xc5, 0x92, 0x51, 0x98, 0x8c, 0x7d, 0x91, 0x05, 0xd2, 0xcf, 0xb8, 0xf0,
	0x03, 0x1b, 0x37, 0xaf, 0xaa, 0x0f, 0x4d, 0xef, 0x96, 0x38, 0x34, 0x0b, 0xe4, 0x39, 0x17, 0x18,
	0x58, 0xf2, 0x0b, 0x58, 0xc3, 0x23, 0xa0, 0x8a, 0xf4, 0x6a, 0x46, 0xa7, 0x6d, 0xc5, 0xc8, 0x93,
	0xfa, 0x6e, 0x99, 0xbc, 0x49, 0x02, 0xdf, 0x9d, 0xf8, 0x4a, 0x70, 0x36, 0x92, 0xde, 0x8a, 0x61,
	0x13, 0x83, 0xe1, 0x59, 0x2d, 0x42, 0xf6, 0xa1, 0x2e, 0xb2, 0xc0, 0x86, 0xa6, 0x6e, 0x42, 0xb3,
	0x39, 0x7d, 0x36, 0x9a, 0x05, 0x26, 0x2e, 0x2b, 0xc2, 0x7e, 0xe8, 0x78, 0xea, 0xcc, 0x73, 0x01,
	0x01, 0x13, 0x90, 0x99, 0x78, 0x4e, 0x8a, 0x84, 0x42, 0x34, 0x29, 0x98, 0x23, 0x68, 0x63, 0xf5,
	0xfa, 0x81, 0xb9, 0x43, 0xaf, 0x39, 0x37, 0xe9, 0x2d, 0xc7, 0x5e, 0x33, 0x5d, 0xcd, 0xca, 0x4b,
	0x32, 0x80, 0xce, 0x55, 0x28, 0x55, 0x3a, 0x16, 0x2c, 0x76, 0x3e, 0xb4, 0x8c, 0x95, 0x07, 0xd3,
	0x56, 0x06, 0x8e, 0x85, 0x8e, 0xac, 0x5d, 0x4d, 0x0b, 0x4c, 0x5a, 0xa7, 0x82, 0xfb, 0x51, 0x28,
	0x95, 0xb7, 0xba, 0xbd, 0xb4, 0x53, 0xa3, 0x75, 0x2d, 0x38, 0x0d, 0xa5, 0x22, 0x0f, 0x00, 0x10,
	0x8c, 0x43, 0xe5, 0xb5, 0x4d, 0xfc, 0x1a, 0x16, 0x8d, 0x43, 0x45, 0x76, 0xa0, 0x93, 0xaa, 0x2b,
	0x7d, 0x87, 0x36, 0xd0, 0x2c, 0x0b, 0xbd, 0x35, 0x93, 0xf3, 0x6d, 0x23, 0xb7, 0x41, 0xee, 0x65,
	0x21, 0xf9, 0x06, 0x5a, 0x78, 0x69, 0x3e, 0x13, 0x63, 0xe9, 0x75, 0xb6, 0x97, 0x6e, 0xc7, 0x6b,
	0x52, 0x41, 0xb4, 0x19, 0x14, 0xdf, 0x92, 0x3c, 0x82, 0x36, 0x5e, 0xa1, 0x4d, 0x98, 0x6b, 0xef,
	0x8e, 0xf1, 0xa4, 0x85, 0x52, 0x9d, 0x23, 0xd7, 0x64, 0x17, 0xd6, 0x63, 0x2e, 0x25, 0x1b, 0x73,
	0x4b, 0x93, 0x4a, 0x70, 0x16, 0x7b, 0xc4, 0x50, 0xef, 0x38, 0xe8, 0x9c, 0x8b, 0xa1, 0x01, 0xb4,
	0xf3, 0xba, 0x43, 0x04, 0x29, 0x8b, 0xb8, 0x0c, 0xb8, 0x71, 0x7e, 0xdd, 0xb4, 0x89, 0x76, 0x2e,
	0x79, 0x1f, 0xc5, 0xda, 0xf9, 0x3f, 0xc3, 0x93, 0x98, 0x8f, 0x42, 0x96, 0xf8, 0x11, 0x53, 0x3c,
	0x09, 0x6e, 0xfc, 0x20, 0x8d, 0x22, 0x1e, 0xa8, 0x30, 0x4d, 0xfc, 0x30, 0x51, 0x5c, 0xbc, 0x67,
	0x91, 0x1f, 0x87, 0x51, 0x14, 0x4a, 0x6f, 0xc3, 0xec, 0xf7, 0xd8, 0x2a, 0x9c, 0x5a, 0x7e, 0xbf,
	0xa0, 0x9f, 0x20, 0xfb, 0xa5, 0x21, 0x93, 0x27, 0xd0, 0xc1, 0xd0, 0x65, 0x22, 0x0d, 0xb8, 0x94,
	0x5c, 0x7a, 0x9b, 0xc6, 0x00, 0xa6, 0xfa, 0xb9, 0x13, 0x77, 0x5f, 0xb8, 0xba, 0x1f, 0x2a, 0xa6,
	0x72, 0x49, 0xf6, 0xa0, 0x66, 0x9a, 0x3b, 0x36, 0xdc, 0xbb, 0xf3, 0x4a, 0x59, 0x53, 0x25, 0xb5,
	0xbc, 0xee, 0x7d, 0xa8, 0xbe, 0x64, 0xe2, 0x1d, 0xd9, 0x80, 0x9a, 0xe0, 0x92, 0x2b, 0xec, 0x89,
	0x76, 0xd1, 0xcd, 0x01, 0xf0, 0xb6, 0x74, 0xc4, 0x0f, 0xa0, 0x26, 0xb9, 0xca, 0x5d, 0x37, 0xdf,
	0x9a, 0x67, 0xdc, 0x66, 0xe2, 0x60, 0x81, 0x5a, 0x2a, 0xd9, 0x81, 0x6a, 0xcc, 0xc4, 0x3b, 0xec,
	0xe0, 0x64, 0x5a, 0x45, 0xef, 0x3c, 0x58, 0xa0, 0x86, 0x71, 0xd4, 0x80, 0x15, 0x26, 0xc6, 0xba,
	0xd8, 0xba, 0x7f, 0xaf, 0x42, 0x6b, 0x68, 0x1a, 0x15, 0x26, 0xf6, 0x21, 0x34, 0x5d, 0x3b, 0xd3,
	0xc5, 0x58, 0x99, 0xd7, 0xa7, 0xac, 0x82, 0xed, 0x53, 0xb2, 0xf8, 0x9e, 0xd7, 0xa7, 0x16, 0xff,
	0x87, 0x3e, 0x45, 0xa0, 0x9a, 0xa5, 0x42, 0x61, 0x3f, 0x32, 0xdf, 0x93, 0x8e, 0xe2, 0x7c, 0x9b,
	0xd3, 0x51, 0xd0, 0x2b, 0xec, 0x28, 0xd3, 0x95, 0x53, 0x9f, 0xad, 0x9c, 0xdb, 0x3d, 0xa0, 0xf1,
	0xd9, 0x3d, 0x60, 0xaa, 0x72, 0x61, 0xa6, 0x72, 0x8b, 0xd2, 0x44, 0x8f, 0x75, 0x76, 0x37, 0x4b,
	0xa5, 0x69, 0xbd, 0xd5, 0xd9, 0x7d, 0xbb, 0xba, 0x5a, 0x73, 0xaa, 0x6b, 0x0f, 0xd6, 0x05, 0x97,
	0x69, 0x2e, 0x02, 0xee, 0x5f, 0xe7, 0xa9, 0x62, 0xbe, 0x0c, 0x7f, 0xe4, 0xde, 0x3f, 0x6c, 0x04,
	0xee, 0x38, 0xec, 0x3b, 0x0d, 0x0d, 0xc3, 0x1f, 0x39, 0xf9, 0xdd, 0x4c, 0xc5, 0xff, 0x73, 0xe5,
	0x73, 0x4a, 0xfe, 0x09, 0x74, 0xd0, 0xf1, 0x5b, 0x85, 0x61, 0xe5, 0x93, 0xc2, 0xc8, 0x01, 0xf0,
	0x30, 0x9f, 0xce, 0xdc, 0x72, 0xaa, 0xfd, 0x9f, 0x99, 0x1b, 0xba, 0xc4, 0xfd, 0xaf, 0xea, 0x71,
	0x42, 0x75, 0xf5, 0x58, 0xe4, 0xd9, 0x62, 0x29, 0xcf, 0x36, 0xa0, 0xa6, 0x6f, 0xd0, 0x3e, 0xb0,
	0x35, 0x6a, 0x17, 0xdd, 0x55, 0x68, 0xf6, 0x53, 0xc1, 0x29, 0xbf, 0xce, 0xb9, 0x54, 0xdd, 0x47,
	0xd0, 0xb2, 0x4b, 0x99, 0xa5, 0x89, 0xe4, 0x13, 0xa5, 0x4a, 0x59, 0x69, 0x19, 0xaa, 0x6f, 0xd2,
	0x70, 0xd4, 0xfd, 0xd7, 0x22, 0xd4, 0x87, 0x01, 0x4f, 0x98, 0x08, 0xd3, 0xb9, 0x83, 0xc9, 0x0b,
	0x58, 0x75, 0xcf, 0xaa, 0xcd, 0xc4, 0xc5, 0x4f, 0xd5, 0x3c, 0x6d, 0x05, 0xe5, 0x09, 0xe4, 0x67,
	0xd0, 0x4c, 0xf2, 0x18, 0xdf, 0x00, 0xe7, 0x3a, 0x24, 0x79, 0x6c, 0x75, 0xf4, 0xcb, 0x8f, 0xc3,
	0x88, 0xdb, 0xa1, 0xfa, 0xa9, 0xbb, 0xa1, 0x2d, 0x59, 0x6e, 0x0a, 0xb8, 0x83, 0x95, 0xb9, 0x57,
	0x5f, 0xef, 0x60, 0x75, 0xa4, 0x1e, 0x82, 0x3e, 0x30, 0x11, 0xe7, 0x99, 0x2f, 0x79, 0x90, 0x26,
	0x23, 0xe9, 0x2d, 0x1b, 0xce, 0xaa, 0x95, 0x0e, 0xad, 0x90, 0xfc, 0x12, 0xee, 0xfc, 0xc0, 0x93,
	0xe0, 0x4a, 0xdf, 0x65, 0xc1, 0xb4, 0x19, 0xdc, 0x29, 0x00, 0x47, 0x7e, 0x0e, 0x9e, 0xcc, 0xd8,
	0x87, 0xc4, 0x8f, 0xd2, 0x80, 0x45, 0xfe, 0x87, 0x54, 0xbc, 0x33, 0x27, 0xc8, 0x13, 0x57, 0xcf,
	0x9b, 0x06, 0x3f, 0xd5, 0xf0, 0xf7, 0x06, 0xed, 0x6b, 0xb0, 0xdb, 0x83, 0x86, 0x0b, 0xb8, 0x24,
	0xbf, 0x81, 0x86, 0x74, 0x0b, 0x33, 0x99, 0x35, 0x0f, 0xbe, 0x98, 0x39, 0x37, 0xc2, 0x74, 0x42,
	0xec, 0xfe, 0x6d, 0x19, 0x36, 0x0b, 0x39, 0x97, 0x79, 0xa4, 0x86, 0x79, 0x1c, 0x33, 0x71, 0x43,
	0x3a, 0xb0, 0x74, 0x9d, 0x49, 0x1c, 0xd5, 0xf5, 0x27, 0xf9, 0x15, 0xac, 0x5f, 0x67, 0xf8, 0xe4,
	0xb9, 0x28, 0x0b, 0x3b, 0xe1, 0x55, 0x68, 0xe7, 0x3a, 0x33, 0x4f, 0x1e, 0x46, 0x53, 0x70, 0xf2,
	0x35, 0xe0, 0x70, 0xeb, 0xcb, 0x1b, 0xa9, 0x78, 0xec, 0xab, 0x30, 0xb6, 0x13, 0x67, 0x85, 0x62,
	0xcd, 0x0d, 0x0d, 0x70, 0x11, 0xc6, 0x5c, 0xb7, 0x11, 0x64, 0xe7, 0x52, 0xf7, 0x3d, 0xcd, 0xad,
	0x1a, 0x2e, 0x4e, 0x9d, 0xaf, 0x25, 0x17, 0x86, 0xf9, 0x35, 0x10, 0x4c, 0xa3, 0xb2, 0xdd, 0x9a,
	0xb5, 0x6b, 0x91, 0x69, 0xbb, 0xc8, 0x9e, 0xd8, 0x5d, 0xb6, 0x76, 0xad, 0xbc, 0xb0, 0xfb, 0x00,
	0xc0, 0xbd, 0xba, 0xcf, 0xf6, 0xcd, 0x65, 0x55, 0x68, 0x03, 0x25, 0xcf, 0xf6, 0xcb, 0xf0, 0xe1,
	0xbe, 0xb9, 0x97, 0x09, 0x7c, 0x38, 0x0d, 0x3f, 0x33, 0x3d, 0xb6, 0x04, 0x3f, 0x9b, 0x82, 0x0f,
	0xcd, 0x10, 0x57, 0x82, 0x0f, 0x75, 0xde, 0x4d, 0xe0, 0x43, 0xd3, 0x3f, 0x2b, 0x14, 0x0a, 0xfc,
	0xb0, 0x14, 0x9e, 0x20, 0xcb, 0xfd, 0x5c, 0x4f, 0x18, 0xa6, 0x7b, 0x16, 0xe1, 0xe9, 0x67, 0xf9,
	0x6b, 0x2d, 0x25, 0x7d, 0x78, 0x28, 0xf3, 0x40, 0xb7, 0xac, 0xcb, 0x3c, 0xf2, 0x85, 0x2d, 0x65,
	0x77, 0x6b, 0x3a, 0xe1, 0xbc, 0x55, 0xa3, 0x77, 0x6f, 0xc2, 0xc2, 0x7a, 0xb7, 0xf7, 0xa7, 0x29,
	0xe4, 0x1b, 0xd8, 0xba, 0x64, 0x61, 0xc4, 0x47, 0x73, 0x0d, 0xb4, 0x8d, 0x81, 0x2f, 0x2d, 0xe3,
	0xb6, 0xf2, 0x73, 0xf0, 0xdc, 0xac, 0x91, 0x46, 0x91, 0xd5, 0x44, 0x33, 0x66, 0x68, 0xab, 0xd0,
	0x4d, 0x9c, 0x39, 0x34, 0x7c, 0xce, 0x05, 0x9a, 0x30, 0x85, 0x80, 0xbd, 0xf8, 0x96, 0x62, 0xc7,
	0x2a, 0x62, 0x4f, 0x9e, 0x51, 0xfc, 0x2d, 0x6c, 0xa1, 0xe2, 0x75, 0xce, 0x45, 0x88, 0x73, 0x99,
	0x8e, 0x94, 0xe4, 0x81, 0x99, 0xe1, 0x2a, 0xf4, 0x0b, 0xcb, 0xf8, 0xce, 0x12, 0xce, 0x4d, 0xc4,
	0x86, 0x3c, 0xd0, 0xba, 0xe8, 0xed, 0x3c, 0x5d, 0x62, 0x75, 0x2d, 0x63, 0x56, 0xb7, 0xfb, 0xd3,
	0x12, 0xb4, 0xa7, 0xab, 0x87, 0x1c, 0x40, 0xdd, 0x55, 0x17, 0x36, 0xe8, 0x8f, 0x55, 0x61, 0xc1,
	0x23, 0x87, 0x80, 0xa9, 0x10, 0x72, 0x39, 0xff, 0x77, 0x69, 0x31, 0x5c, 0xff, 0x81, 0x29, 0x46,
	0x27, 0x6c, 0xf3, 0xf8, 0x61, 0x31, 0x98, 0x37, 0x61, 0xc9, 0x14, 0xfe, 0x7f, 0x98, 0xd1, 0xf0,
	0xc7, 0x99, 0x59, 0x68, 0x6d, 0x57, 0xa2, 0x46, 0xbb, 0x3a, 0x4f, 0xbb, 0xfc, 0xa2, 0xe0, 0xc8,
	0x64, 0xb5, 0xbf, 0x2a, 0xb4, 0xed, 0xab, 0x50, 0x33, 0x93, 0x41, 0x53, 0x16, 0x2d, 0x40, 0x92,
	0xdf, 0xc3, 0x8a, 0xb4, 0xfd, 0xc4, 0x14, 0x5d, 0xf3, 0xe0, 0xe7, 0x1f, 0x09, 0x46, 0xb9, 0xf5,
	0x50, 0xa7, 0xa3, 0xbb, 0xad, 0x3b, 0x9d, 0x4d, 0x56, 0x4f, 0xbf, 0xed, 0x75, 0x8a, 0xef, 0xc8,
	0xd0, 0x0a, 0x4b, 0xbf, 0x4c, 0x1d, 0xad, 0x6e, 0x69, 0xe8, 0x2d, 0xd2, 0x4e, 0x60, 0x0d, 0xb3,
	0xc9, 0x17, 0x66, 0x3f, 0xe9, 0x35, 0xcc, 0x81, 0xb7, 0x67, 0x7e, 0x82, 0x59, 0x92, 0xf5, 0xc9,
	0x74, 0x5a, 0xda, 0x16, 0x65, 0x99, 0x7c, 0xfa, 0xc6, 0x0d, 0xb1, 0x66, 0x1e, 0x5c, 0x83, 0xe6,
	0xf0, 0xed, 0x59, 0xdf, 0xef, 0x9f, 0x9e, 0x1c, 0x9f, 0x5d, 0x74, 0x16, 0x48, 0x07, 0x5a, 0xbd,
	0xb2, 0xa4, 0xa2, 0x25, 0xaf, 0x2e, 0x06, 0xc7, 0xd4, 0x49, 0x16, 0xc9, 0x3a, 0xac, 0xf5, 0x7b,
	0xa7, 0xa7, 0x47, 0xbd, 0xfe, 0x9f, 0x9c, 0x70, 0xe9, 0x69, 0xe6, 0x46, 0x8c, 0x29, 0xbb, 0xc3,
	0x63, 0xfa, 0xe6, 0x98, 0x96, 0xed, 0xa2, 0xa4, 0x42, 0x3c, 0xd8, 0xb0, 0x92, 0x6f, 0x8f, 0xcf,
	0x8e, 0xe9, 0x49, 0x81, 0x2c, 0x4e, 0x76, 0x44, 0xc9, 0xd2, 0xd4, 0x8e, 0x28, 0xac, 0x3e, 0x15,
	0xb0, 0x82, 0x3f, 0x39, 0x49, 0x03, 0x6a, 0xaf, 0xcf, 0x7a, 0xf4, 0x6d, 0x67, 0x81, 0xac, 0x42,
	0x63, 0x78, 0x41, 0x8f, 0x7b, 0x2f, 0x4f, 0xce, 0xbe, 0xed, 0x54, 0xc8, 0x5d, 0xd8, 0x2c, 0x96,
	0xfe, 0x1f, 0xe9, 0xab, 0x97, 0x93, 0x63, 0xdc, 0x86, 0x8a, 0xfd, 0xbe, 0x84, 0xf5, 0x09, 0x74,
	0xf4, 0xea, 0x62, 0xe0, 0x7f, 0xdf, 0x7b, 0x3b, 0xec, 0x54, 0x7f, 0x58, 0x36, 0x7f, 0x13, 0xfd,
	0xfa, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x37, 0x9f, 0x27, 0xeb, 0xa7, 0x12, 0x00, 0x00,
}
