// Copyright 2020 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package proto;

option go_package = "github.com/grpc/grpc/testctrl/genproto/svc";

import "google/protobuf/duration.proto";
import "google/longrunning/operations.proto";

import "src/proto/grpc/testing/control.proto";

service TestSessions {
  // Starts a set of test scenarios.
  //
  // This is a long-running operation that is managed by the Operations service
  // on the same server.  The long-running operation will assign a unique
  // identifier to the session.
  //
  // The unique identifier can be used to poll for the session's status and
  // results.  Streaming is not supported at present.
  //
  // It can also be used to cancel while in progress, but cancellations operate
  // like killing a running process. If they occur while results are being
  // reported, the persistent storage may receive some but not all of them.
  rpc StartTestSession(StartTestSessionRequest) returns (google.longrunning.Operation) {
    option (google.longrunning.operation_info) = {
      response_type: "TestSessionResults"
      metadata_type: "TestSessionMetadata"
    };
  }
}

message StartTestSessionRequest {
  // The test scenarios to run as a part of the test session.
  repeated grpc.testing.Scenario scenarios = 1;  // [(google.api.field_behavior) = REQUIRED];

  // The name and tag of the docker image which starts the driver.
  //
  // Name and tag should be colon delimited.  If this field is not specified,
  // the latest driver version that was built will be used.  It's version number
  // will be made available in the test session response.
  string driver_container_image = 2;  // [(google.api.field_behavior) = OPTIONAL];

  // The name and tag of the docker image which starts a worker.
  //
  // Name and tag should be colon delimited.  The same worker image is expected
  // to be used for the client and servers.  Workers are passed a WORKER_KIND
  // environment variable, specifying either "server" or "client".
  string worker_container_image = 3;  // [(google.api.field_behavior) = REQUIRED];

  // An optional location where the results should be written.
  oneof result_destination {
    // The name of the BigQuery table where results should be written.
    string bq_results_table = 4;  // [(google.api.field_behavior) = OPTIONAL];

    // The fully qualified GCS URI where a results file should be written.
    string gcs_results_file_uri = 5;  // [(google.api.field_behavior) = OPTIONAL];
  }
 }

message TestSessionResults {
  // The results for each scenario.
  repeated grpc.testing.ScenarioResult scenario_results = 1;

  // The amount of time that this session lived, including scheduling to
  // to reporting results.
  google.protobuf.Duration time_elapsed = 2;
}

message TestSessionMetadata {
  enum RunPhase {
    // The test session is waiting for idle nodes to schedule pods.
    QUEUED = 0;

    // Kubernetes is creating and starting the test pods.
    SETUP = 1;

    // The driver is waiting for the workers to warmup.
    WARMUP = 2;

    // The tests are running and metrics are being collected.
    TESTING = 3;

    // Results are being saved to persistent storage.
    REPORTING = 4;
  }

  // If the session has not terminated, this field is included to provide
  // progress updates.
  RunPhase phase = 1;

  // The version number for the Go driver that was tested.
  string driver_version = 3;

  // The name of the kubernetes cluster where tests were run.
  string gke_cluster = 4;
}

