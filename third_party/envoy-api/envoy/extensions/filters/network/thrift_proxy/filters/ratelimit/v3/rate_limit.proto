syntax = "proto3";

package envoy.extensions.filters.network.thrift_proxy.filters.ratelimit.v3;

import "envoy/config/ratelimit/v3/rls.proto";

import "google/protobuf/duration.proto";

import "udpa/annotations/status.proto";
import "udpa/annotations/versioning.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.extensions.filters.network.thrift_proxy.filters.ratelimit.v3";
option java_outer_classname = "RateLimitProto";
option java_multiple_files = true;
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: Rate limit]
// Rate limit :ref:`configuration overview <config_thrift_filters_rate_limit>`.
// [#extension: envoy.filters.thrift.ratelimit]

// [#next-free-field: 6]
message RateLimit {
  option (udpa.annotations.versioning).previous_message_type =
      "envoy.config.filter.thrift.rate_limit.v2alpha1.RateLimit";

  // The rate limit domain to use in the rate limit service request.
  string domain = 1 [(validate.rules).string = {min_len: 1}];

  // Specifies the rate limit configuration stage. Each configured rate limit filter performs a
  // rate limit check using descriptors configured in the
  // :ref:`envoy_api_msg_extensions.filters.network.thrift_proxy.v3.RouteAction` for the request.
  // Only those entries with a matching stage number are used for a given filter. If not set, the
  // default stage number is 0.
  //
  // .. note::
  //
  //  The filter supports a range of 0 - 10 inclusively for stage numbers.
  uint32 stage = 2 [(validate.rules).uint32 = {lte: 10}];

  // The timeout in milliseconds for the rate limit service RPC. If not
  // set, this defaults to 20ms.
  google.protobuf.Duration timeout = 3;

  // The filter's behaviour in case the rate limiting service does
  // not respond back. When it is set to true, Envoy will not allow traffic in case of
  // communication failure between rate limiting service and the proxy.
  // Defaults to false.
  bool failure_mode_deny = 4;

  // Configuration for an external rate limit service provider. If not
  // specified, any calls to the rate limit service will immediately return
  // success.
  config.ratelimit.v3.RateLimitServiceConfig rate_limit_service = 5
      [(validate.rules).message = {required: true}];
}
