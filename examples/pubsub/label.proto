// This file will be moved to a new location.

// Copyright 2015, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Labels provide a way to associate user-defined metadata with various
// objects.  Labels may be used to organize objects into non-hierarchical
// groups; think metadata tags attached to mp3s.

syntax = "proto2";

package tech.label;

// A key-value pair applied to a given object.
message Label {
  // The key of a label is a syntactically valid URL (as per RFC 1738) with
  // the "scheme" and initial slashes omitted and with the additional
  // restrictions noted below.  Each key should be globally unique.  The
  // "host" portion is called the "namespace" and is not necessarily
  // resolvable to a network endpoint.  Instead, the namespace indicates what
  // system or entity defines the semantics of the label.  Namespaces do not
  // restrict the set of objects to which a label may be associated.
  //
  // Keys are defined by the following grammar:
  //
  //   key          = hostname "/" kpath
  //   kpath        = ksegment *[ "/" ksegment ]
  //   ksegment     = alphadigit | *[ alphadigit | "-" | "_" | "." ]
  //
  // where "hostname" and "alphadigit" are defined as in RFC 1738.
  //
  // Example key:
  //   spanner.google.com/universe
  required string key = 1;

  // The value of the label.
  oneof value {
    // A string value.
    string str_value = 2;
    // An integer value.
    int64 num_value = 3;
  }
}

// A collection of labels, such as the set of all labels attached to an
// object.  Each label in the set must have a different key.
//
// Users should prefer to embed "repeated Label" directly when possible.
// This message should only be used in cases where that isn't possible (e.g.
// with oneof).
message Labels {
  repeated Label label = 1;
}
