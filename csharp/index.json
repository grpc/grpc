{
  "api/Grpc.Core.DuplexStreamingServerMethod-2.html": {
    "href": "api/Grpc.Core.DuplexStreamingServerMethod-2.html",
    "title": "Delegate DuplexStreamingServerMethod<TRequest, TResponse> | gRPC C#",
    "keywords": "Delegate DuplexStreamingServerMethod<TRequest, TResponse> Server-side handler for bidi streaming call. Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public delegate Task DuplexStreamingServerMethod<TRequest, TResponse>(IAsyncStreamReader<TRequest> requestStream, IServerStreamWriter<TResponse> responseStream, ServerCallContext context) where TRequest : class where TResponse : class; Parameters Type Name Description IAsyncStreamReader <TRequest> requestStream IServerStreamWriter <TResponse> responseStream ServerCallContext context Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TRequest Request message type for this method. TResponse Response message type for this method."
  },
  "api/Grpc.Core.Testing.html": {
    "href": "api/Grpc.Core.Testing.html",
    "title": "Namespace Grpc.Core.Testing | gRPC C#",
    "keywords": "Namespace Grpc.Core.Testing Classes TestCalls Test doubles for client-side call objects. TestServerCallContext Creates test doubles for ServerCallContext ."
  },
  "api/Grpc.Core.ServerPort.html": {
    "href": "api/Grpc.Core.ServerPort.html",
    "title": "Class ServerPort | gRPC C#",
    "keywords": "Class ServerPort A port exposed by a server. Inheritance System.Object ServerPort Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.dll Syntax public class ServerPort Constructors ServerPort(String, Int32, ServerCredentials) Creates a new port on which server should listen. Declaration public ServerPort(string host, int port, ServerCredentials credentials) Parameters Type Name Description System.String host the host System.Int32 port the port. If zero, an unused port is chosen automatically. ServerCredentials credentials credentials to use to secure this port. Fields PickUnused Pass this value as port to have the server choose an unused listening port for you. Ports added to a server will contain the bound port in their BoundPort property. Declaration public const int PickUnused = 0 Field Value Type Description System.Int32 Properties BoundPort Declaration public int BoundPort { get; } Property Value Type Description System.Int32 The port actually bound by the server. This is useful if you let server pick port automatically. PickUnused Credentials Declaration public ServerCredentials Credentials { get; } Property Value Type Description ServerCredentials The server credentials. Host Declaration public string Host { get; } Property Value Type Description System.String The host. Port Declaration public int Port { get; } Property Value Type Description System.Int32 The port."
  },
  "api/Grpc.Core.IServerStreamWriter-1.html": {
    "href": "api/Grpc.Core.IServerStreamWriter-1.html",
    "title": "Interface IServerStreamWriter<T> | gRPC C#",
    "keywords": "Interface IServerStreamWriter<T> A writable stream of messages that is used in server-side handlers. Inherited Members IAsyncStreamWriter<T>.WriteAsync(T) IAsyncStreamWriter<T>.WriteOptions Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public interface IServerStreamWriter<in T> : IAsyncStreamWriter<T> Type Parameters Name Description T"
  },
  "api/Grpc.Core.DeserializationContext.html": {
    "href": "api/Grpc.Core.DeserializationContext.html",
    "title": "Class DeserializationContext | gRPC C#",
    "keywords": "Class DeserializationContext Provides access to the payload being deserialized when deserializing messages. Inheritance System.Object DeserializationContext Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public abstract class DeserializationContext Properties PayloadLength Get the total length of the payload in bytes. Declaration public abstract int PayloadLength { get; } Property Value Type Description System.Int32 Methods PayloadAsNewBuffer() Gets the entire payload as a newly allocated byte array. Once the byte array is returned, the byte array becomes owned by the caller and won't be ever accessed or reused by gRPC again. NOTE: Obtaining the buffer as a newly allocated byte array is the simplest way of accessing the payload, but it can have important consequences in high-performance scenarios. In particular, using this method usually requires copying of the entire buffer one extra time. Also, allocating a new buffer each time can put excessive pressure on GC, especially if the payload is more than 86700 bytes large (which means the newly allocated buffer will be placed in LOH, and LOH object can only be garbage collected via a full (\"stop the world\") GC run). NOTE: Deserializers are expected not to call this method (or other payload accessor methods) more than once per received message (as there is no practical reason for doing so) and DeserializationContext implementations are free to assume so. Declaration public virtual byte[] PayloadAsNewBuffer() Returns Type Description System.Byte [] byte array containing the entire payload. PayloadAsReadOnlySequence() Gets the entire payload as a ReadOnlySequence. The ReadOnlySequence is only valid for the duration of the deserializer routine and the caller must not access it after the deserializer returns. Using the read only sequence is the most efficient way to access the message payload. Where possible it allows directly accessing the received payload without needing to perform any buffer copying or buffer allocations. NOTE: When using this method, it is recommended to use C# 7.2 compiler to make it more useful (using Span type directly from your code requires C# 7.2).\" NOTE: Deserializers are expected not to call this method (or other payload accessor methods) more than once per received message (as there is no practical reason for doing so) and DeserializationContext implementations are free to assume so. Declaration public virtual Buffers.ReadOnlySequence<byte> PayloadAsReadOnlySequence() Returns Type Description System.Buffers.ReadOnlySequence < System.Byte > read only sequence containing the entire payload."
  },
  "api/Grpc.Core.RpcException.html": {
    "href": "api/Grpc.Core.RpcException.html",
    "title": "Class RpcException | gRPC C#",
    "keywords": "Class RpcException Thrown when remote procedure call fails. Every RpcException is associated with a resulting Status of the call. Inheritance System.Object System.Exception RpcException Implements System.Runtime.InteropServices._Exception System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public class RpcException : Exception, _Exception, ISerializable Constructors RpcException(Status) Creates a new RpcException associated with given status. Declaration public RpcException(Status status) Parameters Type Name Description Status status Resulting status of a call. RpcException(Status, Metadata) Creates a new RpcException associated with given status and trailing response metadata. Declaration public RpcException(Status status, Metadata trailers) Parameters Type Name Description Status status Resulting status of a call. Metadata trailers Response trailing metadata. RpcException(Status, Metadata, String) Creates a new RpcException associated with given status, message and trailing response metadata. NOTE: the exception message is not sent to the remote peer. Use status.Details to pass error details to the peer. Declaration public RpcException(Status status, Metadata trailers, string message) Parameters Type Name Description Status status Resulting status of a call. Metadata trailers Response trailing metadata. System.String message The exception message. RpcException(Status, String) Creates a new RpcException associated with given status and message. NOTE: the exception message is not sent to the remote peer. Use status.Details to pass error details to the peer. Declaration public RpcException(Status status, string message) Parameters Type Name Description Status status Resulting status of a call. System.String message The exception message. Properties Status Resulting status of the call. Declaration public Status Status { get; } Property Value Type Description Status StatusCode Returns the status code of the call, as a convenient alternative to StatusCode . Declaration public StatusCode StatusCode { get; } Property Value Type Description StatusCode Trailers Gets the call trailing metadata. Trailers only have meaningful content for client-side calls (in which case they represent the trailing metadata sent by the server when closing the call). Instances of RpcException thrown by the server-side part of the stack will have trailers always set to empty. Declaration public Metadata Trailers { get; } Property Value Type Description Metadata Implements System.Runtime.InteropServices._Exception System.Runtime.Serialization.ISerializable"
  },
  "api/Grpc.Core.Logging.LogLevelFilterLogger.html": {
    "href": "api/Grpc.Core.Logging.LogLevelFilterLogger.html",
    "title": "Class LogLevelFilterLogger | gRPC C#",
    "keywords": "Class LogLevelFilterLogger Logger that filters out messages below certain log level. Inheritance System.Object LogLevelFilterLogger Implements ILogger Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core.Logging Assembly : Grpc.Core.dll Syntax public class LogLevelFilterLogger : ILogger Constructors LogLevelFilterLogger(ILogger, LogLevel) Creates and instance of LogLevelFilter. Declaration public LogLevelFilterLogger(ILogger logger, LogLevel logLevel) Parameters Type Name Description ILogger logger LogLevel logLevel LogLevelFilterLogger(ILogger, LogLevel, Boolean) Creates and instance of LogLevelFilter. The fromEnvironmentVariable parameter allows looking up \"GRPC_VERBOSITY\" setting provided by C-core and uses the same log level for C# logs. Using this setting is recommended as it can prevent unintentionally hiding C core logs requested by \"GRPC_VERBOSITY\" environment variable (which could happen if C# logger's log level was set to a more restrictive value). Declaration public LogLevelFilterLogger(ILogger logger, LogLevel defaultLogLevel, bool fromEnvironmentVariable) Parameters Type Name Description ILogger logger the logger to forward filtered logs to. LogLevel defaultLogLevel the default log level, unless overriden by env variable. System.Boolean fromEnvironmentVariable if true , override log level with setting from environment variable. Methods Debug(String) Logs a message with severity Debug. Declaration public void Debug(string message) Parameters Type Name Description System.String message Debug(String, Object[]) Logs a formatted message with severity Debug. Declaration public void Debug(string format, params object[] formatArgs) Parameters Type Name Description System.String format System.Object [] formatArgs Error(Exception, String) Logs a message and an associated exception with severity Error. Declaration public void Error(Exception exception, string message) Parameters Type Name Description System.Exception exception System.String message Error(String) Logs a message with severity Error. Declaration public void Error(string message) Parameters Type Name Description System.String message Error(String, Object[]) Logs a formatted message with severity Error. Declaration public void Error(string format, params object[] formatArgs) Parameters Type Name Description System.String format System.Object [] formatArgs ForType<T>() Returns a logger associated with the specified type. Declaration public virtual ILogger ForType<T>() Returns Type Description ILogger Type Parameters Name Description T Info(String) Logs a message with severity Info. Declaration public void Info(string message) Parameters Type Name Description System.String message Info(String, Object[]) Logs a formatted message with severity Info. Declaration public void Info(string format, params object[] formatArgs) Parameters Type Name Description System.String format System.Object [] formatArgs Warning(Exception, String) Logs a message and an associated exception with severity Warning. Declaration public void Warning(Exception exception, string message) Parameters Type Name Description System.Exception exception System.String message Warning(String) Logs a message with severity Warning. Declaration public void Warning(string message) Parameters Type Name Description System.String message Warning(String, Object[]) Logs a formatted message with severity Warning. Declaration public void Warning(string format, params object[] formatArgs) Parameters Type Name Description System.String format System.Object [] formatArgs Implements ILogger"
  },
  "api/Grpc.Health.V1.HealthReflection.html": {
    "href": "api/Grpc.Health.V1.HealthReflection.html",
    "title": "Class HealthReflection | gRPC C#",
    "keywords": "Class HealthReflection Holder for reflection information generated from grpc/health/v1/health.proto Inheritance System.Object HealthReflection Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Health.V1 Assembly : Grpc.HealthCheck.dll Syntax public static class HealthReflection Properties Descriptor File descriptor for grpc/health/v1/health.proto Declaration public static Google.Protobuf.Reflection.FileDescriptor Descriptor { get; } Property Value Type Description Google.Protobuf.Reflection.FileDescriptor"
  },
  "api/Grpc.Health.V1.HealthCheckResponse.html": {
    "href": "api/Grpc.Health.V1.HealthCheckResponse.html",
    "title": "Class HealthCheckResponse | gRPC C#",
    "keywords": "Class HealthCheckResponse Inheritance Google.Protobuf.IMessage < HealthCheckResponse > HealthCheckResponse Implements Google.Protobuf.IBufferMessage Namespace : Grpc.Health.V1 Assembly : Grpc.HealthCheck.dll Syntax public sealed class HealthCheckResponse : Google.Protobuf.IMessage<HealthCheckResponse>, Google.Protobuf.IBufferMessage Constructors HealthCheckResponse() Declaration public HealthCheckResponse() HealthCheckResponse(HealthCheckResponse) Declaration public HealthCheckResponse(HealthCheckResponse other) Parameters Type Name Description HealthCheckResponse other Fields StatusFieldNumber Field number for the \"status\" field. Declaration public const int StatusFieldNumber = 1 Field Value Type Description System.Int32 Properties Descriptor Declaration public static Google.Protobuf.Reflection.MessageDescriptor Descriptor { get; } Property Value Type Description Google.Protobuf.Reflection.MessageDescriptor Parser Declaration public static Google.Protobuf.MessageParser<HealthCheckResponse> Parser { get; } Property Value Type Description Google.Protobuf.MessageParser < HealthCheckResponse > Status Declaration public HealthCheckResponse.Types.ServingStatus Status { get; set; } Property Value Type Description HealthCheckResponse.Types.ServingStatus Methods CalculateSize() Declaration public int CalculateSize() Returns Type Description System.Int32 Clone() Declaration public HealthCheckResponse Clone() Returns Type Description HealthCheckResponse Equals(HealthCheckResponse) Declaration public bool Equals(HealthCheckResponse other) Parameters Type Name Description HealthCheckResponse other Returns Type Description System.Boolean Equals(Object) Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 MergeFrom(Google.Protobuf.CodedInputStream) Declaration public void MergeFrom(Google.Protobuf.CodedInputStream input) Parameters Type Name Description Google.Protobuf.CodedInputStream input MergeFrom(HealthCheckResponse) Declaration public void MergeFrom(HealthCheckResponse other) Parameters Type Name Description HealthCheckResponse other ToString() Declaration public override string ToString() Returns Type Description System.String WriteTo(Google.Protobuf.CodedOutputStream) Declaration public void WriteTo(Google.Protobuf.CodedOutputStream output) Parameters Type Name Description Google.Protobuf.CodedOutputStream output Implements Google.Protobuf.IBufferMessage"
  },
  "api/Grpc.Core.Metadata.html": {
    "href": "api/Grpc.Core.Metadata.html",
    "title": "Class Metadata | gRPC C#",
    "keywords": "Class Metadata A collection of metadata entries that can be exchanged during a call. gRPC supports these types of metadata: Request headersare sent by the client at the beginning of a remote call before any request messages are sent. Response headersare sent by the server at the beginning of a remote call handler before any response messages are sent. Response trailersare sent by the server at the end of a remote call along with resulting call status. Inheritance System.Object Metadata Implements System.Collections.Generic.IList < Metadata.Entry > System.Collections.Generic.ICollection < Metadata.Entry > System.Collections.Generic.IEnumerable < Metadata.Entry > System.Collections.IEnumerable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public sealed class Metadata : IList<Metadata.Entry>, ICollection<Metadata.Entry>, IEnumerable<Metadata.Entry>, IEnumerable Constructors Metadata() Initializes a new instance of Metadata . Declaration public Metadata() Fields BinaryHeaderSuffix All binary headers should have this suffix. Declaration public const string BinaryHeaderSuffix = \"-bin\" Field Value Type Description System.String Empty An read-only instance of metadata containing no entries. Declaration public static readonly Metadata Empty Field Value Type Description Metadata Properties Count IList`1 Declaration public int Count { get; } Property Value Type Description System.Int32 IsReadOnly IList`1 Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean Item[Int32] IList`1 Declaration public Metadata.Entry this[int index] { get; set; } Parameters Type Name Description System.Int32 index Property Value Type Description Metadata.Entry Methods Add(Metadata.Entry) IList`1 Declaration public void Add(Metadata.Entry item) Parameters Type Name Description Metadata.Entry item Add(String, Byte[]) Adds a new binary-valued metadata entry. See Metadata.Entry constructor for params. Declaration public void Add(string key, byte[] valueBytes) Parameters Type Name Description System.String key System.Byte [] valueBytes Add(String, String) Adds a new ASCII-valued metadata entry. See Metadata.Entry constructor for params. Declaration public void Add(string key, string value) Parameters Type Name Description System.String key System.String value Clear() IList`1 Declaration public void Clear() Contains(Metadata.Entry) IList`1 Declaration public bool Contains(Metadata.Entry item) Parameters Type Name Description Metadata.Entry item Returns Type Description System.Boolean CopyTo(Metadata.Entry[], Int32) IList`1 Declaration public void CopyTo(Metadata.Entry[] array, int arrayIndex) Parameters Type Name Description Metadata.Entry [] array System.Int32 arrayIndex Get(String) Gets the last metadata entry with the specified key. If there are no matching entries then null is returned. Declaration public Metadata.Entry? Get(string key) Parameters Type Name Description System.String key Returns Type Description System.Nullable < Metadata.Entry > GetAll(String) Gets all metadata entries with the specified key. Declaration public IEnumerable<Metadata.Entry> GetAll(string key) Parameters Type Name Description System.String key Returns Type Description System.Collections.Generic.IEnumerable < Metadata.Entry > GetEnumerator() IList`1 Declaration public IEnumerator<Metadata.Entry> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < Metadata.Entry > GetValue(String) Gets the string value of the last metadata entry with the specified key. If the metadata entry is binary then an exception is thrown. If there are no matching entries then null is returned. Declaration public string? GetValue(string key) Parameters Type Name Description System.String key Returns Type Description System.Nullable < System.String > IndexOf(Metadata.Entry) IList`1 Declaration public int IndexOf(Metadata.Entry item) Parameters Type Name Description Metadata.Entry item Returns Type Description System.Int32 Insert(Int32, Metadata.Entry) IList`1 Declaration public void Insert(int index, Metadata.Entry item) Parameters Type Name Description System.Int32 index Metadata.Entry item Remove(Metadata.Entry) IList`1 Declaration public bool Remove(Metadata.Entry item) Parameters Type Name Description Metadata.Entry item Returns Type Description System.Boolean RemoveAt(Int32) IList`1 Declaration public void RemoveAt(int index) Parameters Type Name Description System.Int32 index Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Grpc.Core.AsyncAuthInterceptor.html": {
    "href": "api/Grpc.Core.AsyncAuthInterceptor.html",
    "title": "Delegate AsyncAuthInterceptor | gRPC C#",
    "keywords": "Delegate AsyncAuthInterceptor Asynchronous authentication interceptor for CallCredentials . Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public delegate Task AsyncAuthInterceptor(AuthInterceptorContext context, Metadata metadata); Parameters Type Name Description AuthInterceptorContext context The interceptor context. Metadata metadata Metadata to populate with entries that will be added to outgoing call's headers. Returns Type Description System.Threading.Tasks.Task"
  },
  "api/Grpc.Core.GrpcEnvironment.html": {
    "href": "api/Grpc.Core.GrpcEnvironment.html",
    "title": "Class GrpcEnvironment | gRPC C#",
    "keywords": "Class GrpcEnvironment Encapsulates initialization and shutdown of gRPC library. Inheritance System.Object GrpcEnvironment Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.dll Syntax public class GrpcEnvironment Properties Logger Gets application-wide logger used by gRPC. Declaration public static ILogger Logger { get; } Property Value Type Description ILogger The logger. Methods KillServersAsync() Requests immediate shutdown of all servers created by the current process. Declaration public static Task KillServersAsync() Returns Type Description System.Threading.Tasks.Task SetBatchContextPoolParams(Int32, Int32) Sets the parameters for a pool that caches batch context instances. Reusing batch context instances instead of creating a new one for every C core operation helps reducing the GC pressure. Can be only invoked before the GrpcEnviroment is started and cannot be changed afterwards. This is an advanced setting and you should only use it if you know what you are doing. Most users should rely on the default value provided by gRPC library. Note: this method is part of an experimental API that can change or be removed without any prior notice. Declaration public static void SetBatchContextPoolParams(int sharedCapacity, int threadLocalCapacity) Parameters Type Name Description System.Int32 sharedCapacity System.Int32 threadLocalCapacity SetCompletionQueueCount(Int32) Sets the number of completion queues in the gRPC thread pool that polls for internal RPC events. Can be only invoked before the GrpcEnviroment is started and cannot be changed afterwards. Setting the number of completions queues is an advanced setting and you should only use it if you know what you are doing. Most users should rely on the default value provided by gRPC library. Note: this method is part of an experimental API that can change or be removed without any prior notice. Declaration public static void SetCompletionQueueCount(int completionQueueCount) Parameters Type Name Description System.Int32 completionQueueCount SetHandlerInlining(Boolean) By default, gRPC's internal event handlers get offloaded to .NET default thread pool thread ( inlineHandlers=false ). Setting inlineHandlers to true will allow scheduling the event handlers directly to GrpcThreadPool internal threads. That can lead to significant performance gains in some situations, but requires user to never block in async code (incorrectly written code can easily lead to deadlocks). Inlining handlers is an advanced setting and you should only use it if you know what you are doing. Most users should rely on the default value provided by gRPC library. Note: this method is part of an experimental API that can change or be removed without any prior notice. Note: inlineHandlers=true was the default in gRPC C# v1.4.x and earlier. Declaration public static void SetHandlerInlining(bool inlineHandlers) Parameters Type Name Description System.Boolean inlineHandlers SetLogger(ILogger) Sets the application-wide logger that should be used by gRPC. Declaration public static void SetLogger(ILogger customLogger) Parameters Type Name Description ILogger customLogger SetRequestCallContextPoolParams(Int32, Int32) Sets the parameters for a pool that caches request call context instances. Reusing request call context instances instead of creating a new one for every requested call in C core helps reducing the GC pressure. Can be only invoked before the GrpcEnviroment is started and cannot be changed afterwards. This is an advanced setting and you should only use it if you know what you are doing. Most users should rely on the default value provided by gRPC library. Note: this method is part of an experimental API that can change or be removed without any prior notice. Declaration public static void SetRequestCallContextPoolParams(int sharedCapacity, int threadLocalCapacity) Parameters Type Name Description System.Int32 sharedCapacity System.Int32 threadLocalCapacity SetThreadPoolSize(Int32) Sets the number of threads in the gRPC thread pool that polls for internal RPC events. Can be only invoked before the GrpcEnviroment is started and cannot be changed afterwards. Setting thread pool size is an advanced setting and you should only use it if you know what you are doing. Most users should rely on the default value provided by gRPC library. Note: this method is part of an experimental API that can change or be removed without any prior notice. Declaration public static void SetThreadPoolSize(int threadCount) Parameters Type Name Description System.Int32 threadCount ShutdownChannelsAsync() Requests shutdown of all channels created by the current process. Declaration public static Task ShutdownChannelsAsync() Returns Type Description System.Threading.Tasks.Task Events ShuttingDown Occurs when GrpcEnvironment is about the start the shutdown logic. If GrpcEnvironment is later initialized and shutdown, the event will be fired again (unless unregistered first). Declaration public static event EventHandler ShuttingDown Event Type Type Description System.EventHandler"
  },
  "api/Grpc.Core.CompressionLevel.html": {
    "href": "api/Grpc.Core.CompressionLevel.html",
    "title": "Enum CompressionLevel | gRPC C#",
    "keywords": "Enum CompressionLevel Compression level based on grpc_compression_level from grpc/compression.h Namespace : Grpc.Core Assembly : Grpc.Core.dll Syntax public enum CompressionLevel Fields Name Description High High compression. Low Low compression. Medium Medium compression. None No compression."
  },
  "api/Grpc.Core.Utils.html": {
    "href": "api/Grpc.Core.Utils.html",
    "title": "Namespace Grpc.Core.Utils | gRPC C#",
    "keywords": "Namespace Grpc.Core.Utils Classes AsyncStreamExtensions Extension methods that simplify work with gRPC streaming calls. BenchmarkUtil Utility methods to run microbenchmarks. GrpcPreconditions Utility methods to simplify checking preconditions in the code. TaskUtils Utility methods for task parallel library."
  },
  "api/Grpc.Core.ChannelBase.html": {
    "href": "api/Grpc.Core.ChannelBase.html",
    "title": "Class ChannelBase | gRPC C#",
    "keywords": "Class ChannelBase Base class for gRPC channel. Channels are an abstraction of long-lived connections to remote servers. Inheritance System.Object ChannelBase Channel Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public abstract class ChannelBase Constructors ChannelBase(String) Initializes a new instance of ChannelBase class that connects to a specific host. Declaration protected ChannelBase(string target) Parameters Type Name Description System.String target Target of the channel. Properties Target The original target used to create the channel. Declaration public string Target { get; } Property Value Type Description System.String Methods CreateCallInvoker() Create a new CallInvoker for the channel. Declaration public abstract CallInvoker CreateCallInvoker() Returns Type Description CallInvoker A new CallInvoker . ShutdownAsync() Shuts down the channel cleanly. It is strongly recommended to shutdown the channel once you stopped using it. Declaration public Task ShutdownAsync() Returns Type Description System.Threading.Tasks.Task Remarks Guidance for implementors: This method doesn't wait for all calls on this channel to finish (nor does it have to explicitly cancel all outstanding calls). It is user's responsibility to make sure all the calls on this channel have finished (successfully or with an error) before shutting down the channel to ensure channel shutdown won't impact the outcome of those remote calls. ShutdownAsyncCore() Provides implementation of a non-virtual public member. Declaration protected virtual Task ShutdownAsyncCore() Returns Type Description System.Threading.Tasks.Task Extension Methods ChannelExtensions.Intercept(ChannelBase, Interceptor) ChannelExtensions.Intercept(ChannelBase, Interceptor[]) ChannelExtensions.Intercept(ChannelBase, Func<Metadata, Metadata>)"
  },
  "api/Grpc.Core.ServerServiceDefinition.Builder.html": {
    "href": "api/Grpc.Core.ServerServiceDefinition.Builder.html",
    "title": "Class ServerServiceDefinition.Builder | gRPC C#",
    "keywords": "Class ServerServiceDefinition.Builder Builder class for ServerServiceDefinition . Inheritance System.Object ServerServiceDefinition.Builder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public class Builder Constructors Builder() Creates a new instance of builder. Declaration public Builder() Methods AddMethod<TRequest, TResponse>(Method<TRequest, TResponse>, ClientStreamingServerMethod<TRequest, TResponse>) Adds a definition for a client streaming method. Declaration public ServerServiceDefinition.Builder AddMethod<TRequest, TResponse>(Method<TRequest, TResponse> method, ClientStreamingServerMethod<TRequest, TResponse> handler) where TRequest : class where TResponse : class Parameters Type Name Description Method <TRequest, TResponse> method The method. ClientStreamingServerMethod <TRequest, TResponse> handler The method handler. Returns Type Description ServerServiceDefinition.Builder This builder instance. Type Parameters Name Description TRequest The request message class. TResponse The response message class. AddMethod<TRequest, TResponse>(Method<TRequest, TResponse>, DuplexStreamingServerMethod<TRequest, TResponse>) Adds a definition for a bidirectional streaming method. Declaration public ServerServiceDefinition.Builder AddMethod<TRequest, TResponse>(Method<TRequest, TResponse> method, DuplexStreamingServerMethod<TRequest, TResponse> handler) where TRequest : class where TResponse : class Parameters Type Name Description Method <TRequest, TResponse> method The method. DuplexStreamingServerMethod <TRequest, TResponse> handler The method handler. Returns Type Description ServerServiceDefinition.Builder This builder instance. Type Parameters Name Description TRequest The request message class. TResponse The response message class. AddMethod<TRequest, TResponse>(Method<TRequest, TResponse>, ServerStreamingServerMethod<TRequest, TResponse>) Adds a definition for a server streaming method. Declaration public ServerServiceDefinition.Builder AddMethod<TRequest, TResponse>(Method<TRequest, TResponse> method, ServerStreamingServerMethod<TRequest, TResponse> handler) where TRequest : class where TResponse : class Parameters Type Name Description Method <TRequest, TResponse> method The method. ServerStreamingServerMethod <TRequest, TResponse> handler The method handler. Returns Type Description ServerServiceDefinition.Builder This builder instance. Type Parameters Name Description TRequest The request message class. TResponse The response message class. AddMethod<TRequest, TResponse>(Method<TRequest, TResponse>, UnaryServerMethod<TRequest, TResponse>) Adds a definition for a single request - single response method. Declaration public ServerServiceDefinition.Builder AddMethod<TRequest, TResponse>(Method<TRequest, TResponse> method, UnaryServerMethod<TRequest, TResponse> handler) where TRequest : class where TResponse : class Parameters Type Name Description Method <TRequest, TResponse> method The method. UnaryServerMethod <TRequest, TResponse> handler The method handler. Returns Type Description ServerServiceDefinition.Builder This builder instance. Type Parameters Name Description TRequest The request message class. TResponse The response message class. Build() Creates an immutable ServerServiceDefinition from this builder. Declaration public ServerServiceDefinition Build() Returns Type Description ServerServiceDefinition The ServerServiceDefinition object."
  },
  "api/Grpc.Core.StatusCode.html": {
    "href": "api/Grpc.Core.StatusCode.html",
    "title": "Enum StatusCode | gRPC C#",
    "keywords": "Enum StatusCode Result of a remote procedure call. Based on grpc_status_code from grpc/status.h Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public enum StatusCode Fields Name Description Aborted The operation was aborted, typically due to a concurrency issue like sequencer check failures, transaction aborts, etc. AlreadyExists Some entity that we attempted to create (e.g., file or directory) already exists. Cancelled The operation was cancelled (typically by the caller). DataLoss Unrecoverable data loss or corruption. DeadlineExceeded Deadline expired before operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. FailedPrecondition Operation was rejected because the system is not in a state required for the operation's execution. For example, directory to be deleted may be non-empty, an rmdir operation is applied to a non-directory, etc. Internal Internal errors. Means some invariants expected by underlying system has been broken. If you see one of these errors, something is very broken. InvalidArgument Client specified an invalid argument. Note that this differs from FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). NotFound Some requested entity (e.g., file or directory) was not found. OK Not an error; returned on success. OutOfRange Operation was attempted past the valid range. E.g., seeking or reading past end of file. PermissionDenied The caller does not have permission to execute the specified operation. PERMISSION_DENIED must not be used for rejections caused by exhausting some resource (use RESOURCE_EXHAUSTED instead for those errors). PERMISSION_DENIED must not be used if the caller can not be identified (use UNAUTHENTICATED instead for those errors). ResourceExhausted Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. Unauthenticated The request does not have valid authentication credentials for the operation. Unavailable The service is currently unavailable. This is a most likely a transient condition and may be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. Unimplemented Operation is not implemented or not supported/enabled in this service. Unknown Unknown error. An example of where this error may be returned is if a Status value received from another address space belongs to an error-space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error."
  },
  "api/Grpc.Core.Server.ServerPortCollection.html": {
    "href": "api/Grpc.Core.Server.ServerPortCollection.html",
    "title": "Class Server.ServerPortCollection | gRPC C#",
    "keywords": "Class Server.ServerPortCollection Collection of server ports. Inheritance System.Object Server.ServerPortCollection Implements System.Collections.Generic.IEnumerable < ServerPort > System.Collections.IEnumerable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.dll Syntax public class ServerPortCollection : IEnumerable<ServerPort>, IEnumerable Methods Add(ServerPort) Adds a new port on which server should listen. Only call this before Start(). The port on which server will be listening. Return value of zero means that binding the port has failed. Declaration public int Add(ServerPort serverPort) Parameters Type Name Description ServerPort serverPort Returns Type Description System.Int32 Add(String, Int32, ServerCredentials) Adds a new port on which server should listen. The port on which server will be listening. Return value of zero means that binding the port has failed. Declaration public int Add(string host, int port, ServerCredentials credentials) Parameters Type Name Description System.String host the host System.Int32 port the port. If zero, an unused port is chosen automatically. ServerCredentials credentials credentials to use to secure this port. Returns Type Description System.Int32 GetEnumerator() Gets enumerator for this collection. Declaration public IEnumerator<ServerPort> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < ServerPort > Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Grpc.Core.VersionInfo.html": {
    "href": "api/Grpc.Core.VersionInfo.html",
    "title": "Class VersionInfo | gRPC C#",
    "keywords": "Class VersionInfo Provides info about current version of gRPC. See https://codingforsmarties.wordpress.com/2016/01/21/how-to-version-assemblies-destined-for-nuget/ for rationale about assembly versioning. Inheritance System.Object VersionInfo Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public static class VersionInfo Fields CurrentAssemblyFileVersion Current AssemblyFileVersion of gRPC C# assemblies Declaration public const string CurrentAssemblyFileVersion = \"2.46.2.0\" Field Value Type Description System.String CurrentAssemblyVersion Current AssemblyVersion attribute of gRPC C# assemblies Declaration public const string CurrentAssemblyVersion = \"2.0.0.0\" Field Value Type Description System.String CurrentVersion Current version of gRPC C# Declaration public const string CurrentVersion = \"2.46.2\" Field Value Type Description System.String"
  },
  "api/Grpc.Core.DefaultCallInvoker.html": {
    "href": "api/Grpc.Core.DefaultCallInvoker.html",
    "title": "Class DefaultCallInvoker | gRPC C#",
    "keywords": "Class DefaultCallInvoker Invokes client RPCs using Calls . Inheritance System.Object CallInvoker DefaultCallInvoker Inherited Members CallInvoker.BlockingUnaryCall<TRequest, TResponse>(Method<TRequest, TResponse>, Nullable<String>, CallOptions, TRequest) CallInvoker.AsyncUnaryCall<TRequest, TResponse>(Method<TRequest, TResponse>, Nullable<String>, CallOptions, TRequest) CallInvoker.AsyncServerStreamingCall<TRequest, TResponse>(Method<TRequest, TResponse>, Nullable<String>, CallOptions, TRequest) CallInvoker.AsyncClientStreamingCall<TRequest, TResponse>(Method<TRequest, TResponse>, Nullable<String>, CallOptions) CallInvoker.AsyncDuplexStreamingCall<TRequest, TResponse>(Method<TRequest, TResponse>, Nullable<String>, CallOptions) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.dll Syntax public class DefaultCallInvoker : CallInvoker Constructors DefaultCallInvoker(Channel) Initializes a new instance of the DefaultCallInvoker class. Declaration public DefaultCallInvoker(Channel channel) Parameters Type Name Description Channel channel Channel to use. Methods AsyncClientStreamingCall<TRequest, TResponse>(Method<TRequest, TResponse>, String, CallOptions) Invokes a client streaming call asynchronously. In client streaming scenario, client sends a stream of requests and server responds with a single response. Declaration public override AsyncClientStreamingCall<TRequest, TResponse> AsyncClientStreamingCall<TRequest, TResponse>(Method<TRequest, TResponse> method, string host, CallOptions options) Parameters Type Name Description Method <TRequest, TResponse> method System.String host CallOptions options Returns Type Description AsyncClientStreamingCall <TRequest, TResponse> Type Parameters Name Description TRequest TResponse AsyncDuplexStreamingCall<TRequest, TResponse>(Method<TRequest, TResponse>, String, CallOptions) Invokes a duplex streaming call asynchronously. In duplex streaming scenario, client sends a stream of requests and server responds with a stream of responses. The response stream is completely independent and both side can be sending messages at the same time. Declaration public override AsyncDuplexStreamingCall<TRequest, TResponse> AsyncDuplexStreamingCall<TRequest, TResponse>(Method<TRequest, TResponse> method, string host, CallOptions options) Parameters Type Name Description Method <TRequest, TResponse> method System.String host CallOptions options Returns Type Description AsyncDuplexStreamingCall <TRequest, TResponse> Type Parameters Name Description TRequest TResponse AsyncServerStreamingCall<TRequest, TResponse>(Method<TRequest, TResponse>, String, CallOptions, TRequest) Invokes a server streaming call asynchronously. In server streaming scenario, client sends on request and server responds with a stream of responses. Declaration public override AsyncServerStreamingCall<TResponse> AsyncServerStreamingCall<TRequest, TResponse>(Method<TRequest, TResponse> method, string host, CallOptions options, TRequest request) Parameters Type Name Description Method <TRequest, TResponse> method System.String host CallOptions options TRequest request Returns Type Description AsyncServerStreamingCall <TResponse> Type Parameters Name Description TRequest TResponse AsyncUnaryCall<TRequest, TResponse>(Method<TRequest, TResponse>, String, CallOptions, TRequest) Invokes a simple remote call asynchronously. Declaration public override AsyncUnaryCall<TResponse> AsyncUnaryCall<TRequest, TResponse>(Method<TRequest, TResponse> method, string host, CallOptions options, TRequest request) Parameters Type Name Description Method <TRequest, TResponse> method System.String host CallOptions options TRequest request Returns Type Description AsyncUnaryCall <TResponse> Type Parameters Name Description TRequest TResponse BlockingUnaryCall<TRequest, TResponse>(Method<TRequest, TResponse>, String, CallOptions, TRequest) Invokes a simple remote call in a blocking fashion. Declaration public override TResponse BlockingUnaryCall<TRequest, TResponse>(Method<TRequest, TResponse> method, string host, CallOptions options, TRequest request) Parameters Type Name Description Method <TRequest, TResponse> method System.String host CallOptions options TRequest request Returns Type Description TResponse Type Parameters Name Description TRequest TResponse CreateCall<TRequest, TResponse>(Method<TRequest, TResponse>, String, CallOptions) Creates call invocation details for given method. Declaration protected virtual CallInvocationDetails<TRequest, TResponse> CreateCall<TRequest, TResponse>(Method<TRequest, TResponse> method, string host, CallOptions options) where TRequest : class where TResponse : class Parameters Type Name Description Method <TRequest, TResponse> method System.String host CallOptions options Returns Type Description CallInvocationDetails <TRequest, TResponse> Type Parameters Name Description TRequest TResponse"
  },
  "api/Grpc.Core.ClientStreamingServerMethod-2.html": {
    "href": "api/Grpc.Core.ClientStreamingServerMethod-2.html",
    "title": "Delegate ClientStreamingServerMethod<TRequest, TResponse> | gRPC C#",
    "keywords": "Delegate ClientStreamingServerMethod<TRequest, TResponse> Server-side handler for client streaming call. Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public delegate Task<TResponse> ClientStreamingServerMethod<TRequest, TResponse>(IAsyncStreamReader<TRequest> requestStream, ServerCallContext context) where TRequest : class where TResponse : class; Parameters Type Name Description IAsyncStreamReader <TRequest> requestStream ServerCallContext context Returns Type Description System.Threading.Tasks.Task <TResponse> Type Parameters Name Description TRequest Request message type for this method. TResponse Response message type for this method."
  },
  "api/Grpc.Core.SslClientCertificateRequestType.html": {
    "href": "api/Grpc.Core.SslClientCertificateRequestType.html",
    "title": "Enum SslClientCertificateRequestType | gRPC C#",
    "keywords": "Enum SslClientCertificateRequestType Modes of requesting client's SSL certificate by the server. Corresponds to grpc_ssl_client_certificate_request_type . Namespace : Grpc.Core Assembly : Grpc.Core.dll Syntax public enum SslClientCertificateRequestType Fields Name Description DontRequest Server does not request client certificate. The certificate presented by the client is not checked by the server at all. (A client may present a self signed or signed certificate or not present a certificate at all and any of those option would be accepted) RequestAndRequireAndVerify Server requests client certificate and enforces that the client presents a certificate. The certificate presented by the client is verified by the gRPC framework. (For a successful connection the client needs to present a certificate that can be verified against the root certificate configured by the server) The client's key certificate pair must be valid for the SSL connection to be established. RequestAndRequireButDontVerify Server requests client certificate and enforces that the client presents a certificate. If the client presents a certificate, the client authentication is left to the application (the necessary metadata will be available to the application via authentication context properties, see grpc_auth_context). The client's key certificate pair must be valid for the SSL connection to be established. RequestAndVerify Server requests client certificate but does not enforce that the client presents a certificate. If the client presents a certificate, the client authentication is done by the gRPC framework. (For a successful connection the client needs to either present a certificate that can be verified against the root certificate configured by the server or not present a certificate at all) The client's key certificate pair must be valid for the SSL connection to be established. RequestButDontVerify Server requests client certificate but does not enforce that the client presents a certificate. If the client presents a certificate, the client authentication is left to the application (the necessary metadata will be available to the application via authentication context properties, see grpc_auth_context). The client's key certificate pair must be valid for the SSL connection to be established."
  },
  "api/Grpc.Core.ServiceBinderBase.html": {
    "href": "api/Grpc.Core.ServiceBinderBase.html",
    "title": "Class ServiceBinderBase | gRPC C#",
    "keywords": "Class ServiceBinderBase Allows binding server-side method implementations in alternative serving stacks. Instances of this class are usually populated by the BindService method that is part of the autogenerated code for a protocol buffers service definition. Inheritance System.Object ServiceBinderBase Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public class ServiceBinderBase Methods AddMethod<TRequest, TResponse>(Method<TRequest, TResponse>, ClientStreamingServerMethod<TRequest, TResponse>) Adds a definition for a client streaming method. Declaration public virtual void AddMethod<TRequest, TResponse>(Method<TRequest, TResponse> method, ClientStreamingServerMethod<TRequest, TResponse> handler) where TRequest : class where TResponse : class Parameters Type Name Description Method <TRequest, TResponse> method The method. ClientStreamingServerMethod <TRequest, TResponse> handler The method handler. Type Parameters Name Description TRequest The request message class. TResponse The response message class. AddMethod<TRequest, TResponse>(Method<TRequest, TResponse>, DuplexStreamingServerMethod<TRequest, TResponse>) Adds a definition for a bidirectional streaming method. Declaration public virtual void AddMethod<TRequest, TResponse>(Method<TRequest, TResponse> method, DuplexStreamingServerMethod<TRequest, TResponse> handler) where TRequest : class where TResponse : class Parameters Type Name Description Method <TRequest, TResponse> method The method. DuplexStreamingServerMethod <TRequest, TResponse> handler The method handler. Type Parameters Name Description TRequest The request message class. TResponse The response message class. AddMethod<TRequest, TResponse>(Method<TRequest, TResponse>, ServerStreamingServerMethod<TRequest, TResponse>) Adds a definition for a server streaming method. Declaration public virtual void AddMethod<TRequest, TResponse>(Method<TRequest, TResponse> method, ServerStreamingServerMethod<TRequest, TResponse> handler) where TRequest : class where TResponse : class Parameters Type Name Description Method <TRequest, TResponse> method The method. ServerStreamingServerMethod <TRequest, TResponse> handler The method handler. Type Parameters Name Description TRequest The request message class. TResponse The response message class. AddMethod<TRequest, TResponse>(Method<TRequest, TResponse>, UnaryServerMethod<TRequest, TResponse>) Adds a definition for a single request - single response method. Declaration public virtual void AddMethod<TRequest, TResponse>(Method<TRequest, TResponse> method, UnaryServerMethod<TRequest, TResponse> handler) where TRequest : class where TResponse : class Parameters Type Name Description Method <TRequest, TResponse> method The method. UnaryServerMethod <TRequest, TResponse> handler The method handler. Type Parameters Name Description TRequest The request message class. TResponse The response message class."
  },
  "api/Grpc.Core.Logging.ConsoleLogger.html": {
    "href": "api/Grpc.Core.Logging.ConsoleLogger.html",
    "title": "Class ConsoleLogger | gRPC C#",
    "keywords": "Class ConsoleLogger Logger that logs to System.Console. Inheritance System.Object TextWriterLogger ConsoleLogger Implements ILogger Inherited Members TextWriterLogger.Debug(String) TextWriterLogger.Debug(String, Object[]) TextWriterLogger.Info(String) TextWriterLogger.Info(String, Object[]) TextWriterLogger.Warning(String) TextWriterLogger.Warning(String, Object[]) TextWriterLogger.Warning(Exception, String) TextWriterLogger.Error(String) TextWriterLogger.Error(String, Object[]) TextWriterLogger.Error(Exception, String) TextWriterLogger.AssociatedType System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core.Logging Assembly : Grpc.Core.dll Syntax public class ConsoleLogger : TextWriterLogger, ILogger Constructors ConsoleLogger() Creates a console logger not associated to any specific type. Declaration public ConsoleLogger() Methods ForType<T>() Returns a logger associated with the specified type. Declaration public override ILogger ForType<T>() Returns Type Description ILogger Type Parameters Name Description T Overrides TextWriterLogger.ForType<T>() Implements ILogger"
  },
  "api/Grpc.Core.Interceptors.Interceptor.AsyncUnaryCallContinuation-2.html": {
    "href": "api/Grpc.Core.Interceptors.Interceptor.AsyncUnaryCallContinuation-2.html",
    "title": "Delegate Interceptor.AsyncUnaryCallContinuation<TRequest, TResponse> | gRPC C#",
    "keywords": "Delegate Interceptor.AsyncUnaryCallContinuation<TRequest, TResponse> Represents a continuation for intercepting simple asynchronous invocations. A delegate of this type is passed to the AsyncUnaryCall method when an outgoing invocation is being intercepted and calling the delegate will invoke the next interceptor in the chain, or the underlying call invoker if called from the last interceptor. The interceptor is allowed to call it zero, one, or multiple times, passing it the appropriate request value and context as it sees fit. Namespace : Grpc.Core.Interceptors Assembly : Grpc.Core.Api.dll Syntax public delegate AsyncUnaryCall<TResponse> AsyncUnaryCallContinuation<TRequest, TResponse>(TRequest request, ClientInterceptorContext<TRequest, TResponse> context) where TRequest : class where TResponse : class; Parameters Type Name Description TRequest request The request value to continue the invocation with. ClientInterceptorContext <TRequest, TResponse> context The ClientInterceptorContext<TRequest, TResponse> instance to pass to the next step in the invocation process. Returns Type Description AsyncUnaryCall <TResponse> An instance of AsyncUnaryCall<TResponse> representing an asynchronous invocation of a unary RPC. The interceptor can choose to return the same object returned from the continuation delegate or an arbitrarily constructed instance as it sees fit. Type Parameters Name Description TRequest Request message type for this invocation. TResponse Response message type for this invocation."
  },
  "api/Grpc.Core.ChannelOptions.html": {
    "href": "api/Grpc.Core.ChannelOptions.html",
    "title": "Class ChannelOptions | gRPC C#",
    "keywords": "Class ChannelOptions Defines names of most commonly used channel options. Other supported options names can be found in grpc_types.h (GRPC_ARG_* definitions) Inheritance System.Object ChannelOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.dll Syntax public static class ChannelOptions Fields Census Enable census for tracing and stats collection Declaration public const string Census = \"grpc.census\" Field Value Type Description System.String DefaultAuthority Default authority for calls. Declaration public const string DefaultAuthority = \"grpc.default_authority\" Field Value Type Description System.String Http2InitialSequenceNumber Initial sequence number for http2 transports Declaration public const string Http2InitialSequenceNumber = \"grpc.http2.initial_sequence_number\" Field Value Type Description System.String MaxConcurrentStreams Maximum number of concurrent incoming streams to allow on a http2 connection Declaration public const string MaxConcurrentStreams = \"grpc.max_concurrent_streams\" Field Value Type Description System.String MaxMessageLength Obsolete, for backward compatibility only. Declaration [Obsolete(\"Use MaxReceiveMessageLength instead.\")] public const string MaxMessageLength = \"grpc.max_receive_message_length\" Field Value Type Description System.String MaxReceiveMessageLength Maximum message length that the channel can receive Declaration public const string MaxReceiveMessageLength = \"grpc.max_receive_message_length\" Field Value Type Description System.String MaxSendMessageLength Maximum message length that the channel can send Declaration public const string MaxSendMessageLength = \"grpc.max_send_message_length\" Field Value Type Description System.String PrimaryUserAgentString Primary user agent: goes at the start of the user-agent metadata Declaration public const string PrimaryUserAgentString = \"grpc.primary_user_agent\" Field Value Type Description System.String SecondaryUserAgentString Secondary user agent: goes at the end of the user-agent metadata Declaration public const string SecondaryUserAgentString = \"grpc.secondary_user_agent\" Field Value Type Description System.String SoReuseport If non-zero, allow the use of SO_REUSEPORT for server if it's available (default 1) Declaration public const string SoReuseport = \"grpc.so_reuseport\" Field Value Type Description System.String SslTargetNameOverride Override SSL target check. Only to be used for testing. Declaration public const string SslTargetNameOverride = \"grpc.ssl_target_name_override\" Field Value Type Description System.String"
  },
  "api/Grpc.Auth.GoogleGrpcCredentials.html": {
    "href": "api/Grpc.Auth.GoogleGrpcCredentials.html",
    "title": "Class GoogleGrpcCredentials | gRPC C#",
    "keywords": "Class GoogleGrpcCredentials Factory/extension methods to create instances of ChannelCredentials and CallCredentials classes based on credential objects originating from Google auth library. Inheritance System.Object GoogleGrpcCredentials Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Auth Assembly : Grpc.Auth.dll Syntax public static class GoogleGrpcCredentials Methods FromAccessToken(String) Creates an instance of CallCredentials that will use given access token to authenticate with a gRPC service. Declaration public static CallCredentials FromAccessToken(string accessToken) Parameters Type Name Description System.String accessToken OAuth2 access token. Returns Type Description CallCredentials The MetadataCredentials instance. GetApplicationDefaultAsync() Retrieves an instance of Google's Application Default Credentials using GoogleCredential.GetApplicationDefaultAsync() and converts them into a gRPC ChannelCredentials that use the default SSL credentials. Declaration public static Task<ChannelCredentials> GetApplicationDefaultAsync() Returns Type Description System.Threading.Tasks.Task < ChannelCredentials > The ChannelCredentials instance. ToCallCredentials(ITokenAccess) Converts a ITokenAccess (e.g. GoogleCredential ) object into a gRPC CallCredentials object. Declaration public static CallCredentials ToCallCredentials(this ITokenAccess credential) Parameters Type Name Description ITokenAccess credential The credential to use to obtain access tokens. Returns Type Description CallCredentials The CallCredentials instance. ToChannelCredentials(ITokenAccess) Converts a ITokenAccess (e.g. GoogleCredential ) object into a gRPC ChannelCredentials object. Default SSL credentials are used. Declaration public static ChannelCredentials ToChannelCredentials(this ITokenAccess googleCredential) Parameters Type Name Description ITokenAccess googleCredential The credential to use to obtain access tokens. Returns Type Description ChannelCredentials The ChannelCredentials instance."
  },
  "api/Grpc.Core.Interceptors.Interceptor.BlockingUnaryCallContinuation-2.html": {
    "href": "api/Grpc.Core.Interceptors.Interceptor.BlockingUnaryCallContinuation-2.html",
    "title": "Delegate Interceptor.BlockingUnaryCallContinuation<TRequest, TResponse> | gRPC C#",
    "keywords": "Delegate Interceptor.BlockingUnaryCallContinuation<TRequest, TResponse> Represents a continuation for intercepting simple blocking invocations. A delegate of this type is passed to the BlockingUnaryCall method when an outgoing invocation is being intercepted and calling the delegate will invoke the next interceptor in the chain, or the underlying call invoker if called from the last interceptor. The interceptor is allowed to call it zero, one, or multiple times, passing it the appropriate context and request values as it sees fit. Namespace : Grpc.Core.Interceptors Assembly : Grpc.Core.Api.dll Syntax public delegate TResponse BlockingUnaryCallContinuation<TRequest, TResponse>(TRequest request, ClientInterceptorContext<TRequest, TResponse> context) where TRequest : class where TResponse : class; Parameters Type Name Description TRequest request The request value to continue the invocation with. ClientInterceptorContext <TRequest, TResponse> context The ClientInterceptorContext<TRequest, TResponse> instance to pass to the next step in the invocation process. Returns Type Description TResponse The response value of the invocation to return to the caller. The interceptor can choose to return the return value of the continuation delegate or an arbitrary value as it sees fit. Type Parameters Name Description TRequest Request message type for this invocation. TResponse Response message type for this invocation."
  },
  "api/Grpc.Core.ClientBase-1.html": {
    "href": "api/Grpc.Core.ClientBase-1.html",
    "title": "Class ClientBase<T> | gRPC C#",
    "keywords": "Class ClientBase<T> Generic base class for client-side stubs. Inheritance System.Object ClientBase ClientBase<T> Health.HealthClient Inherited Members ClientBase.CallInvoker System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public abstract class ClientBase<T> : ClientBase where T : ClientBase<T> Type Parameters Name Description T Constructors ClientBase() Initializes a new instance of ClientBase class that throws NotImplementedException upon invocation of any RPC. This constructor is only provided to allow creation of test doubles for client classes (e.g. mocking requires a parameterless constructor). Declaration protected ClientBase() ClientBase(CallInvoker) Initializes a new instance of ClientBase class. Declaration public ClientBase(CallInvoker callInvoker) Parameters Type Name Description CallInvoker callInvoker The CallInvoker for remote call invocation. ClientBase(ChannelBase) Initializes a new instance of ClientBase class. Declaration public ClientBase(ChannelBase channel) Parameters Type Name Description ChannelBase channel The channel to use for remote call invocation. ClientBase(ClientBase.ClientBaseConfiguration) Initializes a new instance of ClientBase class. Declaration protected ClientBase(ClientBase.ClientBaseConfiguration configuration) Parameters Type Name Description ClientBase.ClientBaseConfiguration configuration The configuration. Methods NewInstance(ClientBase.ClientBaseConfiguration) Creates a new instance of client from given ClientBaseConfiguration . Declaration protected abstract T NewInstance(ClientBase.ClientBaseConfiguration configuration) Parameters Type Name Description ClientBase.ClientBaseConfiguration configuration Returns Type Description T WithHost(String) Creates a new client that sets host field for calls explicitly. gRPC supports multiple \"hosts\" being served by a single server. By default (if a client was not created by calling this method), host null with the meaning \"use default host\" is used. Declaration public T WithHost(string host) Parameters Type Name Description System.String host Returns Type Description T"
  },
  "api/Grpc.HealthCheck.HealthServiceImpl.html": {
    "href": "api/Grpc.HealthCheck.HealthServiceImpl.html",
    "title": "Class HealthServiceImpl | gRPC C#",
    "keywords": "Class HealthServiceImpl Implementation of a simple Health service. Useful for health checking. Registering service with a server: var serviceImpl = new HealthServiceImpl(); server = new Server(); server.AddServiceDefinition(Grpc.Health.V1.Health.BindService(serviceImpl)); Inheritance System.Object Health.HealthBase HealthServiceImpl Inherited Members Health.HealthBase.Watch(HealthCheckRequest, IServerStreamWriter<HealthCheckResponse>, ServerCallContext) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.HealthCheck Assembly : Grpc.HealthCheck.dll Syntax public class HealthServiceImpl : Health.HealthBase Methods Check(HealthCheckRequest, ServerCallContext) Performs a health status check. Declaration public override Task<HealthCheckResponse> Check(HealthCheckRequest request, ServerCallContext context) Parameters Type Name Description HealthCheckRequest request The check request. ServerCallContext context The call context. Returns Type Description System.Threading.Tasks.Task < HealthCheckResponse > The asynchronous response. Overrides Health.HealthBase.Check(HealthCheckRequest, ServerCallContext) ClearAll() Clears statuses for all services. Declaration public void ClearAll() ClearStatus(String) Clears health status for given service. Declaration public void ClearStatus(string service) Parameters Type Name Description System.String service The service. Cannot be null. SetStatus(String, HealthCheckResponse.Types.ServingStatus) Sets the health status for given service. Declaration public void SetStatus(string service, HealthCheckResponse.Types.ServingStatus status) Parameters Type Name Description System.String service The service. Cannot be null. HealthCheckResponse.Types.ServingStatus status the health status"
  },
  "api/Grpc.Health.V1.html": {
    "href": "api/Grpc.Health.V1.html",
    "title": "Namespace Grpc.Health.V1 | gRPC C#",
    "keywords": "Namespace Grpc.Health.V1 Classes Health Health.HealthBase Base class for server-side implementations of Health Health.HealthClient Client for Health HealthCheckRequest HealthCheckResponse HealthCheckResponse.Types Container for nested types declared in the HealthCheckResponse message type. HealthReflection Holder for reflection information generated from grpc/health/v1/health.proto Enums HealthCheckResponse.Types.ServingStatus"
  },
  "api/Grpc.Auth.html": {
    "href": "api/Grpc.Auth.html",
    "title": "Namespace Grpc.Auth | gRPC C#",
    "keywords": "Namespace Grpc.Auth Classes GoogleAuthInterceptors Factory methods to create authorization interceptors for Google credentials. GoogleGrpcCredentials GoogleGrpcCredentials Factory/extension methods to create instances of ChannelCredentials and CallCredentials classes based on credential objects originating from Google auth library."
  },
  "api/Grpc.Core.Interceptors.html": {
    "href": "api/Grpc.Core.Interceptors.html",
    "title": "Namespace Grpc.Core.Interceptors | gRPC C#",
    "keywords": "Namespace Grpc.Core.Interceptors Classes CallInvokerExtensions Extends the CallInvoker class to provide the interceptor facility on the client side. ChannelExtensions Provides extension methods to make it easy to register interceptors on Channel objects. Interceptor Serves as the base class for gRPC interceptors. ServerServiceDefinitionExtensions Extends the ServerServiceDefinition class to add methods used to register interceptors on the server side. Structs ClientInterceptorContext<TRequest, TResponse> Carries along the context associated with intercepted invocations on the client side. Delegates Interceptor.AsyncClientStreamingCallContinuation<TRequest, TResponse> Represents a continuation for intercepting asynchronous client-streaming invocations. A delegate of this type is passed to the AsyncClientStreamingCall method when an outgoing invocation is being intercepted and calling the delegate will invoke the next interceptor in the chain, or the underlying call invoker if called from the last interceptor. The interceptor is allowed to call it zero, one, or multiple times, passing it the appropriate request value and context as it sees fit. Interceptor.AsyncDuplexStreamingCallContinuation<TRequest, TResponse> Represents a continuation for intercepting asynchronous duplex invocations. A delegate of this type is passed to the AsyncDuplexStreamingCall method when an outgoing invocation is being intercepted and calling the delegate will invoke the next interceptor in the chain, or the underlying call invoker if called from the last interceptor. The interceptor is allowed to call it zero, one, or multiple times, passing it the appropriate request value and context as it sees fit. Interceptor.AsyncServerStreamingCallContinuation<TRequest, TResponse> Represents a continuation for intercepting asynchronous server-streaming invocations. A delegate of this type is passed to the AsyncServerStreamingCall method when an outgoing invocation is being intercepted and calling the delegate will invoke the next interceptor in the chain, or the underlying call invoker if called from the last interceptor. The interceptor is allowed to call it zero, one, or multiple times, passing it the appropriate request value and context as it sees fit. Interceptor.AsyncUnaryCallContinuation<TRequest, TResponse> Represents a continuation for intercepting simple asynchronous invocations. A delegate of this type is passed to the AsyncUnaryCall method when an outgoing invocation is being intercepted and calling the delegate will invoke the next interceptor in the chain, or the underlying call invoker if called from the last interceptor. The interceptor is allowed to call it zero, one, or multiple times, passing it the appropriate request value and context as it sees fit. Interceptor.BlockingUnaryCallContinuation<TRequest, TResponse> Represents a continuation for intercepting simple blocking invocations. A delegate of this type is passed to the BlockingUnaryCall method when an outgoing invocation is being intercepted and calling the delegate will invoke the next interceptor in the chain, or the underlying call invoker if called from the last interceptor. The interceptor is allowed to call it zero, one, or multiple times, passing it the appropriate context and request values as it sees fit."
  },
  "api/Grpc.Core.Logging.NullLogger.html": {
    "href": "api/Grpc.Core.Logging.NullLogger.html",
    "title": "Class NullLogger | gRPC C#",
    "keywords": "Class NullLogger Logger which doesn't log any information anywhere. Inheritance System.Object NullLogger Implements ILogger Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core.Logging Assembly : Grpc.Core.dll Syntax public sealed class NullLogger : ILogger Methods Debug(String) As with all logging calls on this logger, this method is a no-op. Declaration public void Debug(string message) Parameters Type Name Description System.String message Debug(String, Object[]) As with all logging calls on this logger, this method is a no-op. Declaration public void Debug(string format, params object[] formatArgs) Parameters Type Name Description System.String format System.Object [] formatArgs Error(Exception, String) As with all logging calls on this logger, this method is a no-op. Declaration public void Error(Exception exception, string message) Parameters Type Name Description System.Exception exception System.String message Error(String) As with all logging calls on this logger, this method is a no-op. Declaration public void Error(string message) Parameters Type Name Description System.String message Error(String, Object[]) As with all logging calls on this logger, this method is a no-op. Declaration public void Error(string format, params object[] formatArgs) Parameters Type Name Description System.String format System.Object [] formatArgs ForType<T>() Returns a reference to the instance on which the method is called, as instances aren't associated with specific types. Declaration public ILogger ForType<T>() Returns Type Description ILogger Type Parameters Name Description T Info(String) As with all logging calls on this logger, this method is a no-op. Declaration public void Info(string message) Parameters Type Name Description System.String message Info(String, Object[]) As with all logging calls on this logger, this method is a no-op. Declaration public void Info(string format, params object[] formatArgs) Parameters Type Name Description System.String format System.Object [] formatArgs Warning(Exception, String) As with all logging calls on this logger, this method is a no-op. Declaration public void Warning(Exception exception, string message) Parameters Type Name Description System.Exception exception System.String message Warning(String) As with all logging calls on this logger, this method is a no-op. Declaration public void Warning(string message) Parameters Type Name Description System.String message Warning(String, Object[]) As with all logging calls on this logger, this method is a no-op. Declaration public void Warning(string format, params object[] formatArgs) Parameters Type Name Description System.String format System.Object [] formatArgs Implements ILogger"
  },
  "api/Grpc.Core.SslServerCredentials.html": {
    "href": "api/Grpc.Core.SslServerCredentials.html",
    "title": "Class SslServerCredentials | gRPC C#",
    "keywords": "Class SslServerCredentials Server-side SSL credentials. Inheritance System.Object ServerCredentials SslServerCredentials Inherited Members ServerCredentials.Insecure System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.dll Syntax public class SslServerCredentials : ServerCredentials Constructors SslServerCredentials(IEnumerable<KeyCertificatePair>) Creates server-side SSL credentials. This constructor should be used if you do not wish to authenticate the client. (client certificate won't be requested and checked by the server at all). Declaration public SslServerCredentials(IEnumerable<KeyCertificatePair> keyCertificatePairs) Parameters Type Name Description System.Collections.Generic.IEnumerable < KeyCertificatePair > keyCertificatePairs Key-certificates to use. SslServerCredentials(IEnumerable<KeyCertificatePair>, String, SslClientCertificateRequestType) Creates server-side SSL credentials. Declaration public SslServerCredentials(IEnumerable<KeyCertificatePair> keyCertificatePairs, string rootCertificates, SslClientCertificateRequestType clientCertificateRequest) Parameters Type Name Description System.Collections.Generic.IEnumerable < KeyCertificatePair > keyCertificatePairs Key-certificates to use. System.String rootCertificates PEM encoded client root certificates used to authenticate client. SslClientCertificateRequestType clientCertificateRequest Options for requesting and verifying client certificate. SslServerCredentials(IEnumerable<KeyCertificatePair>, String, Boolean) Creates server-side SSL credentials. Declaration public SslServerCredentials(IEnumerable<KeyCertificatePair> keyCertificatePairs, string rootCertificates, bool forceClientAuth) Parameters Type Name Description System.Collections.Generic.IEnumerable < KeyCertificatePair > keyCertificatePairs Key-certificates to use. System.String rootCertificates PEM encoded client root certificates used to authenticate client. System.Boolean forceClientAuth Deprecated, use clientCertificateRequest overload instead. Properties ClientCertificateRequest Mode of requesting certificate from client by the server. Declaration public SslClientCertificateRequestType ClientCertificateRequest { get; } Property Value Type Description SslClientCertificateRequestType ForceClientAuthentication Deprecated. If true, the authenticity of client check will be enforced. Declaration public bool ForceClientAuthentication { get; } Property Value Type Description System.Boolean KeyCertificatePairs Key-certificate pairs. Declaration public IList<KeyCertificatePair> KeyCertificatePairs { get; } Property Value Type Description System.Collections.Generic.IList < KeyCertificatePair > RootCertificates PEM encoded client root certificates. Declaration public string RootCertificates { get; } Property Value Type Description System.String"
  },
  "api/Grpc.Core.ServerStreamingServerMethod-2.html": {
    "href": "api/Grpc.Core.ServerStreamingServerMethod-2.html",
    "title": "Delegate ServerStreamingServerMethod<TRequest, TResponse> | gRPC C#",
    "keywords": "Delegate ServerStreamingServerMethod<TRequest, TResponse> Server-side handler for server streaming call. Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public delegate Task ServerStreamingServerMethod<TRequest, TResponse>(TRequest request, IServerStreamWriter<TResponse> responseStream, ServerCallContext context) where TRequest : class where TResponse : class; Parameters Type Name Description TRequest request IServerStreamWriter <TResponse> responseStream ServerCallContext context Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TRequest Request message type for this method. TResponse Response message type for this method."
  },
  "api/Grpc.Core.ChannelOption.html": {
    "href": "api/Grpc.Core.ChannelOption.html",
    "title": "Class ChannelOption | gRPC C#",
    "keywords": "Class ChannelOption Channel option specified when creating a channel. Corresponds to grpc_channel_args from grpc/grpc.h. Commonly used channel option names are defined in ChannelOptions , but any of the GRPC_ARG_* channel options names defined in grpc_types.h can be used. Inheritance System.Object ChannelOption Implements System.IEquatable < ChannelOption > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.dll Syntax public sealed class ChannelOption : IEquatable<ChannelOption> Constructors ChannelOption(String, Int32) Creates a channel option with an integer value. Declaration public ChannelOption(string name, int intValue) Parameters Type Name Description System.String name Name. System.Int32 intValue Integer value. ChannelOption(String, String) Creates a channel option with a string value. Declaration public ChannelOption(string name, string stringValue) Parameters Type Name Description System.String name Name. System.String stringValue String value. Properties IntValue Gets the integer value the ChannelOption . Declaration public int IntValue { get; } Property Value Type Description System.Int32 Name Gets the name of the ChannelOption . Declaration public string Name { get; } Property Value Type Description System.String StringValue Gets the string value the ChannelOption . Declaration public string StringValue { get; } Property Value Type Description System.String Type Gets the type of the ChannelOption . Declaration public ChannelOption.OptionType Type { get; } Property Value Type Description ChannelOption.OptionType Methods Equals(ChannelOption) Determines whether the specified object is equal to the current object. Declaration public bool Equals(ChannelOption other) Parameters Type Name Description ChannelOption other Returns Type Description System.Boolean Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) GetHashCode() A hash code for the current object. Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() Operators Equality(ChannelOption, ChannelOption) Equality operator. Declaration public static bool operator ==(ChannelOption option1, ChannelOption option2) Parameters Type Name Description ChannelOption option1 ChannelOption option2 Returns Type Description System.Boolean Inequality(ChannelOption, ChannelOption) Inequality operator. Declaration public static bool operator !=(ChannelOption option1, ChannelOption option2) Parameters Type Name Description ChannelOption option1 ChannelOption option2 Returns Type Description System.Boolean Implements System.IEquatable<T>"
  },
  "api/Grpc.Core.Channel.html": {
    "href": "api/Grpc.Core.Channel.html",
    "title": "Class Channel | gRPC C#",
    "keywords": "Class Channel Represents a gRPC channel. Channels are an abstraction of long-lived connections to remote servers. More client objects can reuse the same channel. Creating a channel is an expensive operation compared to invoking a remote call so in general you should reuse a single channel for as many calls as possible. Inheritance System.Object ChannelBase Channel Inherited Members ChannelBase.Target ChannelBase.ShutdownAsync() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.dll Syntax public class Channel : ChannelBase Constructors Channel(String, ChannelCredentials) Creates a channel that connects to a specific host. Port will default to 80 for an unsecure channel and to 443 for a secure channel. Declaration public Channel(string target, ChannelCredentials credentials) Parameters Type Name Description System.String target Target of the channel. ChannelCredentials credentials Credentials to secure the channel. Channel(String, ChannelCredentials, IEnumerable<ChannelOption>) Creates a channel that connects to a specific host. Port will default to 80 for an unsecure channel or to 443 for a secure channel. Declaration public Channel(string target, ChannelCredentials credentials, IEnumerable<ChannelOption> options) Parameters Type Name Description System.String target Target of the channel. ChannelCredentials credentials Credentials to secure the channel. System.Collections.Generic.IEnumerable < ChannelOption > options Channel options. Channel(String, Int32, ChannelCredentials) Creates a channel that connects to a specific host and port. Declaration public Channel(string host, int port, ChannelCredentials credentials) Parameters Type Name Description System.String host The name or IP address of the host. System.Int32 port The port. ChannelCredentials credentials Credentials to secure the channel. Channel(String, Int32, ChannelCredentials, IEnumerable<ChannelOption>) Creates a channel that connects to a specific host and port. Declaration public Channel(string host, int port, ChannelCredentials credentials, IEnumerable<ChannelOption> options) Parameters Type Name Description System.String host The name or IP address of the host. System.Int32 port The port. ChannelCredentials credentials Credentials to secure the channel. System.Collections.Generic.IEnumerable < ChannelOption > options Channel options. Properties ResolvedTarget Resolved address of the remote endpoint in URI format. Declaration public string ResolvedTarget { get; } Property Value Type Description System.String ShutdownToken Returns a token that gets cancelled once ShutdownAsync is invoked. Declaration public CancellationToken ShutdownToken { get; } Property Value Type Description System.Threading.CancellationToken State Gets current connectivity state of this channel. After channel has been shutdown, ChannelState.Shutdown will be returned. Declaration public ChannelState State { get; } Property Value Type Description ChannelState Methods ConnectAsync(Nullable<DateTime>) Allows explicitly requesting channel to connect without starting an RPC. Returned task completes once state Ready was seen. If the deadline is reached, or channel enters the Shutdown state, the task is cancelled. There is no need to call this explicitly unless your use case requires that. Starting an RPC on a new channel will request connection implicitly. Declaration public Task ConnectAsync(DateTime? deadline = default(DateTime? )) Parameters Type Name Description System.Nullable < System.DateTime > deadline The deadline. null indicates no deadline. Returns Type Description System.Threading.Tasks.Task CreateCallInvoker() Create a new CallInvoker for the channel. Declaration public override CallInvoker CreateCallInvoker() Returns Type Description CallInvoker A new CallInvoker . Overrides ChannelBase.CreateCallInvoker() ShutdownAsyncCore() Provides implementation of a non-virtual public member. Declaration protected override Task ShutdownAsyncCore() Returns Type Description System.Threading.Tasks.Task Overrides ChannelBase.ShutdownAsyncCore() TryWaitForStateChangedAsync(ChannelState, Nullable<DateTime>) Returned tasks completes once channel state has become different from given lastObservedState ( true is returned) or if the wait has timed out ( false is returned). Declaration public Task<bool> TryWaitForStateChangedAsync(ChannelState lastObservedState, DateTime? deadline = default(DateTime? )) Parameters Type Name Description ChannelState lastObservedState System.Nullable < System.DateTime > deadline Returns Type Description System.Threading.Tasks.Task < System.Boolean > WaitForStateChangedAsync(ChannelState, Nullable<DateTime>) Returned tasks completes once channel state has become different from given lastObservedState. If deadline is reached or an error occurs, returned task is cancelled. Declaration public Task WaitForStateChangedAsync(ChannelState lastObservedState, DateTime? deadline = default(DateTime? )) Parameters Type Name Description ChannelState lastObservedState System.Nullable < System.DateTime > deadline Returns Type Description System.Threading.Tasks.Task"
  },
  "api/Grpc.Core.AuthInterceptorContext.html": {
    "href": "api/Grpc.Core.AuthInterceptorContext.html",
    "title": "Class AuthInterceptorContext | gRPC C#",
    "keywords": "Class AuthInterceptorContext Context for an RPC being intercepted by AsyncAuthInterceptor . Inheritance System.Object AuthInterceptorContext Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public class AuthInterceptorContext Constructors AuthInterceptorContext(String, String) Initializes a new instance of AuthInterceptorContext . Declaration public AuthInterceptorContext(string serviceUrl, string methodName) Parameters Type Name Description System.String serviceUrl System.String methodName Properties MethodName The method name of the RPC being called. Declaration public string MethodName { get; } Property Value Type Description System.String ServiceUrl The fully qualified service URL for the RPC being called. Declaration public string ServiceUrl { get; } Property Value Type Description System.String"
  },
  "api/Grpc.Core.VerifyPeerCallback.html": {
    "href": "api/Grpc.Core.VerifyPeerCallback.html",
    "title": "Delegate VerifyPeerCallback | gRPC C#",
    "keywords": "Delegate VerifyPeerCallback Callback invoked with the expected targetHost and the peer's certificate. If false is returned by this callback then it is treated as a verification failure and the attempted connection will fail. Invocation of the callback is blocking, so any implementation should be light-weight. Note that the callback can potentially be invoked multiple times, concurrently from different threads (e.g. when multiple connections are being created for the same credentials). Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public delegate bool VerifyPeerCallback(VerifyPeerContext context); Parameters Type Name Description VerifyPeerContext context The VerifyPeerContext associated with the callback Returns Type Description System.Boolean true if verification succeeded, false otherwise."
  },
  "api/Grpc.Core.ChannelCredentials.html": {
    "href": "api/Grpc.Core.ChannelCredentials.html",
    "title": "Class ChannelCredentials | gRPC C#",
    "keywords": "Class ChannelCredentials Client-side channel credentials. Used for creation of a secure channel. Inheritance System.Object ChannelCredentials SslCredentials Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public abstract class ChannelCredentials Constructors ChannelCredentials() Creates a new instance of channel credentials Declaration public ChannelCredentials() Properties Insecure Returns instance of credentials that provides no security and will result in creating an unsecure channel with no encryption whatsoever. Declaration public static ChannelCredentials Insecure { get; } Property Value Type Description ChannelCredentials SecureSsl Returns instance of credentials that provides SSL security. These credentials are the same as creating SslCredentials without parameters. Apps that are using Grpc.Core can create SslCredentials directly to customize the secure SSL credentials. Declaration public static ChannelCredentials SecureSsl { get; } Property Value Type Description ChannelCredentials Methods Create(ChannelCredentials, CallCredentials) Creates a new instance of ChannelCredentials class by composing given channel credentials with call credentials. Declaration public static ChannelCredentials Create(ChannelCredentials channelCredentials, CallCredentials callCredentials) Parameters Type Name Description ChannelCredentials channelCredentials Channel credentials. CallCredentials callCredentials Call credentials. Returns Type Description ChannelCredentials The new composite ChannelCredentials InternalPopulateConfiguration(ChannelCredentialsConfiguratorBase, Object) Populates channel credentials configurator with this instance's configuration. End users never need to invoke this method as it is part of internal implementation. Declaration public abstract void InternalPopulateConfiguration(ChannelCredentialsConfiguratorBase configurator, object state) Parameters Type Name Description ChannelCredentialsConfiguratorBase configurator System.Object state"
  },
  "api/Grpc.Core.AuthProperty.html": {
    "href": "api/Grpc.Core.AuthProperty.html",
    "title": "Class AuthProperty | gRPC C#",
    "keywords": "Class AuthProperty A property of an AuthContext . Note: experimental API that can change or be removed without any prior notice. Inheritance System.Object AuthProperty Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public class AuthProperty Properties Name Gets the name of the property. Declaration public string Name { get; } Property Value Type Description System.String Value Gets the string value of the property. Declaration public string Value { get; } Property Value Type Description System.String ValueBytes Gets the binary value of the property. Declaration public byte[] ValueBytes { get; } Property Value Type Description System.Byte [] Methods Create(String, Byte[]) Creates an instance of AuthProperty . Declaration public static AuthProperty Create(string name, byte[] valueBytes) Parameters Type Name Description System.String name the name System.Byte [] valueBytes the binary value of the property Returns Type Description AuthProperty"
  },
  "api/Grpc.Health.V1.Health.HealthClient.html": {
    "href": "api/Grpc.Health.V1.Health.HealthClient.html",
    "title": "Class Health.HealthClient | gRPC C#",
    "keywords": "Class Health.HealthClient Client for Health Inheritance System.Object ClientBase ClientBase < Health.HealthClient > Health.HealthClient Inherited Members ClientBase<Health.HealthClient>.WithHost(String) ClientBase.CallInvoker System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Health.V1 Assembly : Grpc.HealthCheck.dll Syntax public class HealthClient : ClientBase<Health.HealthClient> Constructors HealthClient() Protected parameterless constructor to allow creation of test doubles. Declaration protected HealthClient() HealthClient(CallInvoker) Creates a new client for Health that uses a custom CallInvoker . Declaration public HealthClient(CallInvoker callInvoker) Parameters Type Name Description CallInvoker callInvoker The callInvoker to use to make remote calls. HealthClient(ChannelBase) Creates a new client for Health Declaration public HealthClient(ChannelBase channel) Parameters Type Name Description ChannelBase channel The channel to use to make remote calls. HealthClient(ClientBase.ClientBaseConfiguration) Protected constructor to allow creation of configured clients. Declaration protected HealthClient(ClientBase.ClientBaseConfiguration configuration) Parameters Type Name Description ClientBase.ClientBaseConfiguration configuration The client configuration. Methods Check(HealthCheckRequest, CallOptions) If the requested service is unknown, the call will fail with status NOT_FOUND. Declaration public virtual HealthCheckResponse Check(HealthCheckRequest request, CallOptions options) Parameters Type Name Description HealthCheckRequest request The request to send to the server. CallOptions options The options for the call. Returns Type Description HealthCheckResponse The response received from the server. Check(HealthCheckRequest, Metadata, Nullable<DateTime>, CancellationToken) If the requested service is unknown, the call will fail with status NOT_FOUND. Declaration public virtual HealthCheckResponse Check(HealthCheckRequest request, Metadata headers = null, DateTime? deadline = default(DateTime? ), CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description HealthCheckRequest request The request to send to the server. Metadata headers The initial metadata to send with the call. This parameter is optional. System.Nullable < System.DateTime > deadline An optional deadline for the call. The call will be cancelled if deadline is hit. System.Threading.CancellationToken cancellationToken An optional token for canceling the call. Returns Type Description HealthCheckResponse The response received from the server. CheckAsync(HealthCheckRequest, CallOptions) If the requested service is unknown, the call will fail with status NOT_FOUND. Declaration public virtual AsyncUnaryCall<HealthCheckResponse> CheckAsync(HealthCheckRequest request, CallOptions options) Parameters Type Name Description HealthCheckRequest request The request to send to the server. CallOptions options The options for the call. Returns Type Description AsyncUnaryCall < HealthCheckResponse > The call object. CheckAsync(HealthCheckRequest, Metadata, Nullable<DateTime>, CancellationToken) If the requested service is unknown, the call will fail with status NOT_FOUND. Declaration public virtual AsyncUnaryCall<HealthCheckResponse> CheckAsync(HealthCheckRequest request, Metadata headers = null, DateTime? deadline = default(DateTime? ), CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description HealthCheckRequest request The request to send to the server. Metadata headers The initial metadata to send with the call. This parameter is optional. System.Nullable < System.DateTime > deadline An optional deadline for the call. The call will be cancelled if deadline is hit. System.Threading.CancellationToken cancellationToken An optional token for canceling the call. Returns Type Description AsyncUnaryCall < HealthCheckResponse > The call object. NewInstance(ClientBase.ClientBaseConfiguration) Creates a new instance of client from given ClientBaseConfiguration . Declaration protected override Health.HealthClient NewInstance(ClientBase.ClientBaseConfiguration configuration) Parameters Type Name Description ClientBase.ClientBaseConfiguration configuration Returns Type Description Health.HealthClient Overrides Grpc.Core.ClientBase<Grpc.Health.V1.Health.HealthClient>.NewInstance(Grpc.Core.ClientBase.ClientBaseConfiguration) Watch(HealthCheckRequest, CallOptions) Performs a watch for the serving status of the requested service. The server will immediately send back a message indicating the current serving status. It will then subsequently send a new message whenever the service's serving status changes. If the requested service is unknown when the call is received, the server will send a message setting the serving status to SERVICE_UNKNOWN but will not terminate the call. If at some future point, the serving status of the service becomes known, the server will send a new message with the service's serving status. If the call terminates with status UNIMPLEMENTED, then clients should assume this method is not supported and should not retry the call. If the call terminates with any other status (including OK), clients should retry the call with appropriate exponential backoff. Declaration public virtual AsyncServerStreamingCall<HealthCheckResponse> Watch(HealthCheckRequest request, CallOptions options) Parameters Type Name Description HealthCheckRequest request The request to send to the server. CallOptions options The options for the call. Returns Type Description AsyncServerStreamingCall < HealthCheckResponse > The call object. Watch(HealthCheckRequest, Metadata, Nullable<DateTime>, CancellationToken) Performs a watch for the serving status of the requested service. The server will immediately send back a message indicating the current serving status. It will then subsequently send a new message whenever the service's serving status changes. If the requested service is unknown when the call is received, the server will send a message setting the serving status to SERVICE_UNKNOWN but will not terminate the call. If at some future point, the serving status of the service becomes known, the server will send a new message with the service's serving status. If the call terminates with status UNIMPLEMENTED, then clients should assume this method is not supported and should not retry the call. If the call terminates with any other status (including OK), clients should retry the call with appropriate exponential backoff. Declaration public virtual AsyncServerStreamingCall<HealthCheckResponse> Watch(HealthCheckRequest request, Metadata headers = null, DateTime? deadline = default(DateTime? ), CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description HealthCheckRequest request The request to send to the server. Metadata headers The initial metadata to send with the call. This parameter is optional. System.Nullable < System.DateTime > deadline An optional deadline for the call. The call will be cancelled if deadline is hit. System.Threading.CancellationToken cancellationToken An optional token for canceling the call. Returns Type Description AsyncServerStreamingCall < HealthCheckResponse > The call object."
  },
  "api/Grpc.Health.V1.Health.HealthBase.html": {
    "href": "api/Grpc.Health.V1.Health.HealthBase.html",
    "title": "Class Health.HealthBase | gRPC C#",
    "keywords": "Class Health.HealthBase Base class for server-side implementations of Health Inheritance System.Object Health.HealthBase HealthServiceImpl Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Health.V1 Assembly : Grpc.HealthCheck.dll Syntax [BindServiceMethod(typeof(Health), \"BindService\")] public abstract class HealthBase Methods Check(HealthCheckRequest, ServerCallContext) If the requested service is unknown, the call will fail with status NOT_FOUND. Declaration public virtual Task<HealthCheckResponse> Check(HealthCheckRequest request, ServerCallContext context) Parameters Type Name Description HealthCheckRequest request The request received from the client. ServerCallContext context The context of the server-side call handler being invoked. Returns Type Description System.Threading.Tasks.Task < HealthCheckResponse > The response to send back to the client (wrapped by a task). Watch(HealthCheckRequest, IServerStreamWriter<HealthCheckResponse>, ServerCallContext) Performs a watch for the serving status of the requested service. The server will immediately send back a message indicating the current serving status. It will then subsequently send a new message whenever the service's serving status changes. If the requested service is unknown when the call is received, the server will send a message setting the serving status to SERVICE_UNKNOWN but will not terminate the call. If at some future point, the serving status of the service becomes known, the server will send a new message with the service's serving status. If the call terminates with status UNIMPLEMENTED, then clients should assume this method is not supported and should not retry the call. If the call terminates with any other status (including OK), clients should retry the call with appropriate exponential backoff. Declaration public virtual Task Watch(HealthCheckRequest request, IServerStreamWriter<HealthCheckResponse> responseStream, ServerCallContext context) Parameters Type Name Description HealthCheckRequest request The request received from the client. IServerStreamWriter < HealthCheckResponse > responseStream Used for sending responses back to the client. ServerCallContext context The context of the server-side call handler being invoked. Returns Type Description System.Threading.Tasks.Task A task indicating completion of the handler."
  },
  "api/Grpc.Core.Testing.TestServerCallContext.html": {
    "href": "api/Grpc.Core.Testing.TestServerCallContext.html",
    "title": "Class TestServerCallContext | gRPC C#",
    "keywords": "Class TestServerCallContext Creates test doubles for ServerCallContext . Inheritance System.Object TestServerCallContext Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core.Testing Assembly : Grpc.Core.Testing.dll Syntax public static class TestServerCallContext Methods Create(String, String, DateTime, Metadata, CancellationToken, String, AuthContext, ContextPropagationToken, Func<Metadata, Task>, Func<WriteOptions>, Action<WriteOptions>) Creates a test double for ServerCallContext . Only for testing. Note: experimental API that can change or be removed without any prior notice. Declaration public static ServerCallContext Create(string method, string host, DateTime deadline, Metadata requestHeaders, CancellationToken cancellationToken, string peer, AuthContext authContext, ContextPropagationToken contextPropagationToken, Func<Metadata, Task> writeHeadersFunc, Func<WriteOptions> writeOptionsGetter, Action<WriteOptions> writeOptionsSetter) Parameters Type Name Description System.String method System.String host System.DateTime deadline Metadata requestHeaders System.Threading.CancellationToken cancellationToken System.String peer AuthContext authContext ContextPropagationToken contextPropagationToken System.Func < Metadata , System.Threading.Tasks.Task > writeHeadersFunc System.Func < WriteOptions > writeOptionsGetter System.Action < WriteOptions > writeOptionsSetter Returns Type Description ServerCallContext"
  },
  "api/Grpc.Core.Interceptors.CallInvokerExtensions.html": {
    "href": "api/Grpc.Core.Interceptors.CallInvokerExtensions.html",
    "title": "Class CallInvokerExtensions | gRPC C#",
    "keywords": "Class CallInvokerExtensions Extends the CallInvoker class to provide the interceptor facility on the client side. Inheritance System.Object CallInvokerExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core.Interceptors Assembly : Grpc.Core.Api.dll Syntax public static class CallInvokerExtensions Methods Intercept(CallInvoker, Interceptor) Returns a CallInvoker instance that intercepts the invoker with the given interceptor. Declaration public static CallInvoker Intercept(this CallInvoker invoker, Interceptor interceptor) Parameters Type Name Description CallInvoker invoker The underlying invoker to intercept. Interceptor interceptor The interceptor to intercept calls to the invoker with. Returns Type Description CallInvoker Remarks Multiple interceptors can be added on top of each other by calling \"invoker.Intercept(a, b, c)\". The order of invocation will be \"a\", \"b\", and then \"c\". Interceptors can be later added to an existing intercepted CallInvoker, effectively building a chain like \"invoker.Intercept(c).Intercept(b).Intercept(a)\". Note that in this case, the last interceptor added will be the first to take control. Intercept(CallInvoker, Interceptor[]) Returns a CallInvoker instance that intercepts the invoker with the given interceptors. Declaration public static CallInvoker Intercept(this CallInvoker invoker, params Interceptor[] interceptors) Parameters Type Name Description CallInvoker invoker The channel to intercept. Interceptor [] interceptors An array of interceptors to intercept the calls to the invoker with. Control is passed to the interceptors in the order specified. Returns Type Description CallInvoker Remarks Multiple interceptors can be added on top of each other by calling \"invoker.Intercept(a, b, c)\". The order of invocation will be \"a\", \"b\", and then \"c\". Interceptors can be later added to an existing intercepted CallInvoker, effectively building a chain like \"invoker.Intercept(c).Intercept(b).Intercept(a)\". Note that in this case, the last interceptor added will be the first to take control. Intercept(CallInvoker, Func<Metadata, Metadata>) Returns a CallInvoker instance that intercepts the invoker with the given interceptor. Declaration public static CallInvoker Intercept(this CallInvoker invoker, Func<Metadata, Metadata> interceptor) Parameters Type Name Description CallInvoker invoker The underlying invoker to intercept. System.Func < Metadata , Metadata > interceptor An interceptor delegate that takes the request metadata to be sent with an outgoing call and returns a Metadata instance that will replace the existing invocation metadata. Returns Type Description CallInvoker Remarks Multiple interceptors can be added on top of each other by building a chain like \"invoker.Intercept(c).Intercept(b).Intercept(a)\". Note that in this case, the last interceptor added will be the first to take control."
  },
  "api/Grpc.Core.IAsyncStreamWriter-1.html": {
    "href": "api/Grpc.Core.IAsyncStreamWriter-1.html",
    "title": "Interface IAsyncStreamWriter<T> | gRPC C#",
    "keywords": "Interface IAsyncStreamWriter<T> A writable stream of messages. Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public interface IAsyncStreamWriter<in T> Type Parameters Name Description T The message type. Properties WriteOptions Write options that will be used for the next write. If null, default options will be used. Once set, this property maintains its value across subsequent writes. Declaration WriteOptions? WriteOptions { get; set; } Property Value Type Description System.Nullable < WriteOptions > Methods WriteAsync(T) Writes a message asynchronously. Only one write can be pending at a time. Declaration Task WriteAsync(T message) Parameters Type Name Description T message The message to be written. Cannot be null. Returns Type Description System.Threading.Tasks.Task"
  },
  "api/Grpc.Core.html": {
    "href": "api/Grpc.Core.html",
    "title": "Namespace Grpc.Core | gRPC C#",
    "keywords": "Namespace Grpc.Core Classes AsyncClientStreamingCall<TRequest, TResponse> Return type for client streaming calls. AsyncDuplexStreamingCall<TRequest, TResponse> Return type for bidirectional streaming calls. AsyncServerStreamingCall<TResponse> Return type for server streaming calls. AsyncStreamReaderExtensions Extension methods for IAsyncStreamReader<T> . AsyncUnaryCall<TResponse> Return type for single request - single response call. AuthContext Authentication context for a call. AuthContext is the only reliable source of truth when it comes to authenticating calls. Using any other call/context properties for authentication purposes is wrong and inherently unsafe. Note: experimental API that can change or be removed without any prior notice. AuthInterceptorContext Context for an RPC being intercepted by AsyncAuthInterceptor . AuthProperty A property of an AuthContext . Note: experimental API that can change or be removed without any prior notice. BindServiceMethodAttribute Specifies the location of the service bind method for a gRPC service. The bind method is typically generated code and is used to register a service's methods with the server on startup. The bind method signature takes a ServiceBinderBase and an optional instance of the service base class, e.g. static void BindService(ServiceBinderBase, GreeterService) . CallCredentials Client-side call credentials. Provide authorization with per-call granularity. CallCredentialsConfiguratorBase Base class for objects that can consume configuration from CallCredentials objects. Note: experimental API that can change or be removed without any prior notice. CallInvoker Abstraction of client-side RPC invocation. Calls Helper methods for generated clients to make RPC calls. Most users will use this class only indirectly and will be making calls using client object generated from protocol buffer definition files. Channel Represents a gRPC channel. Channels are an abstraction of long-lived connections to remote servers. More client objects can reuse the same channel. Creating a channel is an expensive operation compared to invoking a remote call so in general you should reuse a single channel for as many calls as possible. ChannelBase Base class for gRPC channel. Channels are an abstraction of long-lived connections to remote servers. ChannelCredentials Client-side channel credentials. Used for creation of a secure channel. ChannelCredentialsConfiguratorBase Base class for objects that can consume configuration from CallCredentials objects. Note: experimental API that can change or be removed without any prior notice. ChannelOption Channel option specified when creating a channel. Corresponds to grpc_channel_args from grpc/grpc.h. Commonly used channel option names are defined in ChannelOptions , but any of the GRPC_ARG_* channel options names defined in grpc_types.h can be used. ChannelOptions Defines names of most commonly used channel options. Other supported options names can be found in grpc_types.h (GRPC_ARG_* definitions) ClientBase Base class for client-side stubs. ClientBase.ClientBaseConfiguration Represents configuration of ClientBase. The class itself is visible to subclasses, but contents are marked as internal to make the instances opaque. The verbose name of this class was chosen to make name clash in generated code less likely. ClientBase<T> Generic base class for client-side stubs. ContextPropagationOptions Options for ContextPropagationToken . ContextPropagationToken Token for propagating context of server side handlers to child calls. In situations when a backend is making calls to another backend, it makes sense to propagate properties like deadline and cancellation token of the server call to the child call. Underlying gRPC implementation may provide other \"opaque\" contexts (like tracing context) that are not explicitly accesible via the public C# API, but this token still allows propagating them. DefaultCallInvoker Invokes client RPCs using Calls . DeserializationContext Provides access to the payload being deserialized when deserializing messages. GrpcEnvironment Encapsulates initialization and shutdown of gRPC library. KeyCertificatePair Key certificate pair (in PEM encoding). Marshaller<T> Encapsulates the logic for serializing and deserializing messages. Marshallers Utilities for creating marshallers. Metadata A collection of metadata entries that can be exchanged during a call. gRPC supports these types of metadata: Request headersare sent by the client at the beginning of a remote call before any request messages are sent. Response headersare sent by the server at the beginning of a remote call handler before any response messages are sent. Response trailersare sent by the server at the end of a remote call along with resulting call status. Metadata.Entry Metadata entry Method<TRequest, TResponse> A description of a remote method. RpcException Thrown when remote procedure call fails. Every RpcException is associated with a resulting Status of the call. SerializationContext Provides storage for payload when serializing a message. Server gRPC server. A single server can serve an arbitrary number of services and can listen on more than one port. Server.ServerPortCollection Collection of server ports. Server.ServiceDefinitionCollection Collection of service definitions. ServerCallContext Context for a server-side call. ServerCredentials Server side credentials. ServerPort A port exposed by a server. ServerServiceDefinition Stores mapping of methods to server call handlers. Normally, the ServerServiceDefinition objects will be created by the BindService factory method that is part of the autogenerated code for a protocol buffers service definition. ServerServiceDefinition.Builder Builder class for ServerServiceDefinition . ServiceBinderBase Allows binding server-side method implementations in alternative serving stacks. Instances of this class are usually populated by the BindService method that is part of the autogenerated code for a protocol buffers service definition. SslCredentials Client-side SSL credentials. SslServerCredentials Server-side SSL credentials. VerifyPeerContext Verification context for VerifyPeerCallback. Note: experimental API that can change or be removed without any prior notice. VersionInfo Provides info about current version of gRPC. See https://codingforsmarties.wordpress.com/2016/01/21/how-to-version-assemblies-destined-for-nuget/ for rationale about assembly versioning. WriteOptions Options for write operations. Structs CallInvocationDetails<TRequest, TResponse> Details about a client-side call to be invoked. CallOptions Options for calls made by client. Status Represents RPC result, which consists of StatusCode and an optional detail string. Interfaces IAsyncStreamReader<T> A stream of messages to be read. Messages can be awaited await reader.MoveNext() , that returns true if there is a message available and false if there are no more messages (i.e. the stream has been closed). On the client side, the last invocation of MoveNext() either returns false if the call has finished successfully or throws RpcException if call finished with an error. Once the call finishes, subsequent invocations of MoveNext() will continue yielding the same result (returning false or throwing an exception). On the server side, MoveNext() does not throw exceptions. In case of a failure, the request stream will appear to be finished ( MoveNext will return false ) and the CancellationToken associated with the call will be cancelled to signal the failure. MoveNext() operations can be cancelled via a cancellation token. Cancelling an individual read operation has the same effect as cancelling the entire call (which will also result in the read operation returning prematurely), but the per-read cancellation tokens passed to MoveNext() only result in cancelling the call if the read operation haven't finished yet. IAsyncStreamWriter<T> A writable stream of messages. IClientStreamWriter<T> Client-side writable stream of messages with Close capability. IMethod A non-generic representation of a remote method. IServerStreamWriter<T> A writable stream of messages that is used in server-side handlers. Enums ChannelOption.OptionType Type of ChannelOption . ChannelState Connectivity state of a channel. Based on grpc_connectivity_state from grpc/grpc.h CompressionLevel Compression level based on grpc_compression_level from grpc/compression.h MethodType Method types supported by gRPC. SslClientCertificateRequestType Modes of requesting client's SSL certificate by the server. Corresponds to grpc_ssl_client_certificate_request_type . StatusCode Result of a remote procedure call. Based on grpc_status_code from grpc/status.h WriteFlags Flags for write operations. Delegates AsyncAuthInterceptor Asynchronous authentication interceptor for CallCredentials . ClientStreamingServerMethod<TRequest, TResponse> Server-side handler for client streaming call. DuplexStreamingServerMethod<TRequest, TResponse> Server-side handler for bidi streaming call. ServerStreamingServerMethod<TRequest, TResponse> Server-side handler for server streaming call. UnaryServerMethod<TRequest, TResponse> Server-side handler for unary call. VerifyPeerCallback Callback invoked with the expected targetHost and the peer's certificate. If false is returned by this callback then it is treated as a verification failure and the attempted connection will fail. Invocation of the callback is blocking, so any implementation should be light-weight. Note that the callback can potentially be invoked multiple times, concurrently from different threads (e.g. when multiple connections are being created for the same credentials)."
  },
  "api/Grpc.Core.AsyncServerStreamingCall-1.html": {
    "href": "api/Grpc.Core.AsyncServerStreamingCall-1.html",
    "title": "Class AsyncServerStreamingCall<TResponse> | gRPC C#",
    "keywords": "Class AsyncServerStreamingCall<TResponse> Return type for server streaming calls. Inheritance System.Object AsyncServerStreamingCall<TResponse> Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public sealed class AsyncServerStreamingCall<TResponse> : IDisposable Type Parameters Name Description TResponse Response message type for this call. Constructors AsyncServerStreamingCall(IAsyncStreamReader<TResponse>, Func<Object, Task<Metadata>>, Func<Object, Status>, Func<Object, Metadata>, Action<Object>, Object) Creates a new AsyncDuplexStreamingCall object with the specified properties. Declaration public AsyncServerStreamingCall(IAsyncStreamReader<TResponse> responseStream, Func<object, Task<Metadata>> responseHeadersAsync, Func<object, Status> getStatusFunc, Func<object, Metadata> getTrailersFunc, Action<object> disposeAction, object state) Parameters Type Name Description IAsyncStreamReader <TResponse> responseStream Stream of response values. System.Func < System.Object , System.Threading.Tasks.Task < Metadata >> responseHeadersAsync Response headers of the asynchronous call. System.Func < System.Object , Status > getStatusFunc Delegate returning the status of the call. System.Func < System.Object , Metadata > getTrailersFunc Delegate returning the trailing metadata of the call. System.Action < System.Object > disposeAction Delegate to invoke when Dispose is called on the call object. System.Object state State object for use with the callback parameters. AsyncServerStreamingCall(IAsyncStreamReader<TResponse>, Task<Metadata>, Func<Status>, Func<Metadata>, Action) Creates a new AsyncDuplexStreamingCall object with the specified properties. Declaration public AsyncServerStreamingCall(IAsyncStreamReader<TResponse> responseStream, Task<Metadata> responseHeadersAsync, Func<Status> getStatusFunc, Func<Metadata> getTrailersFunc, Action disposeAction) Parameters Type Name Description IAsyncStreamReader <TResponse> responseStream Stream of response values. System.Threading.Tasks.Task < Metadata > responseHeadersAsync Response headers of the asynchronous call. System.Func < Status > getStatusFunc Delegate returning the status of the call. System.Func < Metadata > getTrailersFunc Delegate returning the trailing metadata of the call. System.Action disposeAction Delegate to invoke when Dispose is called on the call object. Properties ResponseHeadersAsync Asynchronous access to response headers. Declaration public Task<Metadata> ResponseHeadersAsync { get; } Property Value Type Description System.Threading.Tasks.Task < Metadata > ResponseStream Async stream to read streaming responses. Declaration public IAsyncStreamReader<TResponse> ResponseStream { get; } Property Value Type Description IAsyncStreamReader <TResponse> Methods Dispose() Provides means to cleanup after the call. If the call has already finished normally (response stream has been fully read), doesn't do anything. Otherwise, requests cancellation of the call which should terminate all pending async operations associated with the call. As a result, all resources being used by the call should be released eventually. Declaration public void Dispose() Remarks Normally, there is no need for you to dispose the call unless you want to utilize the \"Cancel\" semantics of invoking Dispose . GetStatus() Gets the call status if the call has already finished. Throws InvalidOperationException otherwise. Declaration public Status GetStatus() Returns Type Description Status GetTrailers() Gets the call trailing metadata if the call has already finished. Throws InvalidOperationException otherwise. Declaration public Metadata GetTrailers() Returns Type Description Metadata Implements System.IDisposable"
  },
  "api/Grpc.HealthCheck.html": {
    "href": "api/Grpc.HealthCheck.html",
    "title": "Namespace Grpc.HealthCheck | gRPC C#",
    "keywords": "Namespace Grpc.HealthCheck Classes HealthServiceImpl Implementation of a simple Health service. Useful for health checking. Registering service with a server: var serviceImpl = new HealthServiceImpl(); server = new Server(); server.AddServiceDefinition(Grpc.Health.V1.Health.BindService(serviceImpl));"
  },
  "api/Grpc.Core.Interceptors.Interceptor.AsyncServerStreamingCallContinuation-2.html": {
    "href": "api/Grpc.Core.Interceptors.Interceptor.AsyncServerStreamingCallContinuation-2.html",
    "title": "Delegate Interceptor.AsyncServerStreamingCallContinuation<TRequest, TResponse> | gRPC C#",
    "keywords": "Delegate Interceptor.AsyncServerStreamingCallContinuation<TRequest, TResponse> Represents a continuation for intercepting asynchronous server-streaming invocations. A delegate of this type is passed to the AsyncServerStreamingCall method when an outgoing invocation is being intercepted and calling the delegate will invoke the next interceptor in the chain, or the underlying call invoker if called from the last interceptor. The interceptor is allowed to call it zero, one, or multiple times, passing it the appropriate request value and context as it sees fit. Namespace : Grpc.Core.Interceptors Assembly : Grpc.Core.Api.dll Syntax public delegate AsyncServerStreamingCall<TResponse> AsyncServerStreamingCallContinuation<TRequest, TResponse>(TRequest request, ClientInterceptorContext<TRequest, TResponse> context) where TRequest : class where TResponse : class; Parameters Type Name Description TRequest request The request value to continue the invocation with. ClientInterceptorContext <TRequest, TResponse> context The ClientInterceptorContext<TRequest, TResponse> instance to pass to the next step in the invocation process. Returns Type Description AsyncServerStreamingCall <TResponse> An instance of AsyncServerStreamingCall<TResponse> representing an asynchronous invocation of a server-streaming RPC. The interceptor can choose to return the same object returned from the continuation delegate or an arbitrarily constructed instance as it sees fit. Type Parameters Name Description TRequest Request message type for this invocation. TResponse Response message type for this invocation."
  },
  "api/Grpc.Core.Utils.GrpcPreconditions.html": {
    "href": "api/Grpc.Core.Utils.GrpcPreconditions.html",
    "title": "Class GrpcPreconditions | gRPC C#",
    "keywords": "Class GrpcPreconditions Utility methods to simplify checking preconditions in the code. Inheritance System.Object GrpcPreconditions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core.Utils Assembly : Grpc.Core.Api.dll Syntax public static class GrpcPreconditions Methods CheckArgument(Boolean) Throws System.ArgumentException if condition is false. Declaration public static void CheckArgument(bool condition) Parameters Type Name Description System.Boolean condition The condition. CheckArgument(Boolean, String) Throws System.ArgumentException with given message if condition is false. Declaration public static void CheckArgument(bool condition, string errorMessage) Parameters Type Name Description System.Boolean condition The condition. System.String errorMessage The error message. CheckNotNull<T>(T) Throws System.ArgumentNullException if reference is null. Declaration public static T CheckNotNull<T>(T reference) Parameters Type Name Description T reference The reference. Returns Type Description T Type Parameters Name Description T CheckNotNull<T>(T, String) Throws System.ArgumentNullException if reference is null. Declaration public static T CheckNotNull<T>(T reference, string paramName) Parameters Type Name Description T reference The reference. System.String paramName The parameter name. Returns Type Description T Type Parameters Name Description T CheckState(Boolean) Throws System.InvalidOperationException if condition is false. Declaration public static void CheckState(bool condition) Parameters Type Name Description System.Boolean condition The condition. CheckState(Boolean, String) Throws System.InvalidOperationException with given message if condition is false. Declaration public static void CheckState(bool condition, string errorMessage) Parameters Type Name Description System.Boolean condition The condition. System.String errorMessage The error message."
  },
  "api/Grpc.Core.Status.html": {
    "href": "api/Grpc.Core.Status.html",
    "title": "Struct Status | gRPC C#",
    "keywords": "Struct Status Represents RPC result, which consists of StatusCode and an optional detail string. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public struct Status Constructors Status(StatusCode, String) Creates a new instance of Status . Declaration public Status(StatusCode statusCode, string detail) Parameters Type Name Description StatusCode statusCode Status code. System.String detail Detail. Status(StatusCode, String, Nullable<Exception>) Creates a new instance of Status . Users should not use this constructor, except for creating instances for testing. The debug error string should only be populated by gRPC internals. Note: experimental API that can change or be removed without any prior notice. Declaration public Status(StatusCode statusCode, string detail, Exception? debugException) Parameters Type Name Description StatusCode statusCode Status code. System.String detail Detail. System.Nullable < System.Exception > debugException Optional internal error details. Fields DefaultCancelled Default result of a cancelled RPC. StatusCode=Cancelled, empty details message. Declaration public static readonly Status DefaultCancelled Field Value Type Description Status DefaultSuccess Default result of a successful RPC. StatusCode=OK, empty details message. Declaration public static readonly Status DefaultSuccess Field Value Type Description Status Properties DebugException In case of an error, this field may contain additional error details to help with debugging. This field will be only populated on a client and its value is generated locally, based on the internal state of the gRPC client stack (i.e. the value is never sent over the wire). Note that this field is available only for debugging purposes, the application logic should never rely on values of this field (it should use StatusCode and Detail instead). Example: when a client fails to connect to a server, this field may provide additional details why the connection to the server has failed. Note: experimental API that can change or be removed without any prior notice. Declaration public Exception? DebugException { get; } Property Value Type Description System.Nullable < System.Exception > Detail Gets the detail. Declaration public string Detail { get; } Property Value Type Description System.String StatusCode Gets the gRPC status code. OK indicates success, all other values indicate an error. Declaration public StatusCode StatusCode { get; } Property Value Type Description StatusCode Methods ToString() Returns a System.String that represents the current Status . Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString()"
  },
  "api/Grpc.Core.Interceptors.Interceptor.AsyncClientStreamingCallContinuation-2.html": {
    "href": "api/Grpc.Core.Interceptors.Interceptor.AsyncClientStreamingCallContinuation-2.html",
    "title": "Delegate Interceptor.AsyncClientStreamingCallContinuation<TRequest, TResponse> | gRPC C#",
    "keywords": "Delegate Interceptor.AsyncClientStreamingCallContinuation<TRequest, TResponse> Represents a continuation for intercepting asynchronous client-streaming invocations. A delegate of this type is passed to the AsyncClientStreamingCall method when an outgoing invocation is being intercepted and calling the delegate will invoke the next interceptor in the chain, or the underlying call invoker if called from the last interceptor. The interceptor is allowed to call it zero, one, or multiple times, passing it the appropriate request value and context as it sees fit. Namespace : Grpc.Core.Interceptors Assembly : Grpc.Core.Api.dll Syntax public delegate AsyncClientStreamingCall<TRequest, TResponse> AsyncClientStreamingCallContinuation<TRequest, TResponse>(ClientInterceptorContext<TRequest, TResponse> context) where TRequest : class where TResponse : class; Parameters Type Name Description ClientInterceptorContext <TRequest, TResponse> context The ClientInterceptorContext<TRequest, TResponse> instance to pass to the next step in the invocation process. Returns Type Description AsyncClientStreamingCall <TRequest, TResponse> An instance of AsyncClientStreamingCall<TRequest, TResponse> representing an asynchronous invocation of a client-streaming RPC. The interceptor can choose to return the same object returned from the continuation delegate or an arbitrarily constructed instance as it sees fit. Type Parameters Name Description TRequest Request message type for this invocation. TResponse Response message type for this invocation."
  },
  "api/Grpc.Core.IClientStreamWriter-1.html": {
    "href": "api/Grpc.Core.IClientStreamWriter-1.html",
    "title": "Interface IClientStreamWriter<T> | gRPC C#",
    "keywords": "Interface IClientStreamWriter<T> Client-side writable stream of messages with Close capability. Inherited Members IAsyncStreamWriter<T>.WriteAsync(T) IAsyncStreamWriter<T>.WriteOptions Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public interface IClientStreamWriter<in T> : IAsyncStreamWriter<T> Type Parameters Name Description T The message type. Methods CompleteAsync() Completes/closes the stream. Can only be called once there is no pending write. No writes should follow calling this. Declaration Task CompleteAsync() Returns Type Description System.Threading.Tasks.Task"
  },
  "api/Grpc.Core.AsyncDuplexStreamingCall-2.html": {
    "href": "api/Grpc.Core.AsyncDuplexStreamingCall-2.html",
    "title": "Class AsyncDuplexStreamingCall<TRequest, TResponse> | gRPC C#",
    "keywords": "Class AsyncDuplexStreamingCall<TRequest, TResponse> Return type for bidirectional streaming calls. Inheritance System.Object AsyncDuplexStreamingCall<TRequest, TResponse> Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public sealed class AsyncDuplexStreamingCall<TRequest, TResponse> : IDisposable Type Parameters Name Description TRequest Request message type for this call. TResponse Response message type for this call. Constructors AsyncDuplexStreamingCall(IClientStreamWriter<TRequest>, IAsyncStreamReader<TResponse>, Func<Object, Task<Metadata>>, Func<Object, Status>, Func<Object, Metadata>, Action<Object>, Object) Creates a new AsyncDuplexStreamingCall object with the specified properties. Declaration public AsyncDuplexStreamingCall(IClientStreamWriter<TRequest> requestStream, IAsyncStreamReader<TResponse> responseStream, Func<object, Task<Metadata>> responseHeadersAsync, Func<object, Status> getStatusFunc, Func<object, Metadata> getTrailersFunc, Action<object> disposeAction, object state) Parameters Type Name Description IClientStreamWriter <TRequest> requestStream Stream of request values. IAsyncStreamReader <TResponse> responseStream Stream of response values. System.Func < System.Object , System.Threading.Tasks.Task < Metadata >> responseHeadersAsync Response headers of the asynchronous call. System.Func < System.Object , Status > getStatusFunc Delegate returning the status of the call. System.Func < System.Object , Metadata > getTrailersFunc Delegate returning the trailing metadata of the call. System.Action < System.Object > disposeAction Delegate to invoke when Dispose is called on the call object. System.Object state State object for use with the callback parameters. AsyncDuplexStreamingCall(IClientStreamWriter<TRequest>, IAsyncStreamReader<TResponse>, Task<Metadata>, Func<Status>, Func<Metadata>, Action) Creates a new AsyncDuplexStreamingCall object with the specified properties. Declaration public AsyncDuplexStreamingCall(IClientStreamWriter<TRequest> requestStream, IAsyncStreamReader<TResponse> responseStream, Task<Metadata> responseHeadersAsync, Func<Status> getStatusFunc, Func<Metadata> getTrailersFunc, Action disposeAction) Parameters Type Name Description IClientStreamWriter <TRequest> requestStream Stream of request values. IAsyncStreamReader <TResponse> responseStream Stream of response values. System.Threading.Tasks.Task < Metadata > responseHeadersAsync Response headers of the asynchronous call. System.Func < Status > getStatusFunc Delegate returning the status of the call. System.Func < Metadata > getTrailersFunc Delegate returning the trailing metadata of the call. System.Action disposeAction Delegate to invoke when Dispose is called on the call object. Properties RequestStream Async stream to send streaming requests. Declaration public IClientStreamWriter<TRequest> RequestStream { get; } Property Value Type Description IClientStreamWriter <TRequest> ResponseHeadersAsync Asynchronous access to response headers. Declaration public Task<Metadata> ResponseHeadersAsync { get; } Property Value Type Description System.Threading.Tasks.Task < Metadata > ResponseStream Async stream to read streaming responses. Declaration public IAsyncStreamReader<TResponse> ResponseStream { get; } Property Value Type Description IAsyncStreamReader <TResponse> Methods Dispose() Provides means to cleanup after the call. If the call has already finished normally (request stream has been completed and response stream has been fully read), doesn't do anything. Otherwise, requests cancellation of the call which should terminate all pending async operations associated with the call. As a result, all resources being used by the call should be released eventually. Declaration public void Dispose() Remarks Normally, there is no need for you to dispose the call unless you want to utilize the \"Cancel\" semantics of invoking Dispose . GetStatus() Gets the call status if the call has already finished. Throws InvalidOperationException otherwise. Declaration public Status GetStatus() Returns Type Description Status GetTrailers() Gets the call trailing metadata if the call has already finished. Throws InvalidOperationException otherwise. Declaration public Metadata GetTrailers() Returns Type Description Metadata Implements System.IDisposable"
  },
  "api/Grpc.Core.Interceptors.Interceptor.AsyncDuplexStreamingCallContinuation-2.html": {
    "href": "api/Grpc.Core.Interceptors.Interceptor.AsyncDuplexStreamingCallContinuation-2.html",
    "title": "Delegate Interceptor.AsyncDuplexStreamingCallContinuation<TRequest, TResponse> | gRPC C#",
    "keywords": "Delegate Interceptor.AsyncDuplexStreamingCallContinuation<TRequest, TResponse> Represents a continuation for intercepting asynchronous duplex invocations. A delegate of this type is passed to the AsyncDuplexStreamingCall method when an outgoing invocation is being intercepted and calling the delegate will invoke the next interceptor in the chain, or the underlying call invoker if called from the last interceptor. The interceptor is allowed to call it zero, one, or multiple times, passing it the appropriate request value and context as it sees fit. Namespace : Grpc.Core.Interceptors Assembly : Grpc.Core.Api.dll Syntax public delegate AsyncDuplexStreamingCall<TRequest, TResponse> AsyncDuplexStreamingCallContinuation<TRequest, TResponse>(ClientInterceptorContext<TRequest, TResponse> context) where TRequest : class where TResponse : class; Parameters Type Name Description ClientInterceptorContext <TRequest, TResponse> context The ClientInterceptorContext<TRequest, TResponse> instance to pass to the next step in the invocation process. Returns Type Description AsyncDuplexStreamingCall <TRequest, TResponse> An instance of AsyncDuplexStreamingCall<TRequest, TResponse> representing an asynchronous invocation of a duplex-streaming RPC. The interceptor can choose to return the same object returned from the continuation delegate or an arbitrarily constructed instance as it sees fit. Type Parameters Name Description TRequest TResponse"
  },
  "api/Grpc.Core.ChannelCredentialsConfiguratorBase.html": {
    "href": "api/Grpc.Core.ChannelCredentialsConfiguratorBase.html",
    "title": "Class ChannelCredentialsConfiguratorBase | gRPC C#",
    "keywords": "Class ChannelCredentialsConfiguratorBase Base class for objects that can consume configuration from CallCredentials objects. Note: experimental API that can change or be removed without any prior notice. Inheritance System.Object ChannelCredentialsConfiguratorBase Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public abstract class ChannelCredentialsConfiguratorBase Methods SetCompositeCredentials(Object, ChannelCredentials, CallCredentials) Configures the credentials to use composite channel credentials (a composite of channel credentials and call credentials). Declaration public abstract void SetCompositeCredentials(object state, ChannelCredentials channelCredentials, CallCredentials callCredentials) Parameters Type Name Description System.Object state ChannelCredentials channelCredentials CallCredentials callCredentials SetInsecureCredentials(Object) Configures the credentials to use insecure credentials. Declaration public abstract void SetInsecureCredentials(object state) Parameters Type Name Description System.Object state SetSslCredentials(Object, Nullable<String>, Nullable<KeyCertificatePair>, Nullable<VerifyPeerCallback>) Configures the credentials to use SslCredentials . Declaration public abstract void SetSslCredentials(object state, string? rootCertificates, KeyCertificatePair? keyCertificatePair, VerifyPeerCallback? verifyPeerCallback) Parameters Type Name Description System.Object state System.Nullable < System.String > rootCertificates System.Nullable < KeyCertificatePair > keyCertificatePair System.Nullable < VerifyPeerCallback > verifyPeerCallback"
  },
  "api/Grpc.Core.Method-2.html": {
    "href": "api/Grpc.Core.Method-2.html",
    "title": "Class Method<TRequest, TResponse> | gRPC C#",
    "keywords": "Class Method<TRequest, TResponse> A description of a remote method. Inheritance System.Object Method<TRequest, TResponse> Implements IMethod Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public class Method<TRequest, TResponse> : IMethod Type Parameters Name Description TRequest Request message type for this method. TResponse Response message type for this method. Constructors Method(MethodType, String, String, Marshaller<TRequest>, Marshaller<TResponse>) Initializes a new instance of the Method class. Declaration public Method(MethodType type, string serviceName, string name, Marshaller<TRequest> requestMarshaller, Marshaller<TResponse> responseMarshaller) Parameters Type Name Description MethodType type Type of method. System.String serviceName Name of service this method belongs to. System.String name Unqualified name of the method. Marshaller <TRequest> requestMarshaller Marshaller used for request messages. Marshaller <TResponse> responseMarshaller Marshaller used for response messages. Properties FullName Gets the fully qualified name of the method. On the server side, methods are dispatched based on this name. Declaration public string FullName { get; } Property Value Type Description System.String Name Gets the unqualified name of the method. Declaration public string Name { get; } Property Value Type Description System.String RequestMarshaller Gets the marshaller used for request messages. Declaration public Marshaller<TRequest> RequestMarshaller { get; } Property Value Type Description Marshaller <TRequest> ResponseMarshaller Gets the marshaller used for response messages. Declaration public Marshaller<TResponse> ResponseMarshaller { get; } Property Value Type Description Marshaller <TResponse> ServiceName Gets the name of the service to which this method belongs. Declaration public string ServiceName { get; } Property Value Type Description System.String Type Gets the type of the method. Declaration public MethodType Type { get; } Property Value Type Description MethodType Implements IMethod"
  },
  "api/Grpc.Core.ChannelOption.OptionType.html": {
    "href": "api/Grpc.Core.ChannelOption.OptionType.html",
    "title": "Enum ChannelOption.OptionType | gRPC C#",
    "keywords": "Enum ChannelOption.OptionType Type of ChannelOption . Namespace : Grpc.Core Assembly : Grpc.Core.dll Syntax public enum OptionType Fields Name Description Integer Channel option with integer value. String Channel option with string value."
  },
  "api/Grpc.Core.CallInvoker.html": {
    "href": "api/Grpc.Core.CallInvoker.html",
    "title": "Class CallInvoker | gRPC C#",
    "keywords": "Class CallInvoker Abstraction of client-side RPC invocation. Inheritance System.Object CallInvoker DefaultCallInvoker Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public abstract class CallInvoker Methods AsyncClientStreamingCall<TRequest, TResponse>(Method<TRequest, TResponse>, Nullable<String>, CallOptions) Invokes a client streaming call asynchronously. In client streaming scenario, client sends a stream of requests and server responds with a single response. Declaration public abstract AsyncClientStreamingCall<TRequest, TResponse> AsyncClientStreamingCall<TRequest, TResponse>(Method<TRequest, TResponse> method, string? host, CallOptions options) where TRequest : class where TResponse : class Parameters Type Name Description Method <TRequest, TResponse> method System.Nullable < System.String > host CallOptions options Returns Type Description AsyncClientStreamingCall <TRequest, TResponse> Type Parameters Name Description TRequest TResponse AsyncDuplexStreamingCall<TRequest, TResponse>(Method<TRequest, TResponse>, Nullable<String>, CallOptions) Invokes a duplex streaming call asynchronously. In duplex streaming scenario, client sends a stream of requests and server responds with a stream of responses. The response stream is completely independent and both side can be sending messages at the same time. Declaration public abstract AsyncDuplexStreamingCall<TRequest, TResponse> AsyncDuplexStreamingCall<TRequest, TResponse>(Method<TRequest, TResponse> method, string? host, CallOptions options) where TRequest : class where TResponse : class Parameters Type Name Description Method <TRequest, TResponse> method System.Nullable < System.String > host CallOptions options Returns Type Description AsyncDuplexStreamingCall <TRequest, TResponse> Type Parameters Name Description TRequest TResponse AsyncServerStreamingCall<TRequest, TResponse>(Method<TRequest, TResponse>, Nullable<String>, CallOptions, TRequest) Invokes a server streaming call asynchronously. In server streaming scenario, client sends on request and server responds with a stream of responses. Declaration public abstract AsyncServerStreamingCall<TResponse> AsyncServerStreamingCall<TRequest, TResponse>(Method<TRequest, TResponse> method, string? host, CallOptions options, TRequest request) where TRequest : class where TResponse : class Parameters Type Name Description Method <TRequest, TResponse> method System.Nullable < System.String > host CallOptions options TRequest request Returns Type Description AsyncServerStreamingCall <TResponse> Type Parameters Name Description TRequest TResponse AsyncUnaryCall<TRequest, TResponse>(Method<TRequest, TResponse>, Nullable<String>, CallOptions, TRequest) Invokes a simple remote call asynchronously. Declaration public abstract AsyncUnaryCall<TResponse> AsyncUnaryCall<TRequest, TResponse>(Method<TRequest, TResponse> method, string? host, CallOptions options, TRequest request) where TRequest : class where TResponse : class Parameters Type Name Description Method <TRequest, TResponse> method System.Nullable < System.String > host CallOptions options TRequest request Returns Type Description AsyncUnaryCall <TResponse> Type Parameters Name Description TRequest TResponse BlockingUnaryCall<TRequest, TResponse>(Method<TRequest, TResponse>, Nullable<String>, CallOptions, TRequest) Invokes a simple remote call in a blocking fashion. Declaration public abstract TResponse BlockingUnaryCall<TRequest, TResponse>(Method<TRequest, TResponse> method, string? host, CallOptions options, TRequest request) where TRequest : class where TResponse : class Parameters Type Name Description Method <TRequest, TResponse> method System.Nullable < System.String > host CallOptions options TRequest request Returns Type Description TResponse Type Parameters Name Description TRequest TResponse Extension Methods CallInvokerExtensions.Intercept(CallInvoker, Interceptor) CallInvokerExtensions.Intercept(CallInvoker, Interceptor[]) CallInvokerExtensions.Intercept(CallInvoker, Func<Metadata, Metadata>)"
  },
  "api/Grpc.Auth.GoogleAuthInterceptors.html": {
    "href": "api/Grpc.Auth.GoogleAuthInterceptors.html",
    "title": "Class GoogleAuthInterceptors | gRPC C#",
    "keywords": "Class GoogleAuthInterceptors Factory methods to create authorization interceptors for Google credentials. GoogleGrpcCredentials Inheritance System.Object GoogleAuthInterceptors Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Auth Assembly : Grpc.Auth.dll Syntax public static class GoogleAuthInterceptors Methods FromAccessToken(String) Creates an AsyncAuthInterceptor that will use given access token as authorization. Declaration public static AsyncAuthInterceptor FromAccessToken(string accessToken) Parameters Type Name Description System.String accessToken OAuth2 access token. Returns Type Description AsyncAuthInterceptor The interceptor. FromCredential(ITokenAccess) Creates an AsyncAuthInterceptor that will obtain access token from any credential type that implements ITokenAccess . (e.g. GoogleCredential ). Declaration public static AsyncAuthInterceptor FromCredential(ITokenAccess credential) Parameters Type Name Description ITokenAccess credential The credential to use to obtain access tokens. Returns Type Description AsyncAuthInterceptor The interceptor. FromCredential(ITokenAccessWithHeaders) Creates an AsyncAuthInterceptor that will obtain access token and associated information from any credential type that implements Declaration public static AsyncAuthInterceptor FromCredential(ITokenAccessWithHeaders credential) Parameters Type Name Description ITokenAccessWithHeaders credential The credential to use to obtain access tokens. Returns Type Description AsyncAuthInterceptor The interceptor."
  },
  "api/Grpc.Core.CallInvocationDetails-2.html": {
    "href": "api/Grpc.Core.CallInvocationDetails-2.html",
    "title": "Struct CallInvocationDetails<TRequest, TResponse> | gRPC C#",
    "keywords": "Struct CallInvocationDetails<TRequest, TResponse> Details about a client-side call to be invoked. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Grpc.Core Assembly : Grpc.Core.dll Syntax public struct CallInvocationDetails<TRequest, TResponse> Type Parameters Name Description TRequest Request message type for the call. TResponse Response message type for the call. Constructors CallInvocationDetails(Channel, Method<TRequest, TResponse>, CallOptions) Initializes a new instance of the CallInvocationDetails<TRequest, TResponse> struct. Declaration public CallInvocationDetails(Channel channel, Method<TRequest, TResponse> method, CallOptions options) Parameters Type Name Description Channel channel Channel to use for this call. Method <TRequest, TResponse> method Method to call. CallOptions options Call options. CallInvocationDetails(Channel, Method<TRequest, TResponse>, String, CallOptions) Initializes a new instance of the CallInvocationDetails<TRequest, TResponse> struct. Declaration public CallInvocationDetails(Channel channel, Method<TRequest, TResponse> method, string host, CallOptions options) Parameters Type Name Description Channel channel Channel to use for this call. Method <TRequest, TResponse> method Method to call. System.String host Host that contains the method. if null , default host will be used. CallOptions options Call options. CallInvocationDetails(Channel, String, String, Marshaller<TRequest>, Marshaller<TResponse>, CallOptions) Initializes a new instance of the CallInvocationDetails<TRequest, TResponse> struct. Declaration public CallInvocationDetails(Channel channel, string method, string host, Marshaller<TRequest> requestMarshaller, Marshaller<TResponse> responseMarshaller, CallOptions options) Parameters Type Name Description Channel channel Channel to use for this call. System.String method Qualified method name. System.String host Host that contains the method. Marshaller <TRequest> requestMarshaller Request marshaller. Marshaller <TResponse> responseMarshaller Response marshaller. CallOptions options Call options. Properties Channel Get channel associated with this call. Declaration public Channel Channel { get; } Property Value Type Description Channel Host Get name of host. Declaration public string Host { get; } Property Value Type Description System.String Method Gets name of method to be called. Declaration public string Method { get; } Property Value Type Description System.String Options Gets the call options. Declaration public CallOptions Options { get; } Property Value Type Description CallOptions RequestMarshaller Gets marshaller used to serialize requests. Declaration public Marshaller<TRequest> RequestMarshaller { get; } Property Value Type Description Marshaller <TRequest> ResponseMarshaller Gets marshaller used to deserialized responses. Declaration public Marshaller<TResponse> ResponseMarshaller { get; } Property Value Type Description Marshaller <TResponse> Methods WithOptions(CallOptions) Returns new instance of CallInvocationDetails<TRequest, TResponse> with Options set to the value provided. Values of all other fields are preserved. Declaration public CallInvocationDetails<TRequest, TResponse> WithOptions(CallOptions options) Parameters Type Name Description CallOptions options Returns Type Description CallInvocationDetails <TRequest, TResponse>"
  },
  "api/Grpc.Core.CallCredentials.html": {
    "href": "api/Grpc.Core.CallCredentials.html",
    "title": "Class CallCredentials | gRPC C#",
    "keywords": "Class CallCredentials Client-side call credentials. Provide authorization with per-call granularity. Inheritance System.Object CallCredentials Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public abstract class CallCredentials Methods Compose(CallCredentials[]) Composes multiple CallCredentials objects into a single CallCredentials object. Declaration public static CallCredentials Compose(params CallCredentials[] credentials) Parameters Type Name Description CallCredentials [] credentials credentials to compose Returns Type Description CallCredentials The new CompositeCallCredentials FromInterceptor(AsyncAuthInterceptor) Creates a new instance of CallCredentials class from an interceptor that can attach metadata to outgoing calls. Declaration public static CallCredentials FromInterceptor(AsyncAuthInterceptor interceptor) Parameters Type Name Description AsyncAuthInterceptor interceptor authentication interceptor Returns Type Description CallCredentials InternalPopulateConfiguration(CallCredentialsConfiguratorBase, Nullable<Object>) Populates call credentials configurator with this instance's configuration. End users never need to invoke this method as it is part of internal implementation. Declaration public abstract void InternalPopulateConfiguration(CallCredentialsConfiguratorBase configurator, object? state) Parameters Type Name Description CallCredentialsConfiguratorBase configurator System.Nullable < System.Object > state"
  },
  "api/Grpc.Core.AuthContext.html": {
    "href": "api/Grpc.Core.AuthContext.html",
    "title": "Class AuthContext | gRPC C#",
    "keywords": "Class AuthContext Authentication context for a call. AuthContext is the only reliable source of truth when it comes to authenticating calls. Using any other call/context properties for authentication purposes is wrong and inherently unsafe. Note: experimental API that can change or be removed without any prior notice. Inheritance System.Object AuthContext Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public class AuthContext Constructors AuthContext(Nullable<String>, Dictionary<String, List<AuthProperty>>) Initializes a new instance of the AuthContext class. Declaration public AuthContext(string? peerIdentityPropertyName, Dictionary<string, List<AuthProperty>> properties) Parameters Type Name Description System.Nullable < System.String > peerIdentityPropertyName Peer identity property name. System.Collections.Generic.Dictionary < System.String , System.Collections.Generic.List < AuthProperty >> properties Multimap of auth properties by name. Properties IsPeerAuthenticated Returns true if the peer is authenticated. Declaration public bool IsPeerAuthenticated { get; } Property Value Type Description System.Boolean PeerIdentity Gets properties that represent the peer identity (there can be more than one). Returns an empty collection if the peer is not authenticated. Declaration public IEnumerable<AuthProperty> PeerIdentity { get; } Property Value Type Description System.Collections.Generic.IEnumerable < AuthProperty > PeerIdentityPropertyName Gets the name of the property that indicates the peer identity. Returns null if the peer is not authenticated. Declaration public string? PeerIdentityPropertyName { get; } Property Value Type Description System.Nullable < System.String > Properties Gets the auth properties of this context. Declaration public IEnumerable<AuthProperty> Properties { get; } Property Value Type Description System.Collections.Generic.IEnumerable < AuthProperty > Methods FindPropertiesByName(String) Returns the auth properties with given name (there can be more than one). If no properties of given name exist, an empty collection will be returned. Declaration public IEnumerable<AuthProperty> FindPropertiesByName(string propertyName) Parameters Type Name Description System.String propertyName Returns Type Description System.Collections.Generic.IEnumerable < AuthProperty >"
  },
  "api/Grpc.Core.WriteOptions.html": {
    "href": "api/Grpc.Core.WriteOptions.html",
    "title": "Class WriteOptions | gRPC C#",
    "keywords": "Class WriteOptions Options for write operations. Inheritance System.Object WriteOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public class WriteOptions Constructors WriteOptions(WriteFlags) Initializes a new instance of WriteOptions class. Declaration public WriteOptions(WriteFlags flags = (WriteFlags)0) Parameters Type Name Description WriteFlags flags The write flags. Fields Default Default write options. Declaration public static readonly WriteOptions Default Field Value Type Description WriteOptions Properties Flags Gets the write flags. Declaration public WriteFlags Flags { get; } Property Value Type Description WriteFlags"
  },
  "api/Grpc.Core.UnaryServerMethod-2.html": {
    "href": "api/Grpc.Core.UnaryServerMethod-2.html",
    "title": "Delegate UnaryServerMethod<TRequest, TResponse> | gRPC C#",
    "keywords": "Delegate UnaryServerMethod<TRequest, TResponse> Server-side handler for unary call. Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public delegate Task<TResponse> UnaryServerMethod<TRequest, TResponse>(TRequest request, ServerCallContext context) where TRequest : class where TResponse : class; Parameters Type Name Description TRequest request ServerCallContext context Returns Type Description System.Threading.Tasks.Task <TResponse> Type Parameters Name Description TRequest Request message type for this method. TResponse Response message type for this method."
  },
  "api/Grpc.Core.Interceptors.ClientInterceptorContext-2.html": {
    "href": "api/Grpc.Core.Interceptors.ClientInterceptorContext-2.html",
    "title": "Struct ClientInterceptorContext<TRequest, TResponse> | gRPC C#",
    "keywords": "Struct ClientInterceptorContext<TRequest, TResponse> Carries along the context associated with intercepted invocations on the client side. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Grpc.Core.Interceptors Assembly : Grpc.Core.Api.dll Syntax public struct ClientInterceptorContext<TRequest, TResponse> where TRequest : class where TResponse : class Type Parameters Name Description TRequest TResponse Constructors ClientInterceptorContext(Method<TRequest, TResponse>, Nullable<String>, CallOptions) Creates a new instance of ClientInterceptorContext<TRequest, TResponse> with the specified method, host, and call options. Declaration public ClientInterceptorContext(Method<TRequest, TResponse> method, string? host, CallOptions options) Parameters Type Name Description Method <TRequest, TResponse> method A Method<TRequest, TResponse> object representing the method to be invoked. System.Nullable < System.String > host The host to dispatch the current call to. CallOptions options A CallOptions instance containing the call options of the current call. Properties Host Gets the host that the currect invocation will be dispatched to. Declaration public string? Host { get; } Property Value Type Description System.Nullable < System.String > Method Gets the Method<TRequest, TResponse> instance representing the method to be invoked. Declaration public Method<TRequest, TResponse> Method { get; } Property Value Type Description Method <TRequest, TResponse> Options Gets the CallOptions structure representing the call options associated with the current invocation. Declaration public CallOptions Options { get; } Property Value Type Description CallOptions"
  },
  "api/Grpc.Core.IAsyncStreamReader-1.html": {
    "href": "api/Grpc.Core.IAsyncStreamReader-1.html",
    "title": "Interface IAsyncStreamReader<T> | gRPC C#",
    "keywords": "Interface IAsyncStreamReader<T> A stream of messages to be read. Messages can be awaited await reader.MoveNext() , that returns true if there is a message available and false if there are no more messages (i.e. the stream has been closed). On the client side, the last invocation of MoveNext() either returns false if the call has finished successfully or throws RpcException if call finished with an error. Once the call finishes, subsequent invocations of MoveNext() will continue yielding the same result (returning false or throwing an exception). On the server side, MoveNext() does not throw exceptions. In case of a failure, the request stream will appear to be finished ( MoveNext will return false ) and the CancellationToken associated with the call will be cancelled to signal the failure. MoveNext() operations can be cancelled via a cancellation token. Cancelling an individual read operation has the same effect as cancelling the entire call (which will also result in the read operation returning prematurely), but the per-read cancellation tokens passed to MoveNext() only result in cancelling the call if the read operation haven't finished yet. Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public interface IAsyncStreamReader<out T> Type Parameters Name Description T The message type. Properties Current Gets the current element in the iteration. Declaration T Current { get; } Property Value Type Description T Methods MoveNext(CancellationToken) Advances the reader to the next element in the sequence, returning the result asynchronously. Declaration Task<bool> MoveNext(CancellationToken cancellationToken) Parameters Type Name Description System.Threading.CancellationToken cancellationToken Cancellation token that can be used to cancel the operation. Returns Type Description System.Threading.Tasks.Task < System.Boolean > Task containing the result of the operation: true if the reader was successfully advanced to the next element; false if the reader has passed the end of the sequence."
  },
  "api/Grpc.Health.V1.HealthCheckResponse.Types.html": {
    "href": "api/Grpc.Health.V1.HealthCheckResponse.Types.html",
    "title": "Class HealthCheckResponse.Types | gRPC C#",
    "keywords": "Class HealthCheckResponse.Types Container for nested types declared in the HealthCheckResponse message type. Inheritance System.Object HealthCheckResponse.Types Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Health.V1 Assembly : Grpc.HealthCheck.dll Syntax public static class Types"
  },
  "api/Grpc.Health.V1.HealthCheckResponse.Types.ServingStatus.html": {
    "href": "api/Grpc.Health.V1.HealthCheckResponse.Types.ServingStatus.html",
    "title": "Enum HealthCheckResponse.Types.ServingStatus | gRPC C#",
    "keywords": "Enum HealthCheckResponse.Types.ServingStatus Namespace : Grpc.Health.V1 Assembly : Grpc.HealthCheck.dll Syntax public enum ServingStatus Fields Name Description NotServing ServiceUnknown Used only by the Watch method. Serving Unknown"
  },
  "api/Grpc.Core.Utils.BenchmarkUtil.html": {
    "href": "api/Grpc.Core.Utils.BenchmarkUtil.html",
    "title": "Class BenchmarkUtil | gRPC C#",
    "keywords": "Class BenchmarkUtil Utility methods to run microbenchmarks. Inheritance System.Object BenchmarkUtil Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core.Utils Assembly : Grpc.Core.dll Syntax public static class BenchmarkUtil Methods RunBenchmark(Int32, Int32, Action) Runs a simple benchmark preceded by warmup phase. Declaration public static void RunBenchmark(int warmupIterations, int benchmarkIterations, Action action) Parameters Type Name Description System.Int32 warmupIterations System.Int32 benchmarkIterations System.Action action"
  },
  "api/Grpc.Core.Utils.AsyncStreamExtensions.html": {
    "href": "api/Grpc.Core.Utils.AsyncStreamExtensions.html",
    "title": "Class AsyncStreamExtensions | gRPC C#",
    "keywords": "Class AsyncStreamExtensions Extension methods that simplify work with gRPC streaming calls. Inheritance System.Object AsyncStreamExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core.Utils Assembly : Grpc.Core.dll Syntax public static class AsyncStreamExtensions Methods ForEachAsync<T>(IAsyncStreamReader<T>, Func<T, Task>) Reads the entire stream and executes an async action for each element. Declaration public static Task ForEachAsync<T>(this IAsyncStreamReader<T> streamReader, Func<T, Task> asyncAction) where T : class Parameters Type Name Description IAsyncStreamReader <T> streamReader System.Func <T, System.Threading.Tasks.Task > asyncAction Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T ToListAsync<T>(IAsyncStreamReader<T>) Reads the entire stream and creates a list containing all the elements read. Declaration public static Task<List<T>> ToListAsync<T>(this IAsyncStreamReader<T> streamReader) where T : class Parameters Type Name Description IAsyncStreamReader <T> streamReader Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.List <T>> Type Parameters Name Description T WriteAllAsync<T>(IClientStreamWriter<T>, IEnumerable<T>, Boolean) Writes all elements from given enumerable to the stream. Completes the stream afterwards unless close = false. Declaration public static Task WriteAllAsync<T>(this IClientStreamWriter<T> streamWriter, IEnumerable<T> elements, bool complete = true) where T : class Parameters Type Name Description IClientStreamWriter <T> streamWriter System.Collections.Generic.IEnumerable <T> elements System.Boolean complete Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T WriteAllAsync<T>(IServerStreamWriter<T>, IEnumerable<T>) Writes all elements from given enumerable to the stream. Declaration public static Task WriteAllAsync<T>(this IServerStreamWriter<T> streamWriter, IEnumerable<T> elements) where T : class Parameters Type Name Description IServerStreamWriter <T> streamWriter System.Collections.Generic.IEnumerable <T> elements Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T"
  },
  "api/Grpc.Core.ContextPropagationToken.html": {
    "href": "api/Grpc.Core.ContextPropagationToken.html",
    "title": "Class ContextPropagationToken | gRPC C#",
    "keywords": "Class ContextPropagationToken Token for propagating context of server side handlers to child calls. In situations when a backend is making calls to another backend, it makes sense to propagate properties like deadline and cancellation token of the server call to the child call. Underlying gRPC implementation may provide other \"opaque\" contexts (like tracing context) that are not explicitly accesible via the public C# API, but this token still allows propagating them. Inheritance System.Object ContextPropagationToken Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public abstract class ContextPropagationToken"
  },
  "api/Grpc.Core.ClientBase.ClientBaseConfiguration.html": {
    "href": "api/Grpc.Core.ClientBase.ClientBaseConfiguration.html",
    "title": "Class ClientBase.ClientBaseConfiguration | gRPC C#",
    "keywords": "Class ClientBase.ClientBaseConfiguration Represents configuration of ClientBase. The class itself is visible to subclasses, but contents are marked as internal to make the instances opaque. The verbose name of this class was chosen to make name clash in generated code less likely. Inheritance System.Object ClientBase.ClientBaseConfiguration Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax protected class ClientBaseConfiguration"
  },
  "api/Grpc.Core.MethodType.html": {
    "href": "api/Grpc.Core.MethodType.html",
    "title": "Enum MethodType | gRPC C#",
    "keywords": "Enum MethodType Method types supported by gRPC. Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public enum MethodType Fields Name Description ClientStreaming Stream of request sent from client, single response received from server. DuplexStreaming Both server and client can stream arbitrary number of requests and responses simultaneously. ServerStreaming Single request sent from client, stream of responses received from server. Unary Single request sent from client, single response received from server."
  },
  "api/Grpc.Core.Interceptors.ServerServiceDefinitionExtensions.html": {
    "href": "api/Grpc.Core.Interceptors.ServerServiceDefinitionExtensions.html",
    "title": "Class ServerServiceDefinitionExtensions | gRPC C#",
    "keywords": "Class ServerServiceDefinitionExtensions Extends the ServerServiceDefinition class to add methods used to register interceptors on the server side. Inheritance System.Object ServerServiceDefinitionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core.Interceptors Assembly : Grpc.Core.dll Syntax public static class ServerServiceDefinitionExtensions Methods Intercept(ServerServiceDefinition, Interceptor) Returns a ServerServiceDefinition instance that intercepts incoming calls to the underlying service handler through the given interceptor. Declaration public static ServerServiceDefinition Intercept(this ServerServiceDefinition serverServiceDefinition, Interceptor interceptor) Parameters Type Name Description ServerServiceDefinition serverServiceDefinition The ServerServiceDefinition instance to register interceptors on. Interceptor interceptor The interceptor to intercept the incoming invocations with. Returns Type Description ServerServiceDefinition Remarks Multiple interceptors can be added on top of each other by calling \"serverServiceDefinition.Intercept(a, b, c)\". The order of invocation will be \"a\", \"b\", and then \"c\". Interceptors can be later added to an existing intercepted service definition, effectively building a chain like \"serverServiceDefinition.Intercept(c).Intercept(b).Intercept(a)\". Note that in this case, the last interceptor added will be the first to take control. Intercept(ServerServiceDefinition, Interceptor[]) Returns a ServerServiceDefinition instance that intercepts incoming calls to the underlying service handler through the given interceptors. Declaration public static ServerServiceDefinition Intercept(this ServerServiceDefinition serverServiceDefinition, params Interceptor[] interceptors) Parameters Type Name Description ServerServiceDefinition serverServiceDefinition The ServerServiceDefinition instance to register interceptors on. Interceptor [] interceptors An array of interceptors to intercept the incoming invocations with. Control is passed to the interceptors in the order specified. Returns Type Description ServerServiceDefinition Remarks Multiple interceptors can be added on top of each other by calling \"serverServiceDefinition.Intercept(a, b, c)\". The order of invocation will be \"a\", \"b\", and then \"c\". Interceptors can be later added to an existing intercepted service definition, effectively building a chain like \"serverServiceDefinition.Intercept(c).Intercept(b).Intercept(a)\". Note that in this case, the last interceptor added will be the first to take control."
  },
  "api/Grpc.Core.Logging.LogLevel.html": {
    "href": "api/Grpc.Core.Logging.LogLevel.html",
    "title": "Enum LogLevel | gRPC C#",
    "keywords": "Enum LogLevel Standard logging levels. Namespace : Grpc.Core.Logging Assembly : Grpc.Core.dll Syntax public enum LogLevel Fields Name Description Debug Debug severity. Error Error severity. Info Info severity. Off Logging is off. Warning Warning severity."
  },
  "api/Grpc.Core.Marshaller-1.html": {
    "href": "api/Grpc.Core.Marshaller-1.html",
    "title": "Class Marshaller<T> | gRPC C#",
    "keywords": "Class Marshaller<T> Encapsulates the logic for serializing and deserializing messages. Inheritance System.Object Marshaller<T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public class Marshaller<T> Type Parameters Name Description T Constructors Marshaller(Action<T, SerializationContext>, Func<DeserializationContext, T>) Initializes a new marshaller from serialize/deserialize fuctions that can access serialization and deserialization context. Compared to the simple serializer/deserializer functions, using the contextual version provides more flexibility and can lead to increased efficiency (and better performance). Note: This constructor is part of an experimental API that can change or be removed without any prior notice. Declaration public Marshaller(Action<T, SerializationContext> serializer, Func<DeserializationContext, T> deserializer) Parameters Type Name Description System.Action <T, SerializationContext > serializer Function that will be used to serialize messages. System.Func < DeserializationContext , T> deserializer Function that will be used to deserialize messages. Marshaller(Func<T, Byte[]>, Func<Byte[], T>) Initializes a new marshaller from simple serialize/deserialize functions. Declaration public Marshaller(Func<T, byte[]> serializer, Func<byte[], T> deserializer) Parameters Type Name Description System.Func <T, System.Byte []> serializer Function that will be used to serialize messages. System.Func < System.Byte [], T> deserializer Function that will be used to deserialize messages. Properties ContextualDeserializer Gets the serializer function. Note: experimental API that can change or be removed without any prior notice. Declaration public Func<DeserializationContext, T> ContextualDeserializer { get; } Property Value Type Description System.Func < DeserializationContext , T> ContextualSerializer Gets the serializer function. Note: experimental API that can change or be removed without any prior notice. Declaration public Action<T, SerializationContext> ContextualSerializer { get; } Property Value Type Description System.Action <T, SerializationContext > Deserializer Gets the deserializer function. Declaration public Func<byte[], T> Deserializer { get; } Property Value Type Description System.Func < System.Byte [], T> Serializer Gets the serializer function. Declaration public Func<T, byte[]> Serializer { get; } Property Value Type Description System.Func <T, System.Byte []>"
  },
  "api/Grpc.Core.Utils.TaskUtils.html": {
    "href": "api/Grpc.Core.Utils.TaskUtils.html",
    "title": "Class TaskUtils | gRPC C#",
    "keywords": "Class TaskUtils Utility methods for task parallel library. Inheritance System.Object TaskUtils Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core.Utils Assembly : Grpc.Core.dll Syntax public static class TaskUtils Properties CompletedTask Framework independent equivalent of Task.CompletedTask . Declaration public static Task CompletedTask { get; } Property Value Type Description System.Threading.Tasks.Task"
  },
  "api/Grpc.Core.WriteFlags.html": {
    "href": "api/Grpc.Core.WriteFlags.html",
    "title": "Enum WriteFlags | gRPC C#",
    "keywords": "Enum WriteFlags Flags for write operations. Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax [Flags] public enum WriteFlags Fields Name Description BufferHint Hint that the write may be buffered and need not go out on the wire immediately. gRPC is free to buffer the message until the next non-buffered write, or until write stream completion, but it need not buffer completely or at all. NoCompress Force compression to be disabled for a particular write."
  },
  "api/Grpc.Core.ServerCredentials.html": {
    "href": "api/Grpc.Core.ServerCredentials.html",
    "title": "Class ServerCredentials | gRPC C#",
    "keywords": "Class ServerCredentials Server side credentials. Inheritance System.Object ServerCredentials SslServerCredentials Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.dll Syntax public abstract class ServerCredentials Properties Insecure Returns instance of credential that provides no security and will result in creating an unsecure server port with no encryption whatsoever. Declaration public static ServerCredentials Insecure { get; } Property Value Type Description ServerCredentials"
  },
  "api/Grpc.Core.Interceptors.Interceptor.html": {
    "href": "api/Grpc.Core.Interceptors.Interceptor.html",
    "title": "Class Interceptor | gRPC C#",
    "keywords": "Class Interceptor Serves as the base class for gRPC interceptors. Inheritance System.Object Interceptor Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core.Interceptors Assembly : Grpc.Core.Api.dll Syntax public abstract class Interceptor Methods AsyncClientStreamingCall<TRequest, TResponse>(ClientInterceptorContext<TRequest, TResponse>, Interceptor.AsyncClientStreamingCallContinuation<TRequest, TResponse>) Intercepts an asynchronous invocation of a client streaming call. Declaration public virtual AsyncClientStreamingCall<TRequest, TResponse> AsyncClientStreamingCall<TRequest, TResponse>(ClientInterceptorContext<TRequest, TResponse> context, Interceptor.AsyncClientStreamingCallContinuation<TRequest, TResponse> continuation) where TRequest : class where TResponse : class Parameters Type Name Description ClientInterceptorContext <TRequest, TResponse> context The ClientInterceptorContext<TRequest, TResponse> associated with the current invocation. Interceptor.AsyncClientStreamingCallContinuation <TRequest, TResponse> continuation The callback that continues the invocation process. This can be invoked zero or more times by the interceptor. The interceptor can invoke the continuation passing the given context argument, or substitute as it sees fit. Returns Type Description AsyncClientStreamingCall <TRequest, TResponse> An instance of AsyncClientStreamingCall<TRequest, TResponse> representing an asynchronous client-streaming invocation. The interceptor can simply return the return value of the continuation delegate passed to it intact, or construct its own substitute as it sees fit. Type Parameters Name Description TRequest TResponse AsyncDuplexStreamingCall<TRequest, TResponse>(ClientInterceptorContext<TRequest, TResponse>, Interceptor.AsyncDuplexStreamingCallContinuation<TRequest, TResponse>) Intercepts an asynchronous invocation of a duplex streaming call. Declaration public virtual AsyncDuplexStreamingCall<TRequest, TResponse> AsyncDuplexStreamingCall<TRequest, TResponse>(ClientInterceptorContext<TRequest, TResponse> context, Interceptor.AsyncDuplexStreamingCallContinuation<TRequest, TResponse> continuation) where TRequest : class where TResponse : class Parameters Type Name Description ClientInterceptorContext <TRequest, TResponse> context The ClientInterceptorContext<TRequest, TResponse> associated with the current invocation. Interceptor.AsyncDuplexStreamingCallContinuation <TRequest, TResponse> continuation The callback that continues the invocation process. This can be invoked zero or more times by the interceptor. The interceptor can invoke the continuation passing the given context argument, or substitute as it sees fit. Returns Type Description AsyncDuplexStreamingCall <TRequest, TResponse> An instance of AsyncDuplexStreamingCall<TRequest, TResponse> representing an asynchronous duplex-streaming invocation. The interceptor can simply return the return value of the continuation delegate passed to it intact, or construct its own substitute as it sees fit. Type Parameters Name Description TRequest TResponse AsyncServerStreamingCall<TRequest, TResponse>(TRequest, ClientInterceptorContext<TRequest, TResponse>, Interceptor.AsyncServerStreamingCallContinuation<TRequest, TResponse>) Intercepts an asynchronous invocation of a streaming remote call. Declaration public virtual AsyncServerStreamingCall<TResponse> AsyncServerStreamingCall<TRequest, TResponse>(TRequest request, ClientInterceptorContext<TRequest, TResponse> context, Interceptor.AsyncServerStreamingCallContinuation<TRequest, TResponse> continuation) where TRequest : class where TResponse : class Parameters Type Name Description TRequest request The request message of the invocation. ClientInterceptorContext <TRequest, TResponse> context The ClientInterceptorContext<TRequest, TResponse> associated with the current invocation. Interceptor.AsyncServerStreamingCallContinuation <TRequest, TResponse> continuation The callback that continues the invocation process. This can be invoked zero or more times by the interceptor. The interceptor can invoke the continuation passing the given request value and context arguments, or substitute them as it sees fit. Returns Type Description AsyncServerStreamingCall <TResponse> An instance of AsyncServerStreamingCall<TResponse> representing an asynchronous server-streaming invocation. The interceptor can simply return the return value of the continuation delegate passed to it intact, or construct its own substitute as it sees fit. Type Parameters Name Description TRequest TResponse AsyncUnaryCall<TRequest, TResponse>(TRequest, ClientInterceptorContext<TRequest, TResponse>, Interceptor.AsyncUnaryCallContinuation<TRequest, TResponse>) Intercepts an asynchronous invocation of a simple remote call. Declaration public virtual AsyncUnaryCall<TResponse> AsyncUnaryCall<TRequest, TResponse>(TRequest request, ClientInterceptorContext<TRequest, TResponse> context, Interceptor.AsyncUnaryCallContinuation<TRequest, TResponse> continuation) where TRequest : class where TResponse : class Parameters Type Name Description TRequest request The request message of the invocation. ClientInterceptorContext <TRequest, TResponse> context The ClientInterceptorContext<TRequest, TResponse> associated with the current invocation. Interceptor.AsyncUnaryCallContinuation <TRequest, TResponse> continuation The callback that continues the invocation process. This can be invoked zero or more times by the interceptor. The interceptor can invoke the continuation passing the given request value and context arguments, or substitute them as it sees fit. Returns Type Description AsyncUnaryCall <TResponse> An instance of AsyncUnaryCall<TResponse> representing an asynchronous unary invocation. The interceptor can simply return the return value of the continuation delegate passed to it intact, or construct its own substitute as it sees fit. Type Parameters Name Description TRequest TResponse BlockingUnaryCall<TRequest, TResponse>(TRequest, ClientInterceptorContext<TRequest, TResponse>, Interceptor.BlockingUnaryCallContinuation<TRequest, TResponse>) Intercepts a blocking invocation of a simple remote call. Declaration public virtual TResponse BlockingUnaryCall<TRequest, TResponse>(TRequest request, ClientInterceptorContext<TRequest, TResponse> context, Interceptor.BlockingUnaryCallContinuation<TRequest, TResponse> continuation) where TRequest : class where TResponse : class Parameters Type Name Description TRequest request The request message of the invocation. ClientInterceptorContext <TRequest, TResponse> context The ClientInterceptorContext<TRequest, TResponse> associated with the current invocation. Interceptor.BlockingUnaryCallContinuation <TRequest, TResponse> continuation The callback that continues the invocation process. This can be invoked zero or more times by the interceptor. The interceptor can invoke the continuation passing the given request value and context arguments, or substitute them as it sees fit. Returns Type Description TResponse The response message of the current invocation. The interceptor can simply return the return value of the continuation delegate passed to it intact, or an arbitrary value as it sees fit. Type Parameters Name Description TRequest TResponse ClientStreamingServerHandler<TRequest, TResponse>(IAsyncStreamReader<TRequest>, ServerCallContext, ClientStreamingServerMethod<TRequest, TResponse>) Server-side handler for intercepting client streaming call. Declaration public virtual Task<TResponse> ClientStreamingServerHandler<TRequest, TResponse>(IAsyncStreamReader<TRequest> requestStream, ServerCallContext context, ClientStreamingServerMethod<TRequest, TResponse> continuation) where TRequest : class where TResponse : class Parameters Type Name Description IAsyncStreamReader <TRequest> requestStream The request stream of the incoming invocation. ServerCallContext context An instance of ServerCallContext representing the context of the invocation. ClientStreamingServerMethod <TRequest, TResponse> continuation A delegate that asynchronously proceeds with the invocation, calling the next interceptor in the chain, or the service request handler, in case of the last interceptor and return the response value of the RPC. The interceptor can choose to call it zero or more times at its discretion. Returns Type Description System.Threading.Tasks.Task <TResponse> A future representing the response value of the RPC. The interceptor can simply return the return value from the continuation intact, or an arbitrary response value as it sees fit. The interceptor has the ability to wrap or substitute the request stream when calling the continuation. Type Parameters Name Description TRequest Request message type for this method. TResponse Response message type for this method. DuplexStreamingServerHandler<TRequest, TResponse>(IAsyncStreamReader<TRequest>, IServerStreamWriter<TResponse>, ServerCallContext, DuplexStreamingServerMethod<TRequest, TResponse>) Server-side handler for intercepting bidirectional streaming calls. Declaration public virtual Task DuplexStreamingServerHandler<TRequest, TResponse>(IAsyncStreamReader<TRequest> requestStream, IServerStreamWriter<TResponse> responseStream, ServerCallContext context, DuplexStreamingServerMethod<TRequest, TResponse> continuation) where TRequest : class where TResponse : class Parameters Type Name Description IAsyncStreamReader <TRequest> requestStream The request stream of the incoming invocation. IServerStreamWriter <TResponse> responseStream The response stream of the incoming invocation. ServerCallContext context An instance of ServerCallContext representing the context of the invocation. DuplexStreamingServerMethod <TRequest, TResponse> continuation A delegate that asynchronously proceeds with the invocation, calling the next interceptor in the chain, or the service request handler, in case of the last interceptor and the interceptor can choose to call it zero or more times at its discretion. The interceptor has the ability to wrap or substitute the request and response streams when calling the continuation. Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TRequest Request message type for this method. TResponse Response message type for this method. ServerStreamingServerHandler<TRequest, TResponse>(TRequest, IServerStreamWriter<TResponse>, ServerCallContext, ServerStreamingServerMethod<TRequest, TResponse>) Server-side handler for intercepting server streaming call. Declaration public virtual Task ServerStreamingServerHandler<TRequest, TResponse>(TRequest request, IServerStreamWriter<TResponse> responseStream, ServerCallContext context, ServerStreamingServerMethod<TRequest, TResponse> continuation) where TRequest : class where TResponse : class Parameters Type Name Description TRequest request The request value of the incoming invocation. IServerStreamWriter <TResponse> responseStream The response stream of the incoming invocation. ServerCallContext context An instance of ServerCallContext representing the context of the invocation. ServerStreamingServerMethod <TRequest, TResponse> continuation A delegate that asynchronously proceeds with the invocation, calling the next interceptor in the chain, or the service request handler, in case of the last interceptor and the interceptor can choose to call it zero or more times at its discretion. The interceptor has the ability to wrap or substitute the request value and the response stream when calling the continuation. Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TRequest Request message type for this method. TResponse Response message type for this method. UnaryServerHandler<TRequest, TResponse>(TRequest, ServerCallContext, UnaryServerMethod<TRequest, TResponse>) Server-side handler for intercepting and incoming unary call. Declaration public virtual Task<TResponse> UnaryServerHandler<TRequest, TResponse>(TRequest request, ServerCallContext context, UnaryServerMethod<TRequest, TResponse> continuation) where TRequest : class where TResponse : class Parameters Type Name Description TRequest request The request value of the incoming invocation. ServerCallContext context An instance of ServerCallContext representing the context of the invocation. UnaryServerMethod <TRequest, TResponse> continuation A delegate that asynchronously proceeds with the invocation, calling the next interceptor in the chain, or the service request handler, in case of the last interceptor and return the response value of the RPC. The interceptor can choose to call it zero or more times at its discretion. Returns Type Description System.Threading.Tasks.Task <TResponse> A future representing the response value of the RPC. The interceptor can simply return the return value from the continuation intact, or an arbitrary response value as it sees fit. Type Parameters Name Description TRequest Request message type for this method. TResponse Response message type for this method."
  },
  "api/Grpc.Health.V1.Health.html": {
    "href": "api/Grpc.Health.V1.Health.html",
    "title": "Class Health | gRPC C#",
    "keywords": "Class Health Inheritance System.Object Health Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Health.V1 Assembly : Grpc.HealthCheck.dll Syntax public static class Health Properties Descriptor Service descriptor Declaration public static Google.Protobuf.Reflection.ServiceDescriptor Descriptor { get; } Property Value Type Description Google.Protobuf.Reflection.ServiceDescriptor Methods BindService(ServiceBinderBase, Health.HealthBase) Register service method with a service binder with or without implementation. Useful when customizing the service binding logic. Note: this method is part of an experimental API that can change or be removed without any prior notice. Declaration public static void BindService(ServiceBinderBase serviceBinder, Health.HealthBase serviceImpl) Parameters Type Name Description ServiceBinderBase serviceBinder Service methods will be bound by calling AddMethod on this object. Health.HealthBase serviceImpl An object implementing the server-side handling logic. BindService(Health.HealthBase) Creates service definition that can be registered with a server Declaration public static ServerServiceDefinition BindService(Health.HealthBase serviceImpl) Parameters Type Name Description Health.HealthBase serviceImpl An object implementing the server-side handling logic. Returns Type Description ServerServiceDefinition"
  },
  "api/Grpc.Core.Server.html": {
    "href": "api/Grpc.Core.Server.html",
    "title": "Class Server | gRPC C#",
    "keywords": "Class Server gRPC server. A single server can serve an arbitrary number of services and can listen on more than one port. Inheritance System.Object Server Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.dll Syntax public class Server Constructors Server() Creates a new server. Declaration public Server() Server(IEnumerable<ChannelOption>) Creates a new server. Declaration public Server(IEnumerable<ChannelOption> options) Parameters Type Name Description System.Collections.Generic.IEnumerable < ChannelOption > options Channel options. Properties Ports Ports on which the server will listen once started. Register a port with this server by adding its definition to this collection. Declaration public Server.ServerPortCollection Ports { get; } Property Value Type Description Server.ServerPortCollection RequestCallTokensPerCompletionQueue Experimental API. Might anytime change without prior notice. Number or calls requested via grpc_server_request_call at any given time for each completion queue. Declaration public int RequestCallTokensPerCompletionQueue { get; set; } Property Value Type Description System.Int32 Services Services that will be exported by the server once started. Register a service with this server by adding its definition to this collection. Declaration public Server.ServiceDefinitionCollection Services { get; } Property Value Type Description Server.ServiceDefinitionCollection ShutdownTask To allow awaiting termination of the server. Declaration public Task ShutdownTask { get; } Property Value Type Description System.Threading.Tasks.Task Methods KillAsync() Requests server shutdown while cancelling all the in-progress calls. The returned task finishes when shutdown procedure is complete. Declaration public Task KillAsync() Returns Type Description System.Threading.Tasks.Task Remarks It is strongly recommended to shutdown all previously created servers before exiting from the process. ShutdownAsync() Requests server shutdown and when there are no more calls being serviced, cleans up used resources. The returned task finishes when shutdown procedure is complete. Declaration public Task ShutdownAsync() Returns Type Description System.Threading.Tasks.Task Remarks It is strongly recommended to shutdown all previously created servers before exiting from the process. Start() Starts the server. Throws IOException if not all ports have been bound successfully (see Ports.Add method). Even if some of that ports haven't been bound, the server will still serve normally on all ports that have been bound successfully (and the user is expected to shutdown the server by invoking ShutdownAsync or KillAsync ). Declaration public void Start()"
  },
  "api/Grpc.Core.AsyncClientStreamingCall-2.html": {
    "href": "api/Grpc.Core.AsyncClientStreamingCall-2.html",
    "title": "Class AsyncClientStreamingCall<TRequest, TResponse> | gRPC C#",
    "keywords": "Class AsyncClientStreamingCall<TRequest, TResponse> Return type for client streaming calls. Inheritance System.Object AsyncClientStreamingCall<TRequest, TResponse> Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public sealed class AsyncClientStreamingCall<TRequest, TResponse> : IDisposable Type Parameters Name Description TRequest Request message type for this call. TResponse Response message type for this call. Constructors AsyncClientStreamingCall(IClientStreamWriter<TRequest>, Task<TResponse>, Func<Object, Task<Metadata>>, Func<Object, Status>, Func<Object, Metadata>, Action<Object>, Object) Creates a new AsyncClientStreamingCall object with the specified properties. Declaration public AsyncClientStreamingCall(IClientStreamWriter<TRequest> requestStream, Task<TResponse> responseAsync, Func<object, Task<Metadata>> responseHeadersAsync, Func<object, Status> getStatusFunc, Func<object, Metadata> getTrailersFunc, Action<object> disposeAction, object state) Parameters Type Name Description IClientStreamWriter <TRequest> requestStream Stream of request values. System.Threading.Tasks.Task <TResponse> responseAsync The response of the asynchronous call. System.Func < System.Object , System.Threading.Tasks.Task < Metadata >> responseHeadersAsync Response headers of the asynchronous call. System.Func < System.Object , Status > getStatusFunc Delegate returning the status of the call. System.Func < System.Object , Metadata > getTrailersFunc Delegate returning the trailing metadata of the call. System.Action < System.Object > disposeAction Delegate to invoke when Dispose is called on the call object. System.Object state State object for use with the callback parameters. AsyncClientStreamingCall(IClientStreamWriter<TRequest>, Task<TResponse>, Task<Metadata>, Func<Status>, Func<Metadata>, Action) Creates a new AsyncClientStreamingCall object with the specified properties. Declaration public AsyncClientStreamingCall(IClientStreamWriter<TRequest> requestStream, Task<TResponse> responseAsync, Task<Metadata> responseHeadersAsync, Func<Status> getStatusFunc, Func<Metadata> getTrailersFunc, Action disposeAction) Parameters Type Name Description IClientStreamWriter <TRequest> requestStream Stream of request values. System.Threading.Tasks.Task <TResponse> responseAsync The response of the asynchronous call. System.Threading.Tasks.Task < Metadata > responseHeadersAsync Response headers of the asynchronous call. System.Func < Status > getStatusFunc Delegate returning the status of the call. System.Func < Metadata > getTrailersFunc Delegate returning the trailing metadata of the call. System.Action disposeAction Delegate to invoke when Dispose is called on the call object. Properties RequestStream Async stream to send streaming requests. Declaration public IClientStreamWriter<TRequest> RequestStream { get; } Property Value Type Description IClientStreamWriter <TRequest> ResponseAsync Asynchronous call result. Declaration public Task<TResponse> ResponseAsync { get; } Property Value Type Description System.Threading.Tasks.Task <TResponse> ResponseHeadersAsync Asynchronous access to response headers. Declaration public Task<Metadata> ResponseHeadersAsync { get; } Property Value Type Description System.Threading.Tasks.Task < Metadata > Methods ConfigureAwait(Boolean) Configures an awaiter used to await this AsyncClientStreamingCall<TRequest, TResponse> . Declaration public ConfiguredTaskAwaitable<TResponse> ConfigureAwait(bool continueOnCapturedContext) Parameters Type Name Description System.Boolean continueOnCapturedContext true to attempt to marshal the continuation back to the original context captured; otherwise, false. Returns Type Description System.Runtime.CompilerServices.ConfiguredTaskAwaitable <TResponse> An object used to await this task. Dispose() Provides means to cleanup after the call. If the call has already finished normally (request stream has been completed and call result has been received), doesn't do anything. Otherwise, requests cancellation of the call which should terminate all pending async operations associated with the call. As a result, all resources being used by the call should be released eventually. Declaration public void Dispose() Remarks Normally, there is no need for you to dispose the call unless you want to utilize the \"Cancel\" semantics of invoking Dispose . GetAwaiter() Gets an awaiter used to await this AsyncClientStreamingCall<TRequest, TResponse> . Declaration public TaskAwaiter<TResponse> GetAwaiter() Returns Type Description System.Runtime.CompilerServices.TaskAwaiter <TResponse> An awaiter instance. Remarks This method is intended for compiler use rather than use directly in code. GetStatus() Gets the call status if the call has already finished. Throws InvalidOperationException otherwise. Declaration public Status GetStatus() Returns Type Description Status GetTrailers() Gets the call trailing metadata if the call has already finished. Throws InvalidOperationException otherwise. Declaration public Metadata GetTrailers() Returns Type Description Metadata Implements System.IDisposable"
  },
  "api/Grpc.Core.VerifyPeerContext.html": {
    "href": "api/Grpc.Core.VerifyPeerContext.html",
    "title": "Class VerifyPeerContext | gRPC C#",
    "keywords": "Class VerifyPeerContext Verification context for VerifyPeerCallback. Note: experimental API that can change or be removed without any prior notice. Inheritance System.Object VerifyPeerContext Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public class VerifyPeerContext Properties PeerPem The PEM encoded certificate of the peer. Declaration public string PeerPem { get; } Property Value Type Description System.String TargetName The target name of the peer. Declaration public string TargetName { get; } Property Value Type Description System.String"
  },
  "api/Grpc.Core.Metadata.Entry.html": {
    "href": "api/Grpc.Core.Metadata.Entry.html",
    "title": "Class Metadata.Entry | gRPC C#",
    "keywords": "Class Metadata.Entry Metadata entry Inheritance System.Object Metadata.Entry Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public class Entry Constructors Entry(String, Byte[]) Initializes a new instance of the Metadata.Entry struct with a binary value. Declaration public Entry(string key, byte[] valueBytes) Parameters Type Name Description System.String key Metadata key. Gets converted to lowercase. Needs to have suffix indicating a binary valued metadata entry. Can only contain lowercase alphanumeric characters, underscores, hyphens and dots. System.Byte [] valueBytes Value bytes. Entry(String, String) Initializes a new instance of the Metadata.Entry struct with an ASCII value. Declaration public Entry(string key, string value) Parameters Type Name Description System.String key Metadata key. Gets converted to lowercase. Must not use suffix indicating a binary valued metadata entry. Can only contain lowercase alphanumeric characters, underscores, hyphens and dots. System.String value Value string. Only ASCII characters are allowed. Properties IsBinary Returns true if this entry is a binary-value entry. Declaration public bool IsBinary { get; } Property Value Type Description System.Boolean Key Gets the metadata entry key. Declaration public string Key { get; } Property Value Type Description System.String Value Gets the string value of this metadata entry. If the metadata entry is binary then an exception is thrown. Declaration public string Value { get; } Property Value Type Description System.String ValueBytes Gets the binary value of this metadata entry. If the metadata entry is not binary the string value will be returned as ASCII encoded bytes. Declaration public byte[] ValueBytes { get; } Property Value Type Description System.Byte [] Methods ToString() Returns a System.String that represents the current Metadata.Entry . Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/Grpc.Health.V1.HealthCheckRequest.html": {
    "href": "api/Grpc.Health.V1.HealthCheckRequest.html",
    "title": "Class HealthCheckRequest | gRPC C#",
    "keywords": "Class HealthCheckRequest Inheritance Google.Protobuf.IMessage < HealthCheckRequest > HealthCheckRequest Implements Google.Protobuf.IBufferMessage Namespace : Grpc.Health.V1 Assembly : Grpc.HealthCheck.dll Syntax public sealed class HealthCheckRequest : Google.Protobuf.IMessage<HealthCheckRequest>, Google.Protobuf.IBufferMessage Constructors HealthCheckRequest() Declaration public HealthCheckRequest() HealthCheckRequest(HealthCheckRequest) Declaration public HealthCheckRequest(HealthCheckRequest other) Parameters Type Name Description HealthCheckRequest other Fields ServiceFieldNumber Field number for the \"service\" field. Declaration public const int ServiceFieldNumber = 1 Field Value Type Description System.Int32 Properties Descriptor Declaration public static Google.Protobuf.Reflection.MessageDescriptor Descriptor { get; } Property Value Type Description Google.Protobuf.Reflection.MessageDescriptor Parser Declaration public static Google.Protobuf.MessageParser<HealthCheckRequest> Parser { get; } Property Value Type Description Google.Protobuf.MessageParser < HealthCheckRequest > Service Declaration public string Service { get; set; } Property Value Type Description System.String Methods CalculateSize() Declaration public int CalculateSize() Returns Type Description System.Int32 Clone() Declaration public HealthCheckRequest Clone() Returns Type Description HealthCheckRequest Equals(HealthCheckRequest) Declaration public bool Equals(HealthCheckRequest other) Parameters Type Name Description HealthCheckRequest other Returns Type Description System.Boolean Equals(Object) Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 MergeFrom(Google.Protobuf.CodedInputStream) Declaration public void MergeFrom(Google.Protobuf.CodedInputStream input) Parameters Type Name Description Google.Protobuf.CodedInputStream input MergeFrom(HealthCheckRequest) Declaration public void MergeFrom(HealthCheckRequest other) Parameters Type Name Description HealthCheckRequest other ToString() Declaration public override string ToString() Returns Type Description System.String WriteTo(Google.Protobuf.CodedOutputStream) Declaration public void WriteTo(Google.Protobuf.CodedOutputStream output) Parameters Type Name Description Google.Protobuf.CodedOutputStream output Implements Google.Protobuf.IBufferMessage"
  },
  "api/Grpc.Core.BindServiceMethodAttribute.html": {
    "href": "api/Grpc.Core.BindServiceMethodAttribute.html",
    "title": "Class BindServiceMethodAttribute | gRPC C#",
    "keywords": "Class BindServiceMethodAttribute Specifies the location of the service bind method for a gRPC service. The bind method is typically generated code and is used to register a service's methods with the server on startup. The bind method signature takes a ServiceBinderBase and an optional instance of the service base class, e.g. static void BindService(ServiceBinderBase, GreeterService) . Inheritance System.Object System.Attribute BindServiceMethodAttribute Implements System.Runtime.InteropServices._Attribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = true)] public class BindServiceMethodAttribute : Attribute, _Attribute Constructors BindServiceMethodAttribute(Type, String) Initializes a new instance of the BindServiceMethodAttribute class. Declaration public BindServiceMethodAttribute(Type bindType, string bindMethodName) Parameters Type Name Description System.Type bindType The type the service bind method is defined on. System.String bindMethodName The name of the service bind method. Properties BindMethodName Gets the name of the service bind method. Declaration public string BindMethodName { get; } Property Value Type Description System.String BindType Gets the type the service bind method is defined on. Declaration public Type BindType { get; } Property Value Type Description System.Type Implements System.Runtime.InteropServices._Attribute"
  },
  "api/Grpc.Core.Logging.TextWriterLogger.html": {
    "href": "api/Grpc.Core.Logging.TextWriterLogger.html",
    "title": "Class TextWriterLogger | gRPC C#",
    "keywords": "Class TextWriterLogger Logger that logs to an arbitrary System.IO.TextWriter . Inheritance System.Object TextWriterLogger ConsoleLogger Implements ILogger Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core.Logging Assembly : Grpc.Core.dll Syntax public class TextWriterLogger : ILogger Constructors TextWriterLogger(Func<TextWriter>) Creates a console logger not associated to any specific type and writes to a System.IO.TextWriter obtained from given provider. User is responsible for providing an instance of TextWriter that is thread-safe. Declaration public TextWriterLogger(Func<TextWriter> textWriterProvider) Parameters Type Name Description System.Func < System.IO.TextWriter > textWriterProvider TextWriterLogger(Func<TextWriter>, Type) Creates a console logger that logs messsage specific for given type. Declaration protected TextWriterLogger(Func<TextWriter> textWriterProvider, Type forType) Parameters Type Name Description System.Func < System.IO.TextWriter > textWriterProvider System.Type forType TextWriterLogger(TextWriter) Creates a console logger not associated to any specific type and writes to given System.IO.TextWriter . User is responsible for providing an instance of TextWriter that is thread-safe. Declaration public TextWriterLogger(TextWriter textWriter) Parameters Type Name Description System.IO.TextWriter textWriter Properties AssociatedType Gets the type associated with this logger. Declaration protected Type AssociatedType { get; } Property Value Type Description System.Type Methods Debug(String) Logs a message with severity Debug. Declaration public void Debug(string message) Parameters Type Name Description System.String message Debug(String, Object[]) Logs a formatted message with severity Debug. Declaration public void Debug(string format, params object[] formatArgs) Parameters Type Name Description System.String format System.Object [] formatArgs Error(Exception, String) Logs a message and an associated exception with severity Error. Declaration public void Error(Exception exception, string message) Parameters Type Name Description System.Exception exception System.String message Error(String) Logs a message with severity Error. Declaration public void Error(string message) Parameters Type Name Description System.String message Error(String, Object[]) Logs a formatted message with severity Error. Declaration public void Error(string format, params object[] formatArgs) Parameters Type Name Description System.String format System.Object [] formatArgs ForType<T>() Returns a logger associated with the specified type. Declaration public virtual ILogger ForType<T>() Returns Type Description ILogger Type Parameters Name Description T Info(String) Logs a message with severity Info. Declaration public void Info(string message) Parameters Type Name Description System.String message Info(String, Object[]) Logs a formatted message with severity Info. Declaration public void Info(string format, params object[] formatArgs) Parameters Type Name Description System.String format System.Object [] formatArgs Warning(Exception, String) Logs a message and an associated exception with severity Warning. Declaration public void Warning(Exception exception, string message) Parameters Type Name Description System.Exception exception System.String message Warning(String) Logs a message with severity Warning. Declaration public void Warning(string message) Parameters Type Name Description System.String message Warning(String, Object[]) Logs a formatted message with severity Warning. Declaration public void Warning(string format, params object[] formatArgs) Parameters Type Name Description System.String format System.Object [] formatArgs Implements ILogger"
  },
  "api/Grpc.Core.AsyncStreamReaderExtensions.html": {
    "href": "api/Grpc.Core.AsyncStreamReaderExtensions.html",
    "title": "Class AsyncStreamReaderExtensions | gRPC C#",
    "keywords": "Class AsyncStreamReaderExtensions Extension methods for IAsyncStreamReader<T> . Inheritance System.Object AsyncStreamReaderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public static class AsyncStreamReaderExtensions Methods MoveNext<T>(IAsyncStreamReader<T>) Advances the stream reader to the next element in the sequence, returning the result asynchronously. Declaration public static Task<bool> MoveNext<T>(this IAsyncStreamReader<T> streamReader) where T : class Parameters Type Name Description IAsyncStreamReader <T> streamReader The stream reader. Returns Type Description System.Threading.Tasks.Task < System.Boolean > Task containing the result of the operation: true if the reader was successfully advanced to the next element; false if the reader has passed the end of the sequence. Type Parameters Name Description T The message type."
  },
  "api/Grpc.Core.Marshallers.html": {
    "href": "api/Grpc.Core.Marshallers.html",
    "title": "Class Marshallers | gRPC C#",
    "keywords": "Class Marshallers Utilities for creating marshallers. Inheritance System.Object Marshallers Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public static class Marshallers Properties StringMarshaller Returns a marshaller for string type. This is useful for testing. Declaration public static Marshaller<string> StringMarshaller { get; } Property Value Type Description Marshaller < System.String > Methods Create<T>(Action<T, SerializationContext>, Func<DeserializationContext, T>) Creates a marshaller from specified contextual serializer and deserializer. Note: This method is part of an experimental API that can change or be removed without any prior notice. Declaration public static Marshaller<T> Create<T>(Action<T, SerializationContext> serializer, Func<DeserializationContext, T> deserializer) Parameters Type Name Description System.Action <T, SerializationContext > serializer System.Func < DeserializationContext , T> deserializer Returns Type Description Marshaller <T> Type Parameters Name Description T Create<T>(Func<T, Byte[]>, Func<Byte[], T>) Creates a marshaller from specified serializer and deserializer. Declaration public static Marshaller<T> Create<T>(Func<T, byte[]> serializer, Func<byte[], T> deserializer) Parameters Type Name Description System.Func <T, System.Byte []> serializer System.Func < System.Byte [], T> deserializer Returns Type Description Marshaller <T> Type Parameters Name Description T"
  },
  "api/Grpc.Core.Logging.ILogger.html": {
    "href": "api/Grpc.Core.Logging.ILogger.html",
    "title": "Interface ILogger | gRPC C#",
    "keywords": "Interface ILogger For logging messages. Namespace : Grpc.Core.Logging Assembly : Grpc.Core.dll Syntax public interface ILogger Methods Debug(String) Logs a message with severity Debug. Declaration void Debug(string message) Parameters Type Name Description System.String message Debug(String, Object[]) Logs a formatted message with severity Debug. Declaration void Debug(string format, params object[] formatArgs) Parameters Type Name Description System.String format System.Object [] formatArgs Error(Exception, String) Logs a message and an associated exception with severity Error. Declaration void Error(Exception exception, string message) Parameters Type Name Description System.Exception exception System.String message Error(String) Logs a message with severity Error. Declaration void Error(string message) Parameters Type Name Description System.String message Error(String, Object[]) Logs a formatted message with severity Error. Declaration void Error(string format, params object[] formatArgs) Parameters Type Name Description System.String format System.Object [] formatArgs ForType<T>() Returns a logger associated with the specified type. Declaration ILogger ForType<T>() Returns Type Description ILogger Type Parameters Name Description T Info(String) Logs a message with severity Info. Declaration void Info(string message) Parameters Type Name Description System.String message Info(String, Object[]) Logs a formatted message with severity Info. Declaration void Info(string format, params object[] formatArgs) Parameters Type Name Description System.String format System.Object [] formatArgs Warning(Exception, String) Logs a message and an associated exception with severity Warning. Declaration void Warning(Exception exception, string message) Parameters Type Name Description System.Exception exception System.String message Warning(String) Logs a message with severity Warning. Declaration void Warning(string message) Parameters Type Name Description System.String message Warning(String, Object[]) Logs a formatted message with severity Warning. Declaration void Warning(string format, params object[] formatArgs) Parameters Type Name Description System.String format System.Object [] formatArgs"
  },
  "api/Grpc.Core.Server.ServiceDefinitionCollection.html": {
    "href": "api/Grpc.Core.Server.ServiceDefinitionCollection.html",
    "title": "Class Server.ServiceDefinitionCollection | gRPC C#",
    "keywords": "Class Server.ServiceDefinitionCollection Collection of service definitions. Inheritance System.Object Server.ServiceDefinitionCollection Implements System.Collections.Generic.IEnumerable < ServerServiceDefinition > System.Collections.IEnumerable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.dll Syntax public class ServiceDefinitionCollection : IEnumerable<ServerServiceDefinition>, IEnumerable Methods Add(ServerServiceDefinition) Adds a service definition to the server. This is how you register handlers for a service with the server. Only call this before Start(). Declaration public void Add(ServerServiceDefinition serviceDefinition) Parameters Type Name Description ServerServiceDefinition serviceDefinition GetEnumerator() Gets enumerator for this collection. Declaration public IEnumerator<ServerServiceDefinition> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < ServerServiceDefinition > Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Grpc.Core.Testing.TestCalls.html": {
    "href": "api/Grpc.Core.Testing.TestCalls.html",
    "title": "Class TestCalls | gRPC C#",
    "keywords": "Class TestCalls Test doubles for client-side call objects. Inheritance System.Object TestCalls Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core.Testing Assembly : Grpc.Core.Testing.dll Syntax public static class TestCalls Methods AsyncClientStreamingCall<TRequest, TResponse>(IClientStreamWriter<TRequest>, Task<TResponse>, Task<Metadata>, Func<Status>, Func<Metadata>, Action) Creates a test double for AsyncClientStreamingCall . Only for testing. Note: experimental API that can change or be removed without any prior notice. Declaration public static AsyncClientStreamingCall<TRequest, TResponse> AsyncClientStreamingCall<TRequest, TResponse>(IClientStreamWriter<TRequest> requestStream, Task<TResponse> responseAsync, Task<Metadata> responseHeadersAsync, Func<Status> getStatusFunc, Func<Metadata> getTrailersFunc, Action disposeAction) Parameters Type Name Description IClientStreamWriter <TRequest> requestStream System.Threading.Tasks.Task <TResponse> responseAsync System.Threading.Tasks.Task < Metadata > responseHeadersAsync System.Func < Status > getStatusFunc System.Func < Metadata > getTrailersFunc System.Action disposeAction Returns Type Description AsyncClientStreamingCall <TRequest, TResponse> Type Parameters Name Description TRequest TResponse AsyncDuplexStreamingCall<TRequest, TResponse>(IClientStreamWriter<TRequest>, IAsyncStreamReader<TResponse>, Task<Metadata>, Func<Status>, Func<Metadata>, Action) Creates a test double for AsyncDuplexStreamingCall . Only for testing. Note: experimental API that can change or be removed without any prior notice. Declaration public static AsyncDuplexStreamingCall<TRequest, TResponse> AsyncDuplexStreamingCall<TRequest, TResponse>(IClientStreamWriter<TRequest> requestStream, IAsyncStreamReader<TResponse> responseStream, Task<Metadata> responseHeadersAsync, Func<Status> getStatusFunc, Func<Metadata> getTrailersFunc, Action disposeAction) Parameters Type Name Description IClientStreamWriter <TRequest> requestStream IAsyncStreamReader <TResponse> responseStream System.Threading.Tasks.Task < Metadata > responseHeadersAsync System.Func < Status > getStatusFunc System.Func < Metadata > getTrailersFunc System.Action disposeAction Returns Type Description AsyncDuplexStreamingCall <TRequest, TResponse> Type Parameters Name Description TRequest TResponse AsyncServerStreamingCall<TResponse>(IAsyncStreamReader<TResponse>, Task<Metadata>, Func<Status>, Func<Metadata>, Action) Creates a test double for AsyncServerStreamingCall . Only for testing. Note: experimental API that can change or be removed without any prior notice. Declaration public static AsyncServerStreamingCall<TResponse> AsyncServerStreamingCall<TResponse>(IAsyncStreamReader<TResponse> responseStream, Task<Metadata> responseHeadersAsync, Func<Status> getStatusFunc, Func<Metadata> getTrailersFunc, Action disposeAction) Parameters Type Name Description IAsyncStreamReader <TResponse> responseStream System.Threading.Tasks.Task < Metadata > responseHeadersAsync System.Func < Status > getStatusFunc System.Func < Metadata > getTrailersFunc System.Action disposeAction Returns Type Description AsyncServerStreamingCall <TResponse> Type Parameters Name Description TResponse AsyncUnaryCall<TResponse>(Task<TResponse>, Task<Metadata>, Func<Status>, Func<Metadata>, Action) Creates a test double for AsyncUnaryCall . Only for testing. Note: experimental API that can change or be removed without any prior notice. Declaration public static AsyncUnaryCall<TResponse> AsyncUnaryCall<TResponse>(Task<TResponse> responseAsync, Task<Metadata> responseHeadersAsync, Func<Status> getStatusFunc, Func<Metadata> getTrailersFunc, Action disposeAction) Parameters Type Name Description System.Threading.Tasks.Task <TResponse> responseAsync System.Threading.Tasks.Task < Metadata > responseHeadersAsync System.Func < Status > getStatusFunc System.Func < Metadata > getTrailersFunc System.Action disposeAction Returns Type Description AsyncUnaryCall <TResponse> Type Parameters Name Description TResponse"
  },
  "api/Grpc.Core.KeyCertificatePair.html": {
    "href": "api/Grpc.Core.KeyCertificatePair.html",
    "title": "Class KeyCertificatePair | gRPC C#",
    "keywords": "Class KeyCertificatePair Key certificate pair (in PEM encoding). Inheritance System.Object KeyCertificatePair Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public sealed class KeyCertificatePair Constructors KeyCertificatePair(String, String) Creates a new certificate chain - private key pair. Declaration public KeyCertificatePair(string certificateChain, string privateKey) Parameters Type Name Description System.String certificateChain PEM encoded certificate chain. System.String privateKey PEM encoded private key. Properties CertificateChain PEM encoded certificate chain. Declaration public string CertificateChain { get; } Property Value Type Description System.String PrivateKey PEM encoded private key. Declaration public string PrivateKey { get; } Property Value Type Description System.String"
  },
  "api/Grpc.Core.ServerServiceDefinition.html": {
    "href": "api/Grpc.Core.ServerServiceDefinition.html",
    "title": "Class ServerServiceDefinition | gRPC C#",
    "keywords": "Class ServerServiceDefinition Stores mapping of methods to server call handlers. Normally, the ServerServiceDefinition objects will be created by the BindService factory method that is part of the autogenerated code for a protocol buffers service definition. Inheritance System.Object ServerServiceDefinition Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public class ServerServiceDefinition Methods CreateBuilder() Creates a new builder object for ServerServiceDefinition . Declaration public static ServerServiceDefinition.Builder CreateBuilder() Returns Type Description ServerServiceDefinition.Builder The builder object. Extension Methods ServerServiceDefinitionExtensions.Intercept(ServerServiceDefinition, Interceptor) ServerServiceDefinitionExtensions.Intercept(ServerServiceDefinition, Interceptor[])"
  },
  "api/Grpc.Core.ServerCallContext.html": {
    "href": "api/Grpc.Core.ServerCallContext.html",
    "title": "Class ServerCallContext | gRPC C#",
    "keywords": "Class ServerCallContext Context for a server-side call. Inheritance System.Object ServerCallContext Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public abstract class ServerCallContext Constructors ServerCallContext() Creates a new instance of ServerCallContext . Declaration protected ServerCallContext() Properties AuthContext Gets the AuthContext associated with this call. Note: Access to AuthContext is an experimental API that can change without any prior notice. Declaration public AuthContext AuthContext { get; } Property Value Type Description AuthContext AuthContextCore Provides implementation of a non-virtual public member. Declaration protected abstract AuthContext AuthContextCore { get; } Property Value Type Description AuthContext CancellationToken Cancellation token signals when call is cancelled. It is also triggered when the deadline is exceeeded or there was some other error (e.g. network problem). Declaration public CancellationToken CancellationToken { get; } Property Value Type Description System.Threading.CancellationToken CancellationTokenCore Provides implementation of a non-virtual public member. Declaration protected abstract CancellationToken CancellationTokenCore { get; } Property Value Type Description System.Threading.CancellationToken Deadline Deadline for this RPC. The call will be automatically cancelled once the deadline is exceeded. Declaration public DateTime Deadline { get; } Property Value Type Description System.DateTime DeadlineCore Provides implementation of a non-virtual public member. Declaration protected abstract DateTime DeadlineCore { get; } Property Value Type Description System.DateTime Host Name of host called in this RPC. Declaration public string Host { get; } Property Value Type Description System.String HostCore Provides implementation of a non-virtual public member. Declaration protected abstract string HostCore { get; } Property Value Type Description System.String Method Name of method called in this RPC. Declaration public string Method { get; } Property Value Type Description System.String MethodCore Provides implementation of a non-virtual public member. Declaration protected abstract string MethodCore { get; } Property Value Type Description System.String Peer Address of the remote endpoint in URI format. Declaration public string Peer { get; } Property Value Type Description System.String PeerCore Provides implementation of a non-virtual public member. Declaration protected abstract string PeerCore { get; } Property Value Type Description System.String RequestHeaders Initial metadata sent by client. Declaration public Metadata RequestHeaders { get; } Property Value Type Description Metadata RequestHeadersCore Provides implementation of a non-virtual public member. Declaration protected abstract Metadata RequestHeadersCore { get; } Property Value Type Description Metadata ResponseTrailers Trailers to send back to client after RPC finishes. Declaration public Metadata ResponseTrailers { get; } Property Value Type Description Metadata ResponseTrailersCore Provides implementation of a non-virtual public member. Declaration protected abstract Metadata ResponseTrailersCore { get; } Property Value Type Description Metadata Status Status to send back to client after RPC finishes. Declaration public Status Status { get; set; } Property Value Type Description Status StatusCore Provides implementation of a non-virtual public member. Declaration protected abstract Status StatusCore { get; set; } Property Value Type Description Status UserState Gets a dictionary that can be used by the various interceptors and handlers of this call to store arbitrary state. Declaration public IDictionary<object, object> UserState { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.Object , System.Object > UserStateCore Provides implementation of a non-virtual public member. Declaration protected virtual IDictionary<object, object> UserStateCore { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.Object , System.Object > WriteOptions Allows setting write options for the following write. For streaming response calls, this property is also exposed as on IServerStreamWriter for convenience. Both properties are backed by the same underlying value. Declaration public WriteOptions? WriteOptions { get; set; } Property Value Type Description System.Nullable < WriteOptions > WriteOptionsCore Provides implementation of a non-virtual public member. Declaration protected abstract WriteOptions? WriteOptionsCore { get; set; } Property Value Type Description System.Nullable < WriteOptions > Methods CreatePropagationToken(Nullable<ContextPropagationOptions>) Creates a propagation token to be used to propagate call context to a child call. Declaration public ContextPropagationToken CreatePropagationToken(ContextPropagationOptions? options = default(ContextPropagationOptions? )) Parameters Type Name Description System.Nullable < ContextPropagationOptions > options Returns Type Description ContextPropagationToken CreatePropagationTokenCore(Nullable<ContextPropagationOptions>) Provides implementation of a non-virtual public member. Declaration protected abstract ContextPropagationToken CreatePropagationTokenCore(ContextPropagationOptions? options) Parameters Type Name Description System.Nullable < ContextPropagationOptions > options Returns Type Description ContextPropagationToken WriteResponseHeadersAsync(Metadata) Asynchronously sends response headers for the current call to the client. This method may only be invoked once for each call and needs to be invoked before any response messages are written. Writing the first response message implicitly sends empty response headers if WriteResponseHeadersAsync haven't been called yet. Declaration public Task WriteResponseHeadersAsync(Metadata responseHeaders) Parameters Type Name Description Metadata responseHeaders The response headers to send. Returns Type Description System.Threading.Tasks.Task The task that finished once response headers have been written. WriteResponseHeadersAsyncCore(Metadata) Provides implementation of a non-virtual public member. Declaration protected abstract Task WriteResponseHeadersAsyncCore(Metadata responseHeaders) Parameters Type Name Description Metadata responseHeaders Returns Type Description System.Threading.Tasks.Task"
  },
  "api/Grpc.Core.SslCredentials.html": {
    "href": "api/Grpc.Core.SslCredentials.html",
    "title": "Class SslCredentials | gRPC C#",
    "keywords": "Class SslCredentials Client-side SSL credentials. Inheritance System.Object ChannelCredentials SslCredentials Inherited Members ChannelCredentials.Insecure ChannelCredentials.SecureSsl ChannelCredentials.Create(ChannelCredentials, CallCredentials) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public sealed class SslCredentials : ChannelCredentials Constructors SslCredentials() Creates client-side SSL credentials loaded from disk file pointed to by the GRPC_DEFAULT_SSL_ROOTS_FILE_PATH environment variable. If that fails, gets the roots certificates from a well known place on disk. Declaration public SslCredentials() SslCredentials(Nullable<String>, Nullable<KeyCertificatePair>, Nullable<VerifyPeerCallback>) Creates client-side SSL credentials. Declaration public SslCredentials(string? rootCertificates, KeyCertificatePair? keyCertificatePair, VerifyPeerCallback? verifyPeerCallback) Parameters Type Name Description System.Nullable < System.String > rootCertificates string containing PEM encoded server root certificates. System.Nullable < KeyCertificatePair > keyCertificatePair a key certificate pair. System.Nullable < VerifyPeerCallback > verifyPeerCallback a callback to verify peer's target name and certificate. SslCredentials(String) Creates client-side SSL credentials from a string containing PEM encoded root certificates. Declaration public SslCredentials(string rootCertificates) Parameters Type Name Description System.String rootCertificates SslCredentials(String, KeyCertificatePair) Creates client-side SSL credentials. Declaration public SslCredentials(string rootCertificates, KeyCertificatePair keyCertificatePair) Parameters Type Name Description System.String rootCertificates string containing PEM encoded server root certificates. KeyCertificatePair keyCertificatePair a key certificate pair. Properties KeyCertificatePair Client side key and certificate pair. If null, client will not use key and certificate pair. Declaration public KeyCertificatePair? KeyCertificatePair { get; } Property Value Type Description System.Nullable < KeyCertificatePair > RootCertificates PEM encoding of the server root certificates. Declaration public string? RootCertificates { get; } Property Value Type Description System.Nullable < System.String > Methods InternalPopulateConfiguration(ChannelCredentialsConfiguratorBase, Object) Populates channel credentials configurator with this instance's configuration. End users never need to invoke this method as it is part of internal implementation. Declaration public override void InternalPopulateConfiguration(ChannelCredentialsConfiguratorBase configurator, object state) Parameters Type Name Description ChannelCredentialsConfiguratorBase configurator System.Object state Overrides ChannelCredentials.InternalPopulateConfiguration(ChannelCredentialsConfiguratorBase, Object)"
  },
  "api/Grpc.Core.SerializationContext.html": {
    "href": "api/Grpc.Core.SerializationContext.html",
    "title": "Class SerializationContext | gRPC C#",
    "keywords": "Class SerializationContext Provides storage for payload when serializing a message. Inheritance System.Object SerializationContext Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public abstract class SerializationContext Methods Complete() Complete the payload written to the buffer writer. Complete() can only be called once. Declaration public virtual void Complete() Complete(Byte[]) Use the byte array as serialized form of current message and mark serialization process as complete. Complete(byte[]) can only be called once. By calling this method the caller gives up the ownership of the payload which must not be accessed afterwards. Declaration public virtual void Complete(byte[] payload) Parameters Type Name Description System.Byte [] payload the serialized form of current message GetBufferWriter() Gets buffer writer that can be used to write the serialized data. Once serialization is finished, Complete() needs to be called. Declaration public virtual IBufferWriter<byte> GetBufferWriter() Returns Type Description IBufferWriter < System.Byte > SetPayloadLength(Int32) Sets the payload length when writing serialized data into a buffer writer. If the serializer knows the full payload length in advance, providing that information before obtaining the buffer writer using GetBufferWriter() can improve serialization efficiency by avoiding copies. The provided payload length must be the same as the data written to the writer. Calling this method is optional. If the payload length is not set then the length is calculated using the data written to the buffer writer when Complete() is called. Declaration public virtual void SetPayloadLength(int payloadLength) Parameters Type Name Description System.Int32 payloadLength The total length of the payload in bytes."
  },
  "api/Grpc.Core.Logging.html": {
    "href": "api/Grpc.Core.Logging.html",
    "title": "Namespace Grpc.Core.Logging | gRPC C#",
    "keywords": "Namespace Grpc.Core.Logging Classes ConsoleLogger Logger that logs to System.Console. LogLevelFilterLogger Logger that filters out messages below certain log level. NullLogger Logger which doesn't log any information anywhere. TextWriterLogger Logger that logs to an arbitrary System.IO.TextWriter . Interfaces ILogger For logging messages. Enums LogLevel Standard logging levels."
  },
  "api/Grpc.Core.ChannelState.html": {
    "href": "api/Grpc.Core.ChannelState.html",
    "title": "Enum ChannelState | gRPC C#",
    "keywords": "Enum ChannelState Connectivity state of a channel. Based on grpc_connectivity_state from grpc/grpc.h Namespace : Grpc.Core Assembly : Grpc.Core.dll Syntax public enum ChannelState Fields Name Description Connecting Channel is connecting Idle Channel is idle Ready Channel is ready for work Shutdown Channel has seen a failure that it cannot recover from TransientFailure Channel has seen a failure but expects to recover"
  },
  "api/Grpc.Core.Calls.html": {
    "href": "api/Grpc.Core.Calls.html",
    "title": "Class Calls | gRPC C#",
    "keywords": "Class Calls Helper methods for generated clients to make RPC calls. Most users will use this class only indirectly and will be making calls using client object generated from protocol buffer definition files. Inheritance System.Object Calls Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.dll Syntax public static class Calls Methods AsyncClientStreamingCall<TRequest, TResponse>(CallInvocationDetails<TRequest, TResponse>) Invokes a client streaming call asynchronously. In client streaming scenario, client sends a stream of requests and server responds with a single response. Declaration public static AsyncClientStreamingCall<TRequest, TResponse> AsyncClientStreamingCall<TRequest, TResponse>(CallInvocationDetails<TRequest, TResponse> call) where TRequest : class where TResponse : class Parameters Type Name Description CallInvocationDetails <TRequest, TResponse> call The call definition. Returns Type Description AsyncClientStreamingCall <TRequest, TResponse> An awaitable call object providing access to the response. Type Parameters Name Description TRequest Type of request messages. TResponse The of response message. AsyncDuplexStreamingCall<TRequest, TResponse>(CallInvocationDetails<TRequest, TResponse>) Invokes a duplex streaming call asynchronously. In duplex streaming scenario, client sends a stream of requests and server responds with a stream of responses. The response stream is completely independent and both side can be sending messages at the same time. Declaration public static AsyncDuplexStreamingCall<TRequest, TResponse> AsyncDuplexStreamingCall<TRequest, TResponse>(CallInvocationDetails<TRequest, TResponse> call) where TRequest : class where TResponse : class Parameters Type Name Description CallInvocationDetails <TRequest, TResponse> call The call definition. Returns Type Description AsyncDuplexStreamingCall <TRequest, TResponse> A call object providing access to the asynchronous request and response streams. Type Parameters Name Description TRequest Type of request messages. TResponse Type of responsemessages. AsyncServerStreamingCall<TRequest, TResponse>(CallInvocationDetails<TRequest, TResponse>, TRequest) Invokes a server streaming call asynchronously. In server streaming scenario, client sends on request and server responds with a stream of responses. Declaration public static AsyncServerStreamingCall<TResponse> AsyncServerStreamingCall<TRequest, TResponse>(CallInvocationDetails<TRequest, TResponse> call, TRequest req) where TRequest : class where TResponse : class Parameters Type Name Description CallInvocationDetails <TRequest, TResponse> call The call definition. TRequest req Request message. Returns Type Description AsyncServerStreamingCall <TResponse> A call object providing access to the asynchronous response stream. Type Parameters Name Description TRequest Type of request message. TResponse The of response messages. AsyncUnaryCall<TRequest, TResponse>(CallInvocationDetails<TRequest, TResponse>, TRequest) Invokes a simple remote call asynchronously. Declaration public static AsyncUnaryCall<TResponse> AsyncUnaryCall<TRequest, TResponse>(CallInvocationDetails<TRequest, TResponse> call, TRequest req) where TRequest : class where TResponse : class Parameters Type Name Description CallInvocationDetails <TRequest, TResponse> call The call definition. TRequest req Request message. Returns Type Description AsyncUnaryCall <TResponse> An awaitable call object providing access to the response. Type Parameters Name Description TRequest Type of request message. TResponse The of response message. BlockingUnaryCall<TRequest, TResponse>(CallInvocationDetails<TRequest, TResponse>, TRequest) Invokes a simple remote call in a blocking fashion. Declaration public static TResponse BlockingUnaryCall<TRequest, TResponse>(CallInvocationDetails<TRequest, TResponse> call, TRequest req) where TRequest : class where TResponse : class Parameters Type Name Description CallInvocationDetails <TRequest, TResponse> call The call definition. TRequest req Request message. Returns Type Description TResponse The response. Type Parameters Name Description TRequest Type of request message. TResponse The of response message."
  },
  "api/Grpc.Core.Interceptors.ChannelExtensions.html": {
    "href": "api/Grpc.Core.Interceptors.ChannelExtensions.html",
    "title": "Class ChannelExtensions | gRPC C#",
    "keywords": "Class ChannelExtensions Provides extension methods to make it easy to register interceptors on Channel objects. Inheritance System.Object ChannelExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core.Interceptors Assembly : Grpc.Core.Api.dll Syntax public static class ChannelExtensions Methods Intercept(ChannelBase, Interceptor) Returns a CallInvoker instance that intercepts the channel with the given interceptor. Declaration public static CallInvoker Intercept(this ChannelBase channel, Interceptor interceptor) Parameters Type Name Description ChannelBase channel The channel to intercept. Interceptor interceptor The interceptor to intercept the channel with. Returns Type Description CallInvoker Remarks Multiple interceptors can be added on top of each other by calling \"channel.Intercept(a, b, c)\". The order of invocation will be \"a\", \"b\", and then \"c\". Interceptors can be later added to an existing intercepted channel, effectively building a chain like \"channel.Intercept(c).Intercept(b).Intercept(a)\". Note that in this case, the last interceptor added will be the first to take control. Intercept(ChannelBase, Interceptor[]) Returns a CallInvoker instance that intercepts the channel with the given interceptors. Declaration public static CallInvoker Intercept(this ChannelBase channel, params Interceptor[] interceptors) Parameters Type Name Description ChannelBase channel The channel to intercept. Interceptor [] interceptors An array of interceptors to intercept the channel with. Control is passed to the interceptors in the order specified. Returns Type Description CallInvoker Remarks Multiple interceptors can be added on top of each other by calling \"channel.Intercept(a, b, c)\". The order of invocation will be \"a\", \"b\", and then \"c\". Interceptors can be later added to an existing intercepted channel, effectively building a chain like \"channel.Intercept(c).Intercept(b).Intercept(a)\". Note that in this case, the last interceptor added will be the first to take control. Intercept(ChannelBase, Func<Metadata, Metadata>) Returns a CallInvoker instance that intercepts the invoker with the given interceptor. Declaration public static CallInvoker Intercept(this ChannelBase channel, Func<Metadata, Metadata> interceptor) Parameters Type Name Description ChannelBase channel The channel to intercept. System.Func < Metadata , Metadata > interceptor An interceptor delegate that takes the request metadata to be sent with an outgoing call and returns a Metadata instance that will replace the existing invocation metadata. Returns Type Description CallInvoker Remarks Multiple interceptors can be added on top of each other by building a chain like \"channel.Intercept(c).Intercept(b).Intercept(a)\". Note that in this case, the last interceptor added will be the first to take control."
  },
  "api/Grpc.Core.IMethod.html": {
    "href": "api/Grpc.Core.IMethod.html",
    "title": "Interface IMethod | gRPC C#",
    "keywords": "Interface IMethod A non-generic representation of a remote method. Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public interface IMethod Properties FullName Gets the fully qualified name of the method. On the server side, methods are dispatched based on this name. Declaration string FullName { get; } Property Value Type Description System.String Name Gets the unqualified name of the method. Declaration string Name { get; } Property Value Type Description System.String ServiceName Gets the name of the service to which this method belongs. Declaration string ServiceName { get; } Property Value Type Description System.String Type Gets the type of the method. Declaration MethodType Type { get; } Property Value Type Description MethodType"
  },
  "api/Grpc.Core.ContextPropagationOptions.html": {
    "href": "api/Grpc.Core.ContextPropagationOptions.html",
    "title": "Class ContextPropagationOptions | gRPC C#",
    "keywords": "Class ContextPropagationOptions Options for ContextPropagationToken . Inheritance System.Object ContextPropagationOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public class ContextPropagationOptions Constructors ContextPropagationOptions(Boolean, Boolean) Creates new context propagation options. Declaration public ContextPropagationOptions(bool propagateDeadline = true, bool propagateCancellation = true) Parameters Type Name Description System.Boolean propagateDeadline If set to true parent call's deadline will be propagated to the child call. System.Boolean propagateCancellation If set to true parent call's cancellation token will be propagated to the child call. Fields Default The context propagation options that will be used by default. Declaration public static readonly ContextPropagationOptions Default Field Value Type Description ContextPropagationOptions Properties IsPropagateCancellation true if parent call's cancellation token should be propagated to the child call. Declaration public bool IsPropagateCancellation { get; } Property Value Type Description System.Boolean IsPropagateDeadline true if parent call's deadline should be propagated to the child call. Declaration public bool IsPropagateDeadline { get; } Property Value Type Description System.Boolean"
  },
  "api/Grpc.Core.ClientBase.html": {
    "href": "api/Grpc.Core.ClientBase.html",
    "title": "Class ClientBase | gRPC C#",
    "keywords": "Class ClientBase Base class for client-side stubs. Inheritance System.Object ClientBase ClientBase<T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public abstract class ClientBase Constructors ClientBase() Initializes a new instance of ClientBase class that throws NotImplementedException upon invocation of any RPC. This constructor is only provided to allow creation of test doubles for client classes (e.g. mocking requires a parameterless constructor). Declaration protected ClientBase() ClientBase(CallInvoker) Initializes a new instance of ClientBase class. Declaration public ClientBase(CallInvoker callInvoker) Parameters Type Name Description CallInvoker callInvoker The CallInvoker for remote call invocation. ClientBase(ChannelBase) Initializes a new instance of ClientBase class. Declaration public ClientBase(ChannelBase channel) Parameters Type Name Description ChannelBase channel The channel to use for remote call invocation. ClientBase(ClientBase.ClientBaseConfiguration) Initializes a new instance of ClientBase class. Declaration protected ClientBase(ClientBase.ClientBaseConfiguration configuration) Parameters Type Name Description ClientBase.ClientBaseConfiguration configuration The configuration. Properties CallInvoker Gets the call invoker. Declaration protected CallInvoker CallInvoker { get; } Property Value Type Description CallInvoker"
  },
  "api/Grpc.Core.CallCredentialsConfiguratorBase.html": {
    "href": "api/Grpc.Core.CallCredentialsConfiguratorBase.html",
    "title": "Class CallCredentialsConfiguratorBase | gRPC C#",
    "keywords": "Class CallCredentialsConfiguratorBase Base class for objects that can consume configuration from CallCredentials objects. Note: experimental API that can change or be removed without any prior notice. Inheritance System.Object CallCredentialsConfiguratorBase Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public abstract class CallCredentialsConfiguratorBase Methods SetAsyncAuthInterceptorCredentials(Nullable<Object>, AsyncAuthInterceptor) Consumes configuration for call credentials created from AsyncAuthInterceptor Declaration public abstract void SetAsyncAuthInterceptorCredentials(object? state, AsyncAuthInterceptor interceptor) Parameters Type Name Description System.Nullable < System.Object > state AsyncAuthInterceptor interceptor SetCompositeCredentials(Nullable<Object>, IReadOnlyList<CallCredentials>) Consumes configuration for composite call credentials. Declaration public abstract void SetCompositeCredentials(object? state, IReadOnlyList<CallCredentials> credentials) Parameters Type Name Description System.Nullable < System.Object > state System.Collections.Generic.IReadOnlyList < CallCredentials > credentials"
  },
  "api/Grpc.Core.AsyncUnaryCall-1.html": {
    "href": "api/Grpc.Core.AsyncUnaryCall-1.html",
    "title": "Class AsyncUnaryCall<TResponse> | gRPC C#",
    "keywords": "Class AsyncUnaryCall<TResponse> Return type for single request - single response call. Inheritance System.Object AsyncUnaryCall<TResponse> Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public sealed class AsyncUnaryCall<TResponse> : IDisposable Type Parameters Name Description TResponse Response message type for this call. Constructors AsyncUnaryCall(Task<TResponse>, Func<Object, Task<Metadata>>, Func<Object, Status>, Func<Object, Metadata>, Action<Object>, Object) Creates a new AsyncUnaryCall object with the specified properties. Declaration public AsyncUnaryCall(Task<TResponse> responseAsync, Func<object, Task<Metadata>> responseHeadersAsync, Func<object, Status> getStatusFunc, Func<object, Metadata> getTrailersFunc, Action<object> disposeAction, object state) Parameters Type Name Description System.Threading.Tasks.Task <TResponse> responseAsync The response of the asynchronous call. System.Func < System.Object , System.Threading.Tasks.Task < Metadata >> responseHeadersAsync Response headers of the asynchronous call. System.Func < System.Object , Status > getStatusFunc Delegate returning the status of the call. System.Func < System.Object , Metadata > getTrailersFunc Delegate returning the trailing metadata of the call. System.Action < System.Object > disposeAction Delegate to invoke when Dispose is called on the call object. System.Object state State object for use with the callback parameters. AsyncUnaryCall(Task<TResponse>, Task<Metadata>, Func<Status>, Func<Metadata>, Action) Creates a new AsyncUnaryCall object with the specified properties. Declaration public AsyncUnaryCall(Task<TResponse> responseAsync, Task<Metadata> responseHeadersAsync, Func<Status> getStatusFunc, Func<Metadata> getTrailersFunc, Action disposeAction) Parameters Type Name Description System.Threading.Tasks.Task <TResponse> responseAsync The response of the asynchronous call. System.Threading.Tasks.Task < Metadata > responseHeadersAsync Response headers of the asynchronous call. System.Func < Status > getStatusFunc Delegate returning the status of the call. System.Func < Metadata > getTrailersFunc Delegate returning the trailing metadata of the call. System.Action disposeAction Delegate to invoke when Dispose is called on the call object. Properties ResponseAsync Asynchronous call result. Declaration public Task<TResponse> ResponseAsync { get; } Property Value Type Description System.Threading.Tasks.Task <TResponse> ResponseHeadersAsync Asynchronous access to response headers. Declaration public Task<Metadata> ResponseHeadersAsync { get; } Property Value Type Description System.Threading.Tasks.Task < Metadata > Methods ConfigureAwait(Boolean) Configures an awaiter used to await this AsyncUnaryCall<TResponse> . Declaration public ConfiguredTaskAwaitable<TResponse> ConfigureAwait(bool continueOnCapturedContext) Parameters Type Name Description System.Boolean continueOnCapturedContext true to attempt to marshal the continuation back to the original context captured; otherwise, false. Returns Type Description System.Runtime.CompilerServices.ConfiguredTaskAwaitable <TResponse> An object used to await this task. Dispose() Provides means to cleanup after the call. If the call has already finished normally (request stream has been completed and call result has been received), doesn't do anything. Otherwise, requests cancellation of the call which should terminate all pending async operations associated with the call. As a result, all resources being used by the call should be released eventually. Declaration public void Dispose() Remarks Normally, there is no need for you to dispose the call unless you want to utilize the \"Cancel\" semantics of invoking Dispose . GetAwaiter() Gets an awaiter used to await this AsyncUnaryCall<TResponse> . Declaration public TaskAwaiter<TResponse> GetAwaiter() Returns Type Description System.Runtime.CompilerServices.TaskAwaiter <TResponse> An awaiter instance. Remarks This method is intended for compiler use rather than use directly in code. GetStatus() Gets the call status if the call has already finished. Throws InvalidOperationException otherwise. Declaration public Status GetStatus() Returns Type Description Status GetTrailers() Gets the call trailing metadata if the call has already finished. Throws InvalidOperationException otherwise. Declaration public Metadata GetTrailers() Returns Type Description Metadata Implements System.IDisposable"
  },
  "api/Grpc.Core.CallOptions.html": {
    "href": "api/Grpc.Core.CallOptions.html",
    "title": "Struct CallOptions | gRPC C#",
    "keywords": "Struct CallOptions Options for calls made by client. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public struct CallOptions Constructors CallOptions(Nullable<Metadata>, Nullable<DateTime>, CancellationToken, Nullable<WriteOptions>, Nullable<ContextPropagationToken>, Nullable<CallCredentials>) Creates a new instance of CallOptions struct. Declaration public CallOptions(Metadata? headers = default(Metadata? ), DateTime? deadline = default(DateTime? ), CancellationToken cancellationToken = default(CancellationToken), WriteOptions? writeOptions = default(WriteOptions? ), ContextPropagationToken? propagationToken = default(ContextPropagationToken? ), CallCredentials? credentials = default(CallCredentials? )) Parameters Type Name Description System.Nullable < Metadata > headers Headers to be sent with the call. System.Nullable < System.DateTime > deadline Deadline for the call to finish. null means no deadline. System.Threading.CancellationToken cancellationToken Can be used to request cancellation of the call. System.Nullable < WriteOptions > writeOptions Write options that will be used for this call. System.Nullable < ContextPropagationToken > propagationToken Context propagation token obtained from ServerCallContext . System.Nullable < CallCredentials > credentials Credentials to use for this call. Properties CancellationToken Token that can be used for cancelling the call on the client side. Cancelling the token will request cancellation of the remote call. Best effort will be made to deliver the cancellation notification to the server and interaction of the call with the server side will be terminated. Unless the call finishes before the cancellation could happen (there is an inherent race), the call will finish with StatusCode.Cancelled status. Declaration public CancellationToken CancellationToken { get; } Property Value Type Description System.Threading.CancellationToken Credentials Credentials to use for this call. Declaration public CallCredentials? Credentials { get; } Property Value Type Description System.Nullable < CallCredentials > Deadline Call deadline. Declaration public DateTime? Deadline { get; } Property Value Type Description System.Nullable < System.DateTime > Headers Headers to send at the beginning of the call. Declaration public Metadata? Headers { get; } Property Value Type Description System.Nullable < Metadata > IsWaitForReady If true and channel is in ChannelState.TransientFailure , the call will attempt waiting for the channel to recover instead of failing immediately (which is the default \"FailFast\" semantics). Note: experimental API that can change or be removed without any prior notice. Declaration public bool IsWaitForReady { get; } Property Value Type Description System.Boolean PropagationToken Token for propagating parent call context. Declaration public ContextPropagationToken? PropagationToken { get; } Property Value Type Description System.Nullable < ContextPropagationToken > WriteOptions Write options that will be used for this call. Declaration public WriteOptions? WriteOptions { get; } Property Value Type Description System.Nullable < WriteOptions > Methods WithCancellationToken(CancellationToken) Returns new instance of CallOptions with CancellationToken set to the value provided. Values of all other fields are preserved. Declaration public CallOptions WithCancellationToken(CancellationToken cancellationToken) Parameters Type Name Description System.Threading.CancellationToken cancellationToken The cancellation token. Returns Type Description CallOptions WithCredentials(CallCredentials) Returns new instance of CallOptions with Credentials set to the value provided. Values of all other fields are preserved. Declaration public CallOptions WithCredentials(CallCredentials credentials) Parameters Type Name Description CallCredentials credentials The call credentials. Returns Type Description CallOptions WithDeadline(DateTime) Returns new instance of CallOptions with Deadline set to the value provided. Values of all other fields are preserved. Declaration public CallOptions WithDeadline(DateTime deadline) Parameters Type Name Description System.DateTime deadline The deadline. Returns Type Description CallOptions WithHeaders(Metadata) Returns new instance of CallOptions with Headers set to the value provided. Values of all other fields are preserved. Declaration public CallOptions WithHeaders(Metadata headers) Parameters Type Name Description Metadata headers The headers. Returns Type Description CallOptions WithPropagationToken(ContextPropagationToken) Returns new instance of CallOptions with PropagationToken set to the value provided. Values of all other fields are preserved. Declaration public CallOptions WithPropagationToken(ContextPropagationToken propagationToken) Parameters Type Name Description ContextPropagationToken propagationToken The context propagation token. Returns Type Description CallOptions WithWaitForReady(Boolean) Returns new instance of CallOptions with \"WaitForReady\" semantics enabled/disabled. IsWaitForReady . Note: experimental API that can change or be removed without any prior notice. Declaration public CallOptions WithWaitForReady(bool waitForReady = true) Parameters Type Name Description System.Boolean waitForReady Returns Type Description CallOptions WithWriteOptions(WriteOptions) Returns new instance of CallOptions with WriteOptions set to the value provided. Values of all other fields are preserved. Declaration public CallOptions WithWriteOptions(WriteOptions writeOptions) Parameters Type Name Description WriteOptions writeOptions The write options. Returns Type Description CallOptions"
  }
}