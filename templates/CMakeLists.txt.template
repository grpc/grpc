%YAML 1.2
--- |
  # GRPC global cmake file
  # This currently builds C and C++ code.
  # This file has been automatically generated from a template file.
  # Please look at the templates directory instead.
  # This file can be regenerated from the template by running
  # tools/buildgen/generate_projects.sh
  #
  # Additionally, this is currently very experimental, and unsupported.
  # Further work will happen on that file.
  #
  # Copyright 2015, Google Inc.
  # All rights reserved.
  #
  # Redistribution and use in source and binary forms, with or without
  # modification, are permitted provided that the following conditions are
  # met:
  #
  #     * Redistributions of source code must retain the above copyright
  # notice, this list of conditions and the following disclaimer.
  #     * Redistributions in binary form must reproduce the above
  # copyright notice, this list of conditions and the following disclaimer
  # in the documentation and/or other materials provided with the
  # distribution.
  #     * Neither the name of Google Inc. nor the names of its
  # contributors may be used to endorse or promote products derived from
  # this software without specific prior written permission.
  #
  # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  # "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  # LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  # A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  # OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  # SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  # LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  # DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  # THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

  <%!
  def get_deps(target_dict):
    deps = []
    if target_dict.get('baselib', False):
      deps.append("${_gRPC_BASELIB_LIBRARIES}")
    if target_dict.get('build', None) in ['protoc']:
      deps.append("${Protobuf_PROTOC_LIBRARIES}")
    if target_dict.get('secure', False):
      deps.append("${OPENSSL_LIBRARIES}")
    if target_dict['name'] in [
        'grpc++', 'grpc++_unsecure', 'grpc++_codegen_lib', 'gpr',
        'grpc_plugin_support']:
      deps.append("${Protobuf_LIBRARIES}")
    elif target_dict['name'] in ['grpc']:
      deps.append("${ZLIB_LIBRARIES}")

    if target_dict['name'] in ['gpr']:
      deps.append("${libMath}")

    for d in target_dict.get('deps', []):
      deps.append(d)
    return deps

  def get_desc_pc(target_dict):
    d_map = {
      'grpc': {
        'desc': 'High performance general RPC framework',
        'libs': ['grpc'],
        'deps': ['zlib', 'openssl']
      },
      'grpc_unsecure': {
        'desc': 'High performance general RPC framework without SSL',
        'libs': ['grpc'],
        'deps': ['zlib']
      },
      'grpc++': {
        'desc': 'C++ Wrapper for grpc',
        'libs': ['grpc++'],
        'deps': ['grpc'],
      },
      'grpc++_unsecure': {
        'desc': 'C++ Wrapper for grpc_unsecure',
        'libs': ['grpc++'],
        'deps': ['grpc_unsecure'],
      }
    }
    return d_map.get(target_dict['name'], None)
  %>

  cmake_minimum_required(VERSION 2.8)

  set(PACKAGE_NAME      "grpc")
  set(PACKAGE_VERSION   "${settings.cpp_version}")
  set(PACKAGE_STRING    "<%text>${PACKAGE_NAME} ${PACKAGE_VERSION}</%text>")
  set(PACKAGE_TARNAME   "<%text>${PACKAGE_NAME}-${PACKAGE_VERSION}</%text>")
  set(PACKAGE_BUGREPORT "https://github.com/grpc/grpc/issues/")

  project(<%text>${PACKAGE_NAME}</%text> C CXX)

  <%text>
  function(JOIN VALUES GLUE OUTPUT)
    string (REGEX REPLACE "([^\\]|^);" "\\1${GLUE}" _TMP_STR "${VALUES}")
    string (REGEX REPLACE "[\\](.)" "\\1" _TMP_STR "${_TMP_STR}") #fixes escaping
    set (${OUTPUT} "${_TMP_STR}" PARENT_SCOPE)
  endfunction()
  </%text>

  include(CheckFunctionExists)

  CHECK_FUNCTION_EXISTS(pow HAS_POW)
  if(NOT HAS_POW)
    list(APPEND CMAKE_REQUIRED_INCLUDES math.h)
    list(APPEND CMAKE_REQUIRED_LIBRARIES m)
    list(APPEND CMAKE_REQUIRED_LIBRARIES m)
    CHECK_FUNCTION_EXISTS(pow HAS_POW_INCLUDED)

    if(HAS_POW_INCLUDED)
      set(libMath m)
    else()
      message(FATAL_ERROR "No pow() found")
    endif()
  endif()

  if (NOT MSVC)
    set(gRPC_INSTALL ON CACHE BOOL "Generate installation target")
  else()
    set(gRPC_INSTALL OFF CACHE BOOL "Generate installation target")
  endif()

  if (MSVC)
    add_definitions( -D_WIN32_WINNT=0x600 )
  endif()

  find_package(ZLIB)
  if (NOT ZLIB_FOUND)
    if (NOT ZLIB_ROOT_DIR)
      set(ZLIB_ROOT_DIR <%text>${CMAKE_CURRENT_SOURCE_DIR}</%text>/third_party/zlib)
    endif()
    set(ZLIB_INCLUDE_DIRS "<%text>${ZLIB_ROOT_DIR}</%text>")

    if (EXISTS "<%text>${ZLIB_ROOT_DIR}</%text>/CMakeLists.txt")
      add_subdirectory(<%text>${ZLIB_ROOT_DIR}</%text> third_party/zlib)

      if (TARGET zlibstatic)
        set(ZLIB_LIBRARIES zlibstatic)
      endif()
    else()
      message(FATAL "Zlib not found")
    endif()
  endif()

  find_package(OpenSSL)
  if (NOT OPENSSL_FOUND)
    if (NOT BORINGSSL_ROOT_DIR)
        set(BORINGSSL_ROOT_DIR <%text>${CMAKE_CURRENT_SOURCE_DIR}</%text>/third_party/boringssl)
    endif()
    set(OPENSSL_INCLUDE_DIR "<%text>${BORINGSSL_ROOT_DIR}</%text>")

    if (EXISTS "<%text>${BORINGSSL_ROOT_DIR}</%text>/CMakeLists.txt")
      add_subdirectory(<%text>${BORINGSSL_ROOT_DIR}</%text> third_party/boringssl)

      if (TARGET ssl)
        set(OPENSSL_LIBRARIES ssl)
      endif()
    else()
      message(FATAL "OpenSSL or BoringSSL not found")
    endif()
  endif()

  find_package(Protobuf)
  if (NOT Protobuf_FOUND)
    if (NOT Protobuf_BUILD_TESTS)
      set(Protobuf_BUILD_TESTS OFF CACHE BOOL "Build protobuf tests")
    endif()

    if (NOT PROTOBUF_ROOT_DIR)
      set(PROTOBUF_ROOT_DIR <%text>${CMAKE_CURRENT_SOURCE_DIR}</%text>/third_party/protobuf)
    endif()
    set(Protobuf_INCLUDE_DIRS "<%text>${PROTOBUF_ROOT_DIR}</%text>")

    if (EXISTS "<%text>${PROTOBUF_ROOT_DIR}</%text>/cmake/CMakeLists.txt")
      set(protobuf_MSVC_STATIC_RUNTIME OFF CACHE BOOL "Link static runtime libraries")
      add_subdirectory(<%text>${PROTOBUF_ROOT_DIR}</%text>/cmake third_party/protobuf)

      if (TARGET libprotobuf)
        set(Protobuf_LIBRARIES libprotobuf)
      endif()

      if (TARGET libprotobuf-lite)
        set(Protobuf_LITE_LIBRARIES libprotobuf-lite)
      endif()

      if (TARGET libprotoc)
        set(Protobuf_PROTOC_LIBRARIES libprotoc)
      endif()
    else()
      message(FATAL "Protobuf not found")
    endif()
  endif()

  if(NOT MSVC)
    set(CMAKE_C_FLAGS   "<%text>${CMAKE_C_FLAGS}</%text>   -std=c11")
    set(CMAKE_CXX_FLAGS "<%text>${CMAKE_CXX_FLAGS}</%text> -std=c++11")
  endif()

  if(WIN32 AND MSVC)
    set(_gRPC_BASELIB_LIBRARIES wsock32 ws2_32)
  endif()

  include(GNUInstallDirs)
  if(NOT DEFINED CMAKE_INSTALL_CMAKEDIR)
    set(CMAKE_INSTALL_CMAKEDIR "<%text>${CMAKE_INSTALL_LIBDIR}</%text>/cmake/gRPC")
  endif()

  % for lib in libs:
  % if lib.build in ["all", "protoc", "tool"]:
    ${cc_library(lib)}
    ${cc_install(lib)}
  % endif
  % endfor

  % for tgt in targets:
  % if tgt.build in ["all", "protoc", "tool"]:
  ${cc_binary(tgt)}
  ${cc_install(tgt)}
  % endif
  % endfor

  <%def name="cc_library(lib)">
  add_library(${lib.name}
  % for src in lib.src:
    ${src}
  % endfor
  )

  target_include_directories(${lib.name}
    PRIVATE <%text>${CMAKE_CURRENT_SOURCE_DIR}</%text>
    PRIVATE <%text>${CMAKE_CURRENT_SOURCE_DIR}</%text>/include
    PRIVATE <%text>${BORINGSSL_ROOT_DIR}</%text>/include
    PRIVATE <%text>${PROTOBUF_ROOT_DIR}</%text>/src
    PRIVATE <%text>${ZLIB_INCLUDE_DIR}</%text>
    PRIVATE <%text>${CMAKE_CURRENT_BINARY_DIR}</%text>/third_party/zlib
  )

  % if len(get_deps(lib)) > 0:
  target_link_libraries(${lib.name}
  % for dep in get_deps(lib):
    ${dep}
  % endfor
  )
  % endif

  % if len(lib.get('public_headers', [])) > 0:
  foreach(_hdr
  % for hdr in lib.get('public_headers', []):
    ${hdr}
  % endfor
  )
    string(REPLACE "include/" "" _path <%text>${_hdr}</%text>)
    get_filename_component(_path <%text>${_path}</%text> PATH)
    install(FILES <%text>${_hdr}</%text>
      DESTINATION "<%text>${CMAKE_INSTALL_INCLUDEDIR}/${_path}</%text>"
    )
  endforeach()
  % endif

  % if get_desc_pc(lib):
  if (BUILD_SHARED_LIBS)
    set(PKG_CONFIG_LIBNAME "${lib.name}")
    set(PKG_CONFIG_DESCRIPTION "${get_desc_pc(lib)['desc']}")
    unset(_PKG_CONFIG_REQUIRES_PRIVATE)
    unset(_PKG_CONFIG_LIBS_PRIVATE)

    % for dep in get_desc_pc(lib)['deps']:
    % if dep == 'openssl':
    if (OPENSSL_FOUND)
      LIST(APPEND _PKG_CONFIG_REQUIRES_PRIVATE "openssl")
    else()
      LIST(APPEND _PKG_CONFIG_LIBS_PRIVATE '-lssl')
      LIST(APPEND _PKG_CONFIG_LIBS_PRIVATE '-lcrypto')
    endif()
    % elif dep == 'zlib':
    if (ZLIB_FOUND)
      LIST(APPEND _PKG_CONFIG_REQUIRES_PRIVATE "zlib")
    else()
      LIST(APPEND _PKG_CONFIG_LIBS_PRIVATE '-lz')
    endif()
    % elif dep in ['grpc', 'grpc_unsecure']:
    LIST(APPEND _PKG_CONFIG_REQUIRES_PRIVATE ${dep})
    % endif
    % endfor
    % for library in get_desc_pc(lib)['libs']:
    set(PKG_CONFIG_LIB "-l${library}")
    % endfor

    JOIN("<%text>${_PKG_CONFIG_REQUIRES_PRIVATE}</%text>" " " PKG_CONFIG_REQUIRES_PRIVATE)
    JOIN("<%text>${_PKG_CONFIG_LIBS_PRIVATE}</%text>" " " PKG_CONFIG_LIBS_PRIVATE)
    configure_file(tools/cmake/pkg-config.pc.in "<%text>${PKG_CONFIG_LIBNAME}</%text>.pc" @ONLY)
    install(FILES "<%text>${CMAKE_CURRENT_BINARY_DIR}/${PKG_CONFIG_LIBNAME}</%text>.pc" DESTINATION lib/pkgconfig)
  endif()
  %endif
  </%def>

  <%def name="cc_binary(tgt)">
  add_executable(${tgt.name}
  % for src in tgt.src:
    ${src}
  % endfor
  )

  target_include_directories(${tgt.name}
    PRIVATE <%text>${CMAKE_CURRENT_SOURCE_DIR}</%text>
    PRIVATE <%text>${CMAKE_CURRENT_SOURCE_DIR}</%text>/include
    PRIVATE <%text>${BORINGSSL_ROOT_DIR}</%text>/include
    PRIVATE <%text>${PROTOBUF_ROOT_DIR}</%text>/src
    PRIVATE <%text>${ZLIB_ROOT_DIR}</%text>
    PRIVATE <%text>${CMAKE_CURRENT_BINARY_DIR}</%text>/third_party/zlib
  )

  % if len(get_deps(tgt)) > 0:
  target_link_libraries(${tgt.name}
  % for dep in get_deps(tgt):
    ${dep}
  % endfor
  )
  % endif
  </%def>

  <%def name="cc_install(tgt)">
  if (gRPC_INSTALL)
    install(TARGETS ${tgt.name} EXPORT gRPCTargets
      RUNTIME DESTINATION <%text>${CMAKE_INSTALL_BINDIR}</%text>
      LIBRARY DESTINATION <%text>${CMAKE_INSTALL_LIBDIR}</%text>
      ARCHIVE DESTINATION <%text>${CMAKE_INSTALL_LIBDIR}</%text>
    )
  endif()
  </%def>

  if (gRPC_INSTALL)
    install(EXPORT gRPCTargets
      DESTINATION <%text>${CMAKE_INSTALL_CMAKEDIR}</%text>
      NAMESPACE gRPC::
    )
  endif()

  foreach(_config gRPCConfig gRPCConfigVersion)
    configure_file(tools/cmake/<%text>${_config}</%text>.cmake.in
      <%text>${_config}</%text>.cmake @ONLY)
    install(FILES <%text>${CMAKE_CURRENT_BINARY_DIR}/${_config}</%text>.cmake
      DESTINATION <%text>${CMAKE_INSTALL_CMAKEDIR}</%text>
    )
  endforeach()
