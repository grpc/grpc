// Copyright 2015, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// An integration test service that covers all the method signature permutations
// of unary/streaming requests/responses.
syntax = "proto3";

import "test/proto/perf_tests/perf_stats.proto";

package grpc.testing;

enum ClientType {
  SYNCHRONOUS_CLIENT = 0;
  ASYNC_CLIENT = 1;
}

enum ServerType {
  SYNCHRONOUS_SERVER = 0;
  ASYNC_SERVER = 1;
}

enum RpcType {
  UNARY = 0;
  STREAMING = 1;
}

message PoissonParams {
  double offered_load = 1;
}

message UniformParams {
  double interarrival_lo = 1;
  double interarrival_hi = 2;
}

message DeterministicParams {
  double offered_load = 1;
}

message ParetoParams {
  double interarrival_base = 1;
  double alpha = 2;
}

message ClosedLoopParams {
}

message LoadParams {
  oneof load {
    PoissonParams poisson = 1;
    UniformParams uniform = 2;
    DeterministicParams determ = 3;
    ParetoParams pareto = 4;
    ClosedLoopParams closed = 5;
  };
}

message ClientConfig {
  repeated string server_targets = 1;
  ClientType client_type = 2;
  bool use_tls = 3;
  int32 outstanding_rpcs_per_channel = 4;
  int32 client_channels = 5;
  int32 payload_size = 6;
  // only for async client:
  int32 async_client_threads = 7;
  RpcType rpc_type = 8;
  string host = 9;
  LoadParams load_params = 11;
}

message ClientStatus {
  ClientStats stats = 1;
}

// Request current stats
message Mark {
  bool reset = 1;
}

message ClientArgs {
  oneof argtype {
    ClientConfig setup = 1;
    Mark mark = 2;
  }
}

message ServerConfig {
  ServerType server_type = 1;
  int32 threads = 2;
  bool use_tls = 3;
  string host = 4;
  int32 port = 5;
}

message ServerArgs {
  oneof argtype {
    ServerConfig setup = 1;
    Mark mark = 2;
  }
}

message ServerStatus {
  ServerStats stats = 1;
  int32 port = 2;
}
